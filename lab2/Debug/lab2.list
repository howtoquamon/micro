
lab2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002c34  08000140  08000140  00010140  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a0  08002d74  08002d74  00012d74  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08002e14  08002e14  00012e14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08002e18  08002e18  00012e18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000068  20000000  08002e1c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000138  20000068  08002e84  00020068  2**3
                  ALLOC
  7 ._user_heap_stack 00000600  200001a0  08002e84  000201a0  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000cd70  00000000  00000000  00020091  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00001bd9  00000000  00000000  0002ce01  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002b68  00000000  00000000  0002e9da  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 000004f8  00000000  00000000  00031548  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000850  00000000  00000000  00031a40  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00003799  00000000  00000000  00032290  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00002256  00000000  00000000  00035a29  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  00037c7f  2**0
                  CONTENTS, READONLY
 17 .debug_frame  000010e0  00000000  00000000  00037cfc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000068 	.word	0x20000068
 800015c:	00000000 	.word	0x00000000
 8000160:	08002d5c 	.word	0x08002d5c

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	2000006c 	.word	0x2000006c
 800017c:	08002d5c 	.word	0x08002d5c

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <__aeabi_drsub>:
 8000190:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000194:	e002      	b.n	800019c <__adddf3>
 8000196:	bf00      	nop

08000198 <__aeabi_dsub>:
 8000198:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800019c <__adddf3>:
 800019c:	b530      	push	{r4, r5, lr}
 800019e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001a6:	ea94 0f05 	teq	r4, r5
 80001aa:	bf08      	it	eq
 80001ac:	ea90 0f02 	teqeq	r0, r2
 80001b0:	bf1f      	itttt	ne
 80001b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001c2:	f000 80e2 	beq.w	800038a <__adddf3+0x1ee>
 80001c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001ce:	bfb8      	it	lt
 80001d0:	426d      	neglt	r5, r5
 80001d2:	dd0c      	ble.n	80001ee <__adddf3+0x52>
 80001d4:	442c      	add	r4, r5
 80001d6:	ea80 0202 	eor.w	r2, r0, r2
 80001da:	ea81 0303 	eor.w	r3, r1, r3
 80001de:	ea82 0000 	eor.w	r0, r2, r0
 80001e2:	ea83 0101 	eor.w	r1, r3, r1
 80001e6:	ea80 0202 	eor.w	r2, r0, r2
 80001ea:	ea81 0303 	eor.w	r3, r1, r3
 80001ee:	2d36      	cmp	r5, #54	; 0x36
 80001f0:	bf88      	it	hi
 80001f2:	bd30      	pophi	{r4, r5, pc}
 80001f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000200:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000204:	d002      	beq.n	800020c <__adddf3+0x70>
 8000206:	4240      	negs	r0, r0
 8000208:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800020c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000210:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000214:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000218:	d002      	beq.n	8000220 <__adddf3+0x84>
 800021a:	4252      	negs	r2, r2
 800021c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000220:	ea94 0f05 	teq	r4, r5
 8000224:	f000 80a7 	beq.w	8000376 <__adddf3+0x1da>
 8000228:	f1a4 0401 	sub.w	r4, r4, #1
 800022c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000230:	db0d      	blt.n	800024e <__adddf3+0xb2>
 8000232:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000236:	fa22 f205 	lsr.w	r2, r2, r5
 800023a:	1880      	adds	r0, r0, r2
 800023c:	f141 0100 	adc.w	r1, r1, #0
 8000240:	fa03 f20e 	lsl.w	r2, r3, lr
 8000244:	1880      	adds	r0, r0, r2
 8000246:	fa43 f305 	asr.w	r3, r3, r5
 800024a:	4159      	adcs	r1, r3
 800024c:	e00e      	b.n	800026c <__adddf3+0xd0>
 800024e:	f1a5 0520 	sub.w	r5, r5, #32
 8000252:	f10e 0e20 	add.w	lr, lr, #32
 8000256:	2a01      	cmp	r2, #1
 8000258:	fa03 fc0e 	lsl.w	ip, r3, lr
 800025c:	bf28      	it	cs
 800025e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000262:	fa43 f305 	asr.w	r3, r3, r5
 8000266:	18c0      	adds	r0, r0, r3
 8000268:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800026c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000270:	d507      	bpl.n	8000282 <__adddf3+0xe6>
 8000272:	f04f 0e00 	mov.w	lr, #0
 8000276:	f1dc 0c00 	rsbs	ip, ip, #0
 800027a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800027e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000282:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000286:	d31b      	bcc.n	80002c0 <__adddf3+0x124>
 8000288:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800028c:	d30c      	bcc.n	80002a8 <__adddf3+0x10c>
 800028e:	0849      	lsrs	r1, r1, #1
 8000290:	ea5f 0030 	movs.w	r0, r0, rrx
 8000294:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000298:	f104 0401 	add.w	r4, r4, #1
 800029c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002a4:	f080 809a 	bcs.w	80003dc <__adddf3+0x240>
 80002a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002ac:	bf08      	it	eq
 80002ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002b2:	f150 0000 	adcs.w	r0, r0, #0
 80002b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002ba:	ea41 0105 	orr.w	r1, r1, r5
 80002be:	bd30      	pop	{r4, r5, pc}
 80002c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002c4:	4140      	adcs	r0, r0
 80002c6:	eb41 0101 	adc.w	r1, r1, r1
 80002ca:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80002ce:	f1a4 0401 	sub.w	r4, r4, #1
 80002d2:	d1e9      	bne.n	80002a8 <__adddf3+0x10c>
 80002d4:	f091 0f00 	teq	r1, #0
 80002d8:	bf04      	itt	eq
 80002da:	4601      	moveq	r1, r0
 80002dc:	2000      	moveq	r0, #0
 80002de:	fab1 f381 	clz	r3, r1
 80002e2:	bf08      	it	eq
 80002e4:	3320      	addeq	r3, #32
 80002e6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ea:	f1b3 0220 	subs.w	r2, r3, #32
 80002ee:	da0c      	bge.n	800030a <__adddf3+0x16e>
 80002f0:	320c      	adds	r2, #12
 80002f2:	dd08      	ble.n	8000306 <__adddf3+0x16a>
 80002f4:	f102 0c14 	add.w	ip, r2, #20
 80002f8:	f1c2 020c 	rsb	r2, r2, #12
 80002fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000300:	fa21 f102 	lsr.w	r1, r1, r2
 8000304:	e00c      	b.n	8000320 <__adddf3+0x184>
 8000306:	f102 0214 	add.w	r2, r2, #20
 800030a:	bfd8      	it	le
 800030c:	f1c2 0c20 	rsble	ip, r2, #32
 8000310:	fa01 f102 	lsl.w	r1, r1, r2
 8000314:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000318:	bfdc      	itt	le
 800031a:	ea41 010c 	orrle.w	r1, r1, ip
 800031e:	4090      	lslle	r0, r2
 8000320:	1ae4      	subs	r4, r4, r3
 8000322:	bfa2      	ittt	ge
 8000324:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000328:	4329      	orrge	r1, r5
 800032a:	bd30      	popge	{r4, r5, pc}
 800032c:	ea6f 0404 	mvn.w	r4, r4
 8000330:	3c1f      	subs	r4, #31
 8000332:	da1c      	bge.n	800036e <__adddf3+0x1d2>
 8000334:	340c      	adds	r4, #12
 8000336:	dc0e      	bgt.n	8000356 <__adddf3+0x1ba>
 8000338:	f104 0414 	add.w	r4, r4, #20
 800033c:	f1c4 0220 	rsb	r2, r4, #32
 8000340:	fa20 f004 	lsr.w	r0, r0, r4
 8000344:	fa01 f302 	lsl.w	r3, r1, r2
 8000348:	ea40 0003 	orr.w	r0, r0, r3
 800034c:	fa21 f304 	lsr.w	r3, r1, r4
 8000350:	ea45 0103 	orr.w	r1, r5, r3
 8000354:	bd30      	pop	{r4, r5, pc}
 8000356:	f1c4 040c 	rsb	r4, r4, #12
 800035a:	f1c4 0220 	rsb	r2, r4, #32
 800035e:	fa20 f002 	lsr.w	r0, r0, r2
 8000362:	fa01 f304 	lsl.w	r3, r1, r4
 8000366:	ea40 0003 	orr.w	r0, r0, r3
 800036a:	4629      	mov	r1, r5
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	fa21 f004 	lsr.w	r0, r1, r4
 8000372:	4629      	mov	r1, r5
 8000374:	bd30      	pop	{r4, r5, pc}
 8000376:	f094 0f00 	teq	r4, #0
 800037a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800037e:	bf06      	itte	eq
 8000380:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000384:	3401      	addeq	r4, #1
 8000386:	3d01      	subne	r5, #1
 8000388:	e74e      	b.n	8000228 <__adddf3+0x8c>
 800038a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800038e:	bf18      	it	ne
 8000390:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000394:	d029      	beq.n	80003ea <__adddf3+0x24e>
 8000396:	ea94 0f05 	teq	r4, r5
 800039a:	bf08      	it	eq
 800039c:	ea90 0f02 	teqeq	r0, r2
 80003a0:	d005      	beq.n	80003ae <__adddf3+0x212>
 80003a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003a6:	bf04      	itt	eq
 80003a8:	4619      	moveq	r1, r3
 80003aa:	4610      	moveq	r0, r2
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	ea91 0f03 	teq	r1, r3
 80003b2:	bf1e      	ittt	ne
 80003b4:	2100      	movne	r1, #0
 80003b6:	2000      	movne	r0, #0
 80003b8:	bd30      	popne	{r4, r5, pc}
 80003ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003be:	d105      	bne.n	80003cc <__adddf3+0x230>
 80003c0:	0040      	lsls	r0, r0, #1
 80003c2:	4149      	adcs	r1, r1
 80003c4:	bf28      	it	cs
 80003c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003ca:	bd30      	pop	{r4, r5, pc}
 80003cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003d0:	bf3c      	itt	cc
 80003d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003d6:	bd30      	popcc	{r4, r5, pc}
 80003d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003e4:	f04f 0000 	mov.w	r0, #0
 80003e8:	bd30      	pop	{r4, r5, pc}
 80003ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ee:	bf1a      	itte	ne
 80003f0:	4619      	movne	r1, r3
 80003f2:	4610      	movne	r0, r2
 80003f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003f8:	bf1c      	itt	ne
 80003fa:	460b      	movne	r3, r1
 80003fc:	4602      	movne	r2, r0
 80003fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000402:	bf06      	itte	eq
 8000404:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000408:	ea91 0f03 	teqeq	r1, r3
 800040c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000410:	bd30      	pop	{r4, r5, pc}
 8000412:	bf00      	nop

08000414 <__aeabi_ui2d>:
 8000414:	f090 0f00 	teq	r0, #0
 8000418:	bf04      	itt	eq
 800041a:	2100      	moveq	r1, #0
 800041c:	4770      	bxeq	lr
 800041e:	b530      	push	{r4, r5, lr}
 8000420:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000424:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000428:	f04f 0500 	mov.w	r5, #0
 800042c:	f04f 0100 	mov.w	r1, #0
 8000430:	e750      	b.n	80002d4 <__adddf3+0x138>
 8000432:	bf00      	nop

08000434 <__aeabi_i2d>:
 8000434:	f090 0f00 	teq	r0, #0
 8000438:	bf04      	itt	eq
 800043a:	2100      	moveq	r1, #0
 800043c:	4770      	bxeq	lr
 800043e:	b530      	push	{r4, r5, lr}
 8000440:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000444:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000448:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800044c:	bf48      	it	mi
 800044e:	4240      	negmi	r0, r0
 8000450:	f04f 0100 	mov.w	r1, #0
 8000454:	e73e      	b.n	80002d4 <__adddf3+0x138>
 8000456:	bf00      	nop

08000458 <__aeabi_f2d>:
 8000458:	0042      	lsls	r2, r0, #1
 800045a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800045e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000462:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000466:	bf1f      	itttt	ne
 8000468:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800046c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000470:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000474:	4770      	bxne	lr
 8000476:	f092 0f00 	teq	r2, #0
 800047a:	bf14      	ite	ne
 800047c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000480:	4770      	bxeq	lr
 8000482:	b530      	push	{r4, r5, lr}
 8000484:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000488:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800048c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000490:	e720      	b.n	80002d4 <__adddf3+0x138>
 8000492:	bf00      	nop

08000494 <__aeabi_ul2d>:
 8000494:	ea50 0201 	orrs.w	r2, r0, r1
 8000498:	bf08      	it	eq
 800049a:	4770      	bxeq	lr
 800049c:	b530      	push	{r4, r5, lr}
 800049e:	f04f 0500 	mov.w	r5, #0
 80004a2:	e00a      	b.n	80004ba <__aeabi_l2d+0x16>

080004a4 <__aeabi_l2d>:
 80004a4:	ea50 0201 	orrs.w	r2, r0, r1
 80004a8:	bf08      	it	eq
 80004aa:	4770      	bxeq	lr
 80004ac:	b530      	push	{r4, r5, lr}
 80004ae:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004b2:	d502      	bpl.n	80004ba <__aeabi_l2d+0x16>
 80004b4:	4240      	negs	r0, r0
 80004b6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004ba:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004be:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004c6:	f43f aedc 	beq.w	8000282 <__adddf3+0xe6>
 80004ca:	f04f 0203 	mov.w	r2, #3
 80004ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004d2:	bf18      	it	ne
 80004d4:	3203      	addne	r2, #3
 80004d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004da:	bf18      	it	ne
 80004dc:	3203      	addne	r2, #3
 80004de:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004e2:	f1c2 0320 	rsb	r3, r2, #32
 80004e6:	fa00 fc03 	lsl.w	ip, r0, r3
 80004ea:	fa20 f002 	lsr.w	r0, r0, r2
 80004ee:	fa01 fe03 	lsl.w	lr, r1, r3
 80004f2:	ea40 000e 	orr.w	r0, r0, lr
 80004f6:	fa21 f102 	lsr.w	r1, r1, r2
 80004fa:	4414      	add	r4, r2
 80004fc:	e6c1      	b.n	8000282 <__adddf3+0xe6>
 80004fe:	bf00      	nop

08000500 <__aeabi_dmul>:
 8000500:	b570      	push	{r4, r5, r6, lr}
 8000502:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000506:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800050a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800050e:	bf1d      	ittte	ne
 8000510:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000514:	ea94 0f0c 	teqne	r4, ip
 8000518:	ea95 0f0c 	teqne	r5, ip
 800051c:	f000 f8de 	bleq	80006dc <__aeabi_dmul+0x1dc>
 8000520:	442c      	add	r4, r5
 8000522:	ea81 0603 	eor.w	r6, r1, r3
 8000526:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800052a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800052e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000532:	bf18      	it	ne
 8000534:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000538:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800053c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000540:	d038      	beq.n	80005b4 <__aeabi_dmul+0xb4>
 8000542:	fba0 ce02 	umull	ip, lr, r0, r2
 8000546:	f04f 0500 	mov.w	r5, #0
 800054a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800054e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000552:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000556:	f04f 0600 	mov.w	r6, #0
 800055a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800055e:	f09c 0f00 	teq	ip, #0
 8000562:	bf18      	it	ne
 8000564:	f04e 0e01 	orrne.w	lr, lr, #1
 8000568:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800056c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000570:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000574:	d204      	bcs.n	8000580 <__aeabi_dmul+0x80>
 8000576:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800057a:	416d      	adcs	r5, r5
 800057c:	eb46 0606 	adc.w	r6, r6, r6
 8000580:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000584:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000588:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800058c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000590:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000594:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000598:	bf88      	it	hi
 800059a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800059e:	d81e      	bhi.n	80005de <__aeabi_dmul+0xde>
 80005a0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005a4:	bf08      	it	eq
 80005a6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005aa:	f150 0000 	adcs.w	r0, r0, #0
 80005ae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005b2:	bd70      	pop	{r4, r5, r6, pc}
 80005b4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005b8:	ea46 0101 	orr.w	r1, r6, r1
 80005bc:	ea40 0002 	orr.w	r0, r0, r2
 80005c0:	ea81 0103 	eor.w	r1, r1, r3
 80005c4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005c8:	bfc2      	ittt	gt
 80005ca:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005ce:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005d2:	bd70      	popgt	{r4, r5, r6, pc}
 80005d4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005d8:	f04f 0e00 	mov.w	lr, #0
 80005dc:	3c01      	subs	r4, #1
 80005de:	f300 80ab 	bgt.w	8000738 <__aeabi_dmul+0x238>
 80005e2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005e6:	bfde      	ittt	le
 80005e8:	2000      	movle	r0, #0
 80005ea:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005ee:	bd70      	pople	{r4, r5, r6, pc}
 80005f0:	f1c4 0400 	rsb	r4, r4, #0
 80005f4:	3c20      	subs	r4, #32
 80005f6:	da35      	bge.n	8000664 <__aeabi_dmul+0x164>
 80005f8:	340c      	adds	r4, #12
 80005fa:	dc1b      	bgt.n	8000634 <__aeabi_dmul+0x134>
 80005fc:	f104 0414 	add.w	r4, r4, #20
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f305 	lsl.w	r3, r0, r5
 8000608:	fa20 f004 	lsr.w	r0, r0, r4
 800060c:	fa01 f205 	lsl.w	r2, r1, r5
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000618:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800061c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000620:	fa21 f604 	lsr.w	r6, r1, r4
 8000624:	eb42 0106 	adc.w	r1, r2, r6
 8000628:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800062c:	bf08      	it	eq
 800062e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000632:	bd70      	pop	{r4, r5, r6, pc}
 8000634:	f1c4 040c 	rsb	r4, r4, #12
 8000638:	f1c4 0520 	rsb	r5, r4, #32
 800063c:	fa00 f304 	lsl.w	r3, r0, r4
 8000640:	fa20 f005 	lsr.w	r0, r0, r5
 8000644:	fa01 f204 	lsl.w	r2, r1, r4
 8000648:	ea40 0002 	orr.w	r0, r0, r2
 800064c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000650:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000654:	f141 0100 	adc.w	r1, r1, #0
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f1c4 0520 	rsb	r5, r4, #32
 8000668:	fa00 f205 	lsl.w	r2, r0, r5
 800066c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000670:	fa20 f304 	lsr.w	r3, r0, r4
 8000674:	fa01 f205 	lsl.w	r2, r1, r5
 8000678:	ea43 0302 	orr.w	r3, r3, r2
 800067c:	fa21 f004 	lsr.w	r0, r1, r4
 8000680:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000684:	fa21 f204 	lsr.w	r2, r1, r4
 8000688:	ea20 0002 	bic.w	r0, r0, r2
 800068c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000690:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000694:	bf08      	it	eq
 8000696:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f094 0f00 	teq	r4, #0
 80006a0:	d10f      	bne.n	80006c2 <__aeabi_dmul+0x1c2>
 80006a2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006a6:	0040      	lsls	r0, r0, #1
 80006a8:	eb41 0101 	adc.w	r1, r1, r1
 80006ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006b0:	bf08      	it	eq
 80006b2:	3c01      	subeq	r4, #1
 80006b4:	d0f7      	beq.n	80006a6 <__aeabi_dmul+0x1a6>
 80006b6:	ea41 0106 	orr.w	r1, r1, r6
 80006ba:	f095 0f00 	teq	r5, #0
 80006be:	bf18      	it	ne
 80006c0:	4770      	bxne	lr
 80006c2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006c6:	0052      	lsls	r2, r2, #1
 80006c8:	eb43 0303 	adc.w	r3, r3, r3
 80006cc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006d0:	bf08      	it	eq
 80006d2:	3d01      	subeq	r5, #1
 80006d4:	d0f7      	beq.n	80006c6 <__aeabi_dmul+0x1c6>
 80006d6:	ea43 0306 	orr.w	r3, r3, r6
 80006da:	4770      	bx	lr
 80006dc:	ea94 0f0c 	teq	r4, ip
 80006e0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006e4:	bf18      	it	ne
 80006e6:	ea95 0f0c 	teqne	r5, ip
 80006ea:	d00c      	beq.n	8000706 <__aeabi_dmul+0x206>
 80006ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006f0:	bf18      	it	ne
 80006f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006f6:	d1d1      	bne.n	800069c <__aeabi_dmul+0x19c>
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000700:	f04f 0000 	mov.w	r0, #0
 8000704:	bd70      	pop	{r4, r5, r6, pc}
 8000706:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800070a:	bf06      	itte	eq
 800070c:	4610      	moveq	r0, r2
 800070e:	4619      	moveq	r1, r3
 8000710:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000714:	d019      	beq.n	800074a <__aeabi_dmul+0x24a>
 8000716:	ea94 0f0c 	teq	r4, ip
 800071a:	d102      	bne.n	8000722 <__aeabi_dmul+0x222>
 800071c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000720:	d113      	bne.n	800074a <__aeabi_dmul+0x24a>
 8000722:	ea95 0f0c 	teq	r5, ip
 8000726:	d105      	bne.n	8000734 <__aeabi_dmul+0x234>
 8000728:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800072c:	bf1c      	itt	ne
 800072e:	4610      	movne	r0, r2
 8000730:	4619      	movne	r1, r3
 8000732:	d10a      	bne.n	800074a <__aeabi_dmul+0x24a>
 8000734:	ea81 0103 	eor.w	r1, r1, r3
 8000738:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800073c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000740:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000744:	f04f 0000 	mov.w	r0, #0
 8000748:	bd70      	pop	{r4, r5, r6, pc}
 800074a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800074e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000752:	bd70      	pop	{r4, r5, r6, pc}

08000754 <__aeabi_ddiv>:
 8000754:	b570      	push	{r4, r5, r6, lr}
 8000756:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800075a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800075e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000762:	bf1d      	ittte	ne
 8000764:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000768:	ea94 0f0c 	teqne	r4, ip
 800076c:	ea95 0f0c 	teqne	r5, ip
 8000770:	f000 f8a7 	bleq	80008c2 <__aeabi_ddiv+0x16e>
 8000774:	eba4 0405 	sub.w	r4, r4, r5
 8000778:	ea81 0e03 	eor.w	lr, r1, r3
 800077c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000780:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000784:	f000 8088 	beq.w	8000898 <__aeabi_ddiv+0x144>
 8000788:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800078c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000790:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000794:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000798:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800079c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007a0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007a4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007a8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ac:	429d      	cmp	r5, r3
 80007ae:	bf08      	it	eq
 80007b0:	4296      	cmpeq	r6, r2
 80007b2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007b6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007ba:	d202      	bcs.n	80007c2 <__aeabi_ddiv+0x6e>
 80007bc:	085b      	lsrs	r3, r3, #1
 80007be:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c2:	1ab6      	subs	r6, r6, r2
 80007c4:	eb65 0503 	sbc.w	r5, r5, r3
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007d2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007de:	bf22      	ittt	cs
 80007e0:	1ab6      	subcs	r6, r6, r2
 80007e2:	4675      	movcs	r5, lr
 80007e4:	ea40 000c 	orrcs.w	r0, r0, ip
 80007e8:	085b      	lsrs	r3, r3, #1
 80007ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80007f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007f6:	bf22      	ittt	cs
 80007f8:	1ab6      	subcs	r6, r6, r2
 80007fa:	4675      	movcs	r5, lr
 80007fc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000800:	085b      	lsrs	r3, r3, #1
 8000802:	ea4f 0232 	mov.w	r2, r2, rrx
 8000806:	ebb6 0e02 	subs.w	lr, r6, r2
 800080a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800080e:	bf22      	ittt	cs
 8000810:	1ab6      	subcs	r6, r6, r2
 8000812:	4675      	movcs	r5, lr
 8000814:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000822:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000826:	bf22      	ittt	cs
 8000828:	1ab6      	subcs	r6, r6, r2
 800082a:	4675      	movcs	r5, lr
 800082c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000830:	ea55 0e06 	orrs.w	lr, r5, r6
 8000834:	d018      	beq.n	8000868 <__aeabi_ddiv+0x114>
 8000836:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800083a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800083e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000842:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000846:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800084a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800084e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000852:	d1c0      	bne.n	80007d6 <__aeabi_ddiv+0x82>
 8000854:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000858:	d10b      	bne.n	8000872 <__aeabi_ddiv+0x11e>
 800085a:	ea41 0100 	orr.w	r1, r1, r0
 800085e:	f04f 0000 	mov.w	r0, #0
 8000862:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000866:	e7b6      	b.n	80007d6 <__aeabi_ddiv+0x82>
 8000868:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800086c:	bf04      	itt	eq
 800086e:	4301      	orreq	r1, r0
 8000870:	2000      	moveq	r0, #0
 8000872:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000876:	bf88      	it	hi
 8000878:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800087c:	f63f aeaf 	bhi.w	80005de <__aeabi_dmul+0xde>
 8000880:	ebb5 0c03 	subs.w	ip, r5, r3
 8000884:	bf04      	itt	eq
 8000886:	ebb6 0c02 	subseq.w	ip, r6, r2
 800088a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800088e:	f150 0000 	adcs.w	r0, r0, #0
 8000892:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000896:	bd70      	pop	{r4, r5, r6, pc}
 8000898:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800089c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008a0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008a4:	bfc2      	ittt	gt
 80008a6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008aa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ae:	bd70      	popgt	{r4, r5, r6, pc}
 80008b0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008b4:	f04f 0e00 	mov.w	lr, #0
 80008b8:	3c01      	subs	r4, #1
 80008ba:	e690      	b.n	80005de <__aeabi_dmul+0xde>
 80008bc:	ea45 0e06 	orr.w	lr, r5, r6
 80008c0:	e68d      	b.n	80005de <__aeabi_dmul+0xde>
 80008c2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008c6:	ea94 0f0c 	teq	r4, ip
 80008ca:	bf08      	it	eq
 80008cc:	ea95 0f0c 	teqeq	r5, ip
 80008d0:	f43f af3b 	beq.w	800074a <__aeabi_dmul+0x24a>
 80008d4:	ea94 0f0c 	teq	r4, ip
 80008d8:	d10a      	bne.n	80008f0 <__aeabi_ddiv+0x19c>
 80008da:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008de:	f47f af34 	bne.w	800074a <__aeabi_dmul+0x24a>
 80008e2:	ea95 0f0c 	teq	r5, ip
 80008e6:	f47f af25 	bne.w	8000734 <__aeabi_dmul+0x234>
 80008ea:	4610      	mov	r0, r2
 80008ec:	4619      	mov	r1, r3
 80008ee:	e72c      	b.n	800074a <__aeabi_dmul+0x24a>
 80008f0:	ea95 0f0c 	teq	r5, ip
 80008f4:	d106      	bne.n	8000904 <__aeabi_ddiv+0x1b0>
 80008f6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008fa:	f43f aefd 	beq.w	80006f8 <__aeabi_dmul+0x1f8>
 80008fe:	4610      	mov	r0, r2
 8000900:	4619      	mov	r1, r3
 8000902:	e722      	b.n	800074a <__aeabi_dmul+0x24a>
 8000904:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000908:	bf18      	it	ne
 800090a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800090e:	f47f aec5 	bne.w	800069c <__aeabi_dmul+0x19c>
 8000912:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000916:	f47f af0d 	bne.w	8000734 <__aeabi_dmul+0x234>
 800091a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800091e:	f47f aeeb 	bne.w	80006f8 <__aeabi_dmul+0x1f8>
 8000922:	e712      	b.n	800074a <__aeabi_dmul+0x24a>

08000924 <__aeabi_d2iz>:
 8000924:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000928:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 800092c:	d215      	bcs.n	800095a <__aeabi_d2iz+0x36>
 800092e:	d511      	bpl.n	8000954 <__aeabi_d2iz+0x30>
 8000930:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000934:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000938:	d912      	bls.n	8000960 <__aeabi_d2iz+0x3c>
 800093a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800093e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000942:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000946:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800094a:	fa23 f002 	lsr.w	r0, r3, r2
 800094e:	bf18      	it	ne
 8000950:	4240      	negne	r0, r0
 8000952:	4770      	bx	lr
 8000954:	f04f 0000 	mov.w	r0, #0
 8000958:	4770      	bx	lr
 800095a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800095e:	d105      	bne.n	800096c <__aeabi_d2iz+0x48>
 8000960:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000964:	bf08      	it	eq
 8000966:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 800096a:	4770      	bx	lr
 800096c:	f04f 0000 	mov.w	r0, #0
 8000970:	4770      	bx	lr
 8000972:	bf00      	nop

08000974 <HAL_InitTick>:
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock /1000);
 8000974:	4b08      	ldr	r3, [pc, #32]	; (8000998 <HAL_InitTick+0x24>)
{
 8000976:	b510      	push	{r4, lr}
 8000978:	4604      	mov	r4, r0
  HAL_SYSTICK_Config(SystemCoreClock /1000);
 800097a:	6818      	ldr	r0, [r3, #0]
 800097c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000980:	fbb0 f0f3 	udiv	r0, r0, r3
 8000984:	f000 faf0 	bl	8000f68 <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0);
 8000988:	2200      	movs	r2, #0
 800098a:	4621      	mov	r1, r4
 800098c:	f04f 30ff 	mov.w	r0, #4294967295
 8000990:	f000 fab6 	bl	8000f00 <HAL_NVIC_SetPriority>

   /* Return function status */
  return HAL_OK;
}
 8000994:	2000      	movs	r0, #0
 8000996:	bd10      	pop	{r4, pc}
 8000998:	20000000 	.word	0x20000000

0800099c <HAL_Init>:
{
 800099c:	b508      	push	{r3, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800099e:	2003      	movs	r0, #3
 80009a0:	f000 fa9c 	bl	8000edc <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80009a4:	2000      	movs	r0, #0
 80009a6:	f7ff ffe5 	bl	8000974 <HAL_InitTick>
  HAL_MspInit();
 80009aa:	f001 fc91 	bl	80022d0 <HAL_MspInit>
}
 80009ae:	2000      	movs	r0, #0
 80009b0:	bd08      	pop	{r3, pc}
	...

080009b4 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 80009b4:	4a02      	ldr	r2, [pc, #8]	; (80009c0 <HAL_IncTick+0xc>)
 80009b6:	6813      	ldr	r3, [r2, #0]
 80009b8:	3301      	adds	r3, #1
 80009ba:	6013      	str	r3, [r2, #0]
 80009bc:	4770      	bx	lr
 80009be:	bf00      	nop
 80009c0:	20000090 	.word	0x20000090

080009c4 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80009c4:	4b01      	ldr	r3, [pc, #4]	; (80009cc <HAL_GetTick+0x8>)
 80009c6:	6818      	ldr	r0, [r3, #0]
}
 80009c8:	4770      	bx	lr
 80009ca:	bf00      	nop
 80009cc:	20000090 	.word	0x20000090

080009d0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 80009d0:	b513      	push	{r0, r1, r4, lr}
 80009d2:	9001      	str	r0, [sp, #4]
  uint32_t tickstart = 0;
  tickstart = HAL_GetTick();
 80009d4:	f7ff fff6 	bl	80009c4 <HAL_GetTick>
 80009d8:	4604      	mov	r4, r0
  while((HAL_GetTick() - tickstart) < Delay)
 80009da:	f7ff fff3 	bl	80009c4 <HAL_GetTick>
 80009de:	9b01      	ldr	r3, [sp, #4]
 80009e0:	1b00      	subs	r0, r0, r4
 80009e2:	4298      	cmp	r0, r3
 80009e4:	d3f9      	bcc.n	80009da <HAL_Delay+0xa>
  {
  }
}
 80009e6:	b002      	add	sp, #8
 80009e8:	bd10      	pop	{r4, pc}
	...

080009ec <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80009ec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmp_cr1 = 0;
  uint32_t tmp_cr2 = 0;
  
  /* Check ADC handle */
  if(hadc == NULL)
 80009ee:	4604      	mov	r4, r0
 80009f0:	b908      	cbnz	r0, 80009f6 <HAL_ADC_Init+0xa>
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
      
      tmp_hal_status = HAL_ERROR;
 80009f2:	2001      	movs	r0, #1
 80009f4:	e092      	b.n	8000b1c <HAL_ADC_Init+0x130>
  if (hadc->State == HAL_ADC_STATE_RESET)
 80009f6:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 80009f8:	b973      	cbnz	r3, 8000a18 <HAL_ADC_Init+0x2c>
    ADC_CLEAR_ERRORCODE(hadc);
 80009fa:	6503      	str	r3, [r0, #80]	; 0x50
    hadc->Lock = HAL_UNLOCKED;
 80009fc:	f880 3048 	strb.w	r3, [r0, #72]	; 0x48
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a00:	4b54      	ldr	r3, [pc, #336]	; (8000b54 <HAL_ADC_Init+0x168>)
 8000a02:	6a1a      	ldr	r2, [r3, #32]
 8000a04:	f042 0201 	orr.w	r2, r2, #1
 8000a08:	621a      	str	r2, [r3, #32]
 8000a0a:	6a1b      	ldr	r3, [r3, #32]
 8000a0c:	f003 0301 	and.w	r3, r3, #1
 8000a10:	9301      	str	r3, [sp, #4]
 8000a12:	9b01      	ldr	r3, [sp, #4]
    HAL_ADC_MspInit(hadc);
 8000a14:	f001 fcac 	bl	8002370 <HAL_ADC_MspInit>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000a18:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8000a1a:	06db      	lsls	r3, r3, #27
 8000a1c:	d4e9      	bmi.n	80009f2 <HAL_ADC_Init+0x6>
    ADC_STATE_CLR_SET(hadc->State,
 8000a1e:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    MODIFY_REG(ADC->CCR                 ,
 8000a20:	4a4d      	ldr	r2, [pc, #308]	; (8000b58 <HAL_ADC_Init+0x16c>)
    ADC_STATE_CLR_SET(hadc->State,
 8000a22:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000a26:	f023 0302 	bic.w	r3, r3, #2
 8000a2a:	f043 0302 	orr.w	r3, r3, #2
 8000a2e:	64e3      	str	r3, [r4, #76]	; 0x4c
    MODIFY_REG(ADC->CCR                 ,
 8000a30:	6853      	ldr	r3, [r2, #4]
 8000a32:	6861      	ldr	r1, [r4, #4]
 8000a34:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8000a38:	430b      	orrs	r3, r1
 8000a3a:	6053      	str	r3, [r2, #4]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000a3c:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000a40:	fa90 f0a0 	rbit	r0, r0
 8000a44:	2302      	movs	r3, #2
                ADC_CR2_DMACONTREQ(hadc->Init.DMAContinuousRequests) |
 8000a46:	fab0 f080 	clz	r0, r0
                ADC_CR2_CONTINUOUS(hadc->Init.ContinuousConvMode)     );
 8000a4a:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8000a4c:	fa93 f3a3 	rbit	r3, r3
 8000a50:	fab3 f383 	clz	r3, r3
                ADC_CR2_DMACONTREQ(hadc->Init.DMAContinuousRequests) |
 8000a54:	6965      	ldr	r5, [r4, #20]
 8000a56:	68e2      	ldr	r2, [r4, #12]
                ADC_CR2_CONTINUOUS(hadc->Init.ContinuousConvMode)     );
 8000a58:	fa01 f303 	lsl.w	r3, r1, r3
                ADC_CR2_DMACONTREQ(hadc->Init.DMAContinuousRequests) |
 8000a5c:	432a      	orrs	r2, r5
 8000a5e:	6a25      	ldr	r5, [r4, #32]
 8000a60:	432a      	orrs	r2, r5
 8000a62:	6be5      	ldr	r5, [r4, #60]	; 0x3c
 8000a64:	fa05 f000 	lsl.w	r0, r5, r0
 8000a68:	4302      	orrs	r2, r0
                hadc->Init.ChannelsBank                              |
 8000a6a:	4313      	orrs	r3, r2
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000a6c:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8000a6e:	6925      	ldr	r5, [r4, #16]
 8000a70:	2a10      	cmp	r2, #16
      tmp_cr2 |= ( hadc->Init.ExternalTrigConv    |
 8000a72:	bf1c      	itt	ne
 8000a74:	6ba0      	ldrne	r0, [r4, #56]	; 0x38
 8000a76:	4302      	orrne	r2, r0
    if ((ADC_IS_ENABLE(hadc) == RESET))
 8000a78:	6820      	ldr	r0, [r4, #0]
      tmp_cr2 |= ( hadc->Init.ExternalTrigConv    |
 8000a7a:	bf18      	it	ne
 8000a7c:	4313      	orrne	r3, r2
    if ((ADC_IS_ENABLE(hadc) == RESET))
 8000a7e:	6802      	ldr	r2, [r0, #0]
 8000a80:	f012 0240 	ands.w	r2, r2, #64	; 0x40
 8000a84:	d123      	bne.n	8000ace <HAL_ADC_Init+0xe2>
      tmp_cr2 |= hadc->Init.LowPowerAutoWait;
 8000a86:	69a6      	ldr	r6, [r4, #24]
      tmp_cr1 |= (hadc->Init.Resolution                     |
 8000a88:	69e7      	ldr	r7, [r4, #28]
      tmp_cr2 |= hadc->Init.LowPowerAutoWait;
 8000a8a:	4333      	orrs	r3, r6
      tmp_cr1 |= (hadc->Init.Resolution                     |
 8000a8c:	68a6      	ldr	r6, [r4, #8]
                  ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode)  );
 8000a8e:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
      tmp_cr1 |= (hadc->Init.Resolution                     |
 8000a92:	ea46 0607 	orr.w	r6, r6, r7
                  ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode)  );
 8000a96:	d043      	beq.n	8000b20 <HAL_ADC_Init+0x134>
 8000a98:	2d01      	cmp	r5, #1
 8000a9a:	bf08      	it	eq
 8000a9c:	f44f 7280 	moveq.w	r2, #256	; 0x100
                  hadc->Init.LowPowerAutoPowerOff           |
 8000aa0:	4332      	orrs	r2, r6
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000aa2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8000aa4:	2e01      	cmp	r6, #1
 8000aa6:	d10d      	bne.n	8000ac4 <HAL_ADC_Init+0xd8>
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8000aa8:	2900      	cmp	r1, #0
 8000aaa:	d13b      	bne.n	8000b24 <HAL_ADC_Init+0x138>
 8000aac:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 8000ab0:	fa91 f1a1 	rbit	r1, r1
          SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000ab4:	fab1 f681 	clz	r6, r1
 8000ab8:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8000aba:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8000abe:	3901      	subs	r1, #1
 8000ac0:	40b1      	lsls	r1, r6
 8000ac2:	430a      	orrs	r2, r1
        MODIFY_REG(hadc->Instance->CR1,
 8000ac4:	6846      	ldr	r6, [r0, #4]
 8000ac6:	4925      	ldr	r1, [pc, #148]	; (8000b5c <HAL_ADC_Init+0x170>)
 8000ac8:	4031      	ands	r1, r6
 8000aca:	430a      	orrs	r2, r1
 8000acc:	6042      	str	r2, [r0, #4]
    MODIFY_REG(hadc->Instance->CR2    ,
 8000ace:	6881      	ldr	r1, [r0, #8]
 8000ad0:	4a23      	ldr	r2, [pc, #140]	; (8000b60 <HAL_ADC_Init+0x174>)
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000ad2:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
    MODIFY_REG(hadc->Instance->CR2    ,
 8000ad6:	ea02 0201 	and.w	r2, r2, r1
 8000ada:	ea42 0203 	orr.w	r2, r2, r3
 8000ade:	6082      	str	r2, [r0, #8]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000ae0:	d001      	beq.n	8000ae6 <HAL_ADC_Init+0xfa>
 8000ae2:	2d01      	cmp	r5, #1
 8000ae4:	d127      	bne.n	8000b36 <HAL_ADC_Init+0x14a>
      MODIFY_REG(hadc->Instance->SQR1                         ,
 8000ae6:	6b05      	ldr	r5, [r0, #48]	; 0x30
 8000ae8:	f04f 72f8 	mov.w	r2, #32505856	; 0x1f00000
 8000aec:	fa92 f2a2 	rbit	r2, r2
 8000af0:	fab2 f182 	clz	r1, r2
 8000af4:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8000af6:	3a01      	subs	r2, #1
 8000af8:	408a      	lsls	r2, r1
 8000afa:	f025 71f8 	bic.w	r1, r5, #32505856	; 0x1f00000
 8000afe:	430a      	orrs	r2, r1
      MODIFY_REG(hadc->Instance->SQR1,
 8000b00:	6302      	str	r2, [r0, #48]	; 0x30
    if ((READ_REG(hadc->Instance->CR2) & ~(ADC_CR2_ADON |
 8000b02:	6881      	ldr	r1, [r0, #8]
 8000b04:	4a17      	ldr	r2, [pc, #92]	; (8000b64 <HAL_ADC_Init+0x178>)
 8000b06:	400a      	ands	r2, r1
 8000b08:	4293      	cmp	r3, r2
 8000b0a:	d118      	bne.n	8000b3e <HAL_ADC_Init+0x152>
      ADC_CLEAR_ERRORCODE(hadc);
 8000b0c:	2000      	movs	r0, #0
 8000b0e:	6520      	str	r0, [r4, #80]	; 0x50
      ADC_STATE_CLR_SET(hadc->State,
 8000b10:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8000b12:	f023 0303 	bic.w	r3, r3, #3
 8000b16:	f043 0301 	orr.w	r3, r3, #1
 8000b1a:	64e3      	str	r3, [r4, #76]	; 0x4c
    tmp_hal_status = HAL_ERROR;
  }
  
  /* Return function status */
  return tmp_hal_status;
}
 8000b1c:	b003      	add	sp, #12
 8000b1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
                  ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode)  );
 8000b20:	462a      	mov	r2, r5
 8000b22:	e7bd      	b.n	8000aa0 <HAL_ADC_Init+0xb4>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000b24:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8000b26:	f041 0120 	orr.w	r1, r1, #32
 8000b2a:	64e1      	str	r1, [r4, #76]	; 0x4c
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000b2c:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8000b2e:	f041 0101 	orr.w	r1, r1, #1
 8000b32:	6521      	str	r1, [r4, #80]	; 0x50
 8000b34:	e7c6      	b.n	8000ac4 <HAL_ADC_Init+0xd8>
      MODIFY_REG(hadc->Instance->SQR1,
 8000b36:	6b02      	ldr	r2, [r0, #48]	; 0x30
 8000b38:	f022 72f8 	bic.w	r2, r2, #32505856	; 0x1f00000
 8000b3c:	e7e0      	b.n	8000b00 <HAL_ADC_Init+0x114>
      ADC_STATE_CLR_SET(hadc->State,
 8000b3e:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8000b40:	f023 0312 	bic.w	r3, r3, #18
 8000b44:	f043 0310 	orr.w	r3, r3, #16
 8000b48:	64e3      	str	r3, [r4, #76]	; 0x4c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000b4a:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8000b4c:	f043 0301 	orr.w	r3, r3, #1
 8000b50:	6523      	str	r3, [r4, #80]	; 0x50
 8000b52:	e74e      	b.n	80009f2 <HAL_ADC_Init+0x6>
 8000b54:	40023800 	.word	0x40023800
 8000b58:	40012700 	.word	0x40012700
 8000b5c:	fcfc16ff 	.word	0xfcfc16ff
 8000b60:	c0fff189 	.word	0xc0fff189
 8000b64:	bf80fffe 	.word	0xbf80fffe

08000b68 <HAL_ADC_PollForConversion>:
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and and polling for end of each conversion. */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8000b68:	6803      	ldr	r3, [r0, #0]
{
 8000b6a:	b570      	push	{r4, r5, r6, lr}
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8000b6c:	689a      	ldr	r2, [r3, #8]
{
 8000b6e:	4604      	mov	r4, r0
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8000b70:	0556      	lsls	r6, r2, #21
{
 8000b72:	460d      	mov	r5, r1
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8000b74:	d50b      	bpl.n	8000b8e <HAL_ADC_PollForConversion+0x26>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8000b76:	689b      	ldr	r3, [r3, #8]
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8000b78:	05d8      	lsls	r0, r3, #23
 8000b7a:	d508      	bpl.n	8000b8e <HAL_ADC_PollForConversion+0x26>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000b7c:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
    
    return HAL_ERROR;
 8000b7e:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000b80:	f043 0320 	orr.w	r3, r3, #32
 8000b84:	64e3      	str	r3, [r4, #76]	; 0x4c
    __HAL_UNLOCK(hadc);
 8000b86:	2300      	movs	r3, #0
 8000b88:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
    return HAL_ERROR;
 8000b8c:	bd70      	pop	{r4, r5, r6, pc}
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8000b8e:	f7ff ff19 	bl	80009c4 <HAL_GetTick>
 8000b92:	4606      	mov	r6, r0
  
  /* Wait until End of Conversion flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8000b94:	6823      	ldr	r3, [r4, #0]
 8000b96:	681a      	ldr	r2, [r3, #0]
 8000b98:	0792      	lsls	r2, r2, #30
 8000b9a:	d50e      	bpl.n	8000bba <HAL_ADC_PollForConversion+0x52>
  }
  
  /* Clear end of conversion flag of regular group if low power feature     */
  /* "Auto Wait" is disabled, to not interfere with this feature until data */
  /* register is read using function HAL_ADC_GetValue().                    */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8000b9c:	69a2      	ldr	r2, [r4, #24]
 8000b9e:	b912      	cbnz	r2, 8000ba6 <HAL_ADC_PollForConversion+0x3e>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8000ba0:	f06f 0212 	mvn.w	r2, #18
 8000ba4:	601a      	str	r2, [r3, #0]
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8000ba6:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8000ba8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000bac:	64e2      	str	r2, [r4, #76]	; 0x4c
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32L1, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8000bae:	689a      	ldr	r2, [r3, #8]
 8000bb0:	f012 5f40 	tst.w	r2, #805306368	; 0x30000000
 8000bb4:	d013      	beq.n	8000bde <HAL_ADC_PollForConversion+0x76>
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8000bb6:	2000      	movs	r0, #0
 8000bb8:	bd70      	pop	{r4, r5, r6, pc}
    if(Timeout != HAL_MAX_DELAY)
 8000bba:	1c69      	adds	r1, r5, #1
 8000bbc:	d0eb      	beq.n	8000b96 <HAL_ADC_PollForConversion+0x2e>
      if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 8000bbe:	b945      	cbnz	r5, 8000bd2 <HAL_ADC_PollForConversion+0x6a>
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8000bc0:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
        return HAL_TIMEOUT;
 8000bc2:	2003      	movs	r0, #3
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8000bc4:	f043 0304 	orr.w	r3, r3, #4
 8000bc8:	64e3      	str	r3, [r4, #76]	; 0x4c
        __HAL_UNLOCK(hadc);
 8000bca:	2300      	movs	r3, #0
 8000bcc:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
        return HAL_TIMEOUT;
 8000bd0:	bd70      	pop	{r4, r5, r6, pc}
      if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 8000bd2:	f7ff fef7 	bl	80009c4 <HAL_GetTick>
 8000bd6:	1b80      	subs	r0, r0, r6
 8000bd8:	4285      	cmp	r5, r0
 8000bda:	d2db      	bcs.n	8000b94 <HAL_ADC_PollForConversion+0x2c>
 8000bdc:	e7f0      	b.n	8000bc0 <HAL_ADC_PollForConversion+0x58>
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8000bde:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000be0:	2a00      	cmp	r2, #0
 8000be2:	d1e8      	bne.n	8000bb6 <HAL_ADC_PollForConversion+0x4e>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8000be4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8000be6:	f012 7ff8 	tst.w	r2, #32505856	; 0x1f00000
 8000bea:	d002      	beq.n	8000bf2 <HAL_ADC_PollForConversion+0x8a>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8000bec:	689b      	ldr	r3, [r3, #8]
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8000bee:	055b      	lsls	r3, r3, #21
 8000bf0:	d4e1      	bmi.n	8000bb6 <HAL_ADC_PollForConversion+0x4e>
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8000bf2:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8000bf4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000bf8:	64e3      	str	r3, [r4, #76]	; 0x4c
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000bfa:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8000bfc:	f410 5080 	ands.w	r0, r0, #4096	; 0x1000
 8000c00:	d1d9      	bne.n	8000bb6 <HAL_ADC_PollForConversion+0x4e>
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000c02:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8000c04:	f043 0301 	orr.w	r3, r3, #1
 8000c08:	64e3      	str	r3, [r4, #76]	; 0x4c
}
 8000c0a:	bd70      	pop	{r4, r5, r6, pc}

08000c0c <HAL_ADC_GetValue>:

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8000c0c:	6803      	ldr	r3, [r0, #0]
 8000c0e:	6d98      	ldr	r0, [r3, #88]	; 0x58
}
 8000c10:	4770      	bx	lr
	...

08000c14 <HAL_ADC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  __IO uint32_t wait_loop_index = 0;
 8000c14:	2300      	movs	r3, #0
{
 8000c16:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __IO uint32_t wait_loop_index = 0;
 8000c18:	9301      	str	r3, [sp, #4]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000c1a:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
 8000c1e:	2b01      	cmp	r3, #1
 8000c20:	f000 80a6 	beq.w	8000d70 <HAL_ADC_ConfigChannel+0x15c>
 8000c24:	2301      	movs	r3, #1
  
   
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8000c26:	684d      	ldr	r5, [r1, #4]
  __HAL_LOCK(hadc);
 8000c28:	f880 3048 	strb.w	r3, [r0, #72]	; 0x48
  if (sConfig->Rank < 7)
 8000c2c:	2d06      	cmp	r5, #6
 8000c2e:	6802      	ldr	r2, [r0, #0]
 8000c30:	ea4f 0385 	mov.w	r3, r5, lsl #2
 8000c34:	680c      	ldr	r4, [r1, #0]
 8000c36:	d823      	bhi.n	8000c80 <HAL_ADC_ConfigChannel+0x6c>
  {
    MODIFY_REG(hadc->Instance->SQR5,
 8000c38:	442b      	add	r3, r5
 8000c3a:	251f      	movs	r5, #31
 8000c3c:	6c16      	ldr	r6, [r2, #64]	; 0x40
 8000c3e:	3b05      	subs	r3, #5
 8000c40:	409d      	lsls	r5, r3
 8000c42:	ea26 0505 	bic.w	r5, r6, r5
 8000c46:	fa04 f303 	lsl.w	r3, r4, r3
 8000c4a:	432b      	orrs	r3, r5
 8000c4c:	6413      	str	r3, [r2, #64]	; 0x40
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 0 to 9 */
  if (sConfig->Channel < ADC_CHANNEL_10)
 8000c4e:	2c09      	cmp	r4, #9
 8000c50:	ea4f 0344 	mov.w	r3, r4, lsl #1
 8000c54:	688e      	ldr	r6, [r1, #8]
 8000c56:	d849      	bhi.n	8000cec <HAL_ADC_ConfigChannel+0xd8>
  {
    MODIFY_REG(hadc->Instance->SMPR3,
 8000c58:	2107      	movs	r1, #7
 8000c5a:	6955      	ldr	r5, [r2, #20]
 8000c5c:	4423      	add	r3, r4
 8000c5e:	4099      	lsls	r1, r3
 8000c60:	ea25 0501 	bic.w	r5, r5, r1
 8000c64:	fa06 f303 	lsl.w	r3, r6, r3
 8000c68:	432b      	orrs	r3, r5
 8000c6a:	6153      	str	r3, [r2, #20]
    ADC_SMPR0_CHANNEL_SET(hadc, sConfig->SamplingTime, sConfig->Channel);
  }

  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000c6c:	f1a4 0310 	sub.w	r3, r4, #16
 8000c70:	2b01      	cmp	r3, #1
 8000c72:	d965      	bls.n	8000d40 <HAL_ADC_ConfigChannel+0x12c>
        }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000c74:	2300      	movs	r3, #0
 8000c76:	f880 3048 	strb.w	r3, [r0, #72]	; 0x48
  
  /* Return function status */
  return tmp_hal_status;
 8000c7a:	4618      	mov	r0, r3
}
 8000c7c:	b002      	add	sp, #8
 8000c7e:	bd70      	pop	{r4, r5, r6, pc}
  else if (sConfig->Rank < 13)
 8000c80:	2d0c      	cmp	r5, #12
 8000c82:	d80b      	bhi.n	8000c9c <HAL_ADC_ConfigChannel+0x88>
    MODIFY_REG(hadc->Instance->SQR4,
 8000c84:	442b      	add	r3, r5
 8000c86:	251f      	movs	r5, #31
 8000c88:	6bd6      	ldr	r6, [r2, #60]	; 0x3c
 8000c8a:	3b23      	subs	r3, #35	; 0x23
 8000c8c:	409d      	lsls	r5, r3
 8000c8e:	ea26 0505 	bic.w	r5, r6, r5
 8000c92:	fa04 f303 	lsl.w	r3, r4, r3
 8000c96:	432b      	orrs	r3, r5
 8000c98:	63d3      	str	r3, [r2, #60]	; 0x3c
 8000c9a:	e7d8      	b.n	8000c4e <HAL_ADC_ConfigChannel+0x3a>
  else if (sConfig->Rank < 19)
 8000c9c:	2d12      	cmp	r5, #18
 8000c9e:	d80b      	bhi.n	8000cb8 <HAL_ADC_ConfigChannel+0xa4>
    MODIFY_REG(hadc->Instance->SQR3,
 8000ca0:	442b      	add	r3, r5
 8000ca2:	251f      	movs	r5, #31
 8000ca4:	6b96      	ldr	r6, [r2, #56]	; 0x38
 8000ca6:	3b41      	subs	r3, #65	; 0x41
 8000ca8:	409d      	lsls	r5, r3
 8000caa:	ea26 0505 	bic.w	r5, r6, r5
 8000cae:	fa04 f303 	lsl.w	r3, r4, r3
 8000cb2:	432b      	orrs	r3, r5
 8000cb4:	6393      	str	r3, [r2, #56]	; 0x38
 8000cb6:	e7ca      	b.n	8000c4e <HAL_ADC_ConfigChannel+0x3a>
  else if (sConfig->Rank < 25)
 8000cb8:	2d18      	cmp	r5, #24
 8000cba:	d80b      	bhi.n	8000cd4 <HAL_ADC_ConfigChannel+0xc0>
    MODIFY_REG(hadc->Instance->SQR2,
 8000cbc:	442b      	add	r3, r5
 8000cbe:	251f      	movs	r5, #31
 8000cc0:	6b56      	ldr	r6, [r2, #52]	; 0x34
 8000cc2:	3b5f      	subs	r3, #95	; 0x5f
 8000cc4:	409d      	lsls	r5, r3
 8000cc6:	ea26 0505 	bic.w	r5, r6, r5
 8000cca:	fa04 f303 	lsl.w	r3, r4, r3
 8000cce:	432b      	orrs	r3, r5
 8000cd0:	6353      	str	r3, [r2, #52]	; 0x34
 8000cd2:	e7bc      	b.n	8000c4e <HAL_ADC_ConfigChannel+0x3a>
    MODIFY_REG(hadc->Instance->SQR1,
 8000cd4:	442b      	add	r3, r5
 8000cd6:	251f      	movs	r5, #31
 8000cd8:	6b16      	ldr	r6, [r2, #48]	; 0x30
 8000cda:	3b7d      	subs	r3, #125	; 0x7d
 8000cdc:	409d      	lsls	r5, r3
 8000cde:	ea26 0505 	bic.w	r5, r6, r5
 8000ce2:	fa04 f303 	lsl.w	r3, r4, r3
 8000ce6:	432b      	orrs	r3, r5
 8000ce8:	6313      	str	r3, [r2, #48]	; 0x30
 8000cea:	e7b0      	b.n	8000c4e <HAL_ADC_ConfigChannel+0x3a>
  else if (sConfig->Channel < ADC_CHANNEL_20)
 8000cec:	2c13      	cmp	r4, #19
 8000cee:	d80c      	bhi.n	8000d0a <HAL_ADC_ConfigChannel+0xf6>
    MODIFY_REG(hadc->Instance->SMPR2,
 8000cf0:	4423      	add	r3, r4
 8000cf2:	f1a3 051e 	sub.w	r5, r3, #30
 8000cf6:	2307      	movs	r3, #7
 8000cf8:	6911      	ldr	r1, [r2, #16]
 8000cfa:	40ab      	lsls	r3, r5
 8000cfc:	ea21 0103 	bic.w	r1, r1, r3
 8000d00:	fa06 f505 	lsl.w	r5, r6, r5
 8000d04:	430d      	orrs	r5, r1
 8000d06:	6115      	str	r5, [r2, #16]
 8000d08:	e7b0      	b.n	8000c6c <HAL_ADC_ConfigChannel+0x58>
  else if (sConfig->Channel <= ADC_SMPR1_CHANNEL_MAX)
 8000d0a:	2c1d      	cmp	r4, #29
 8000d0c:	d80c      	bhi.n	8000d28 <HAL_ADC_ConfigChannel+0x114>
    MODIFY_REG(hadc->Instance->SMPR1,
 8000d0e:	4423      	add	r3, r4
 8000d10:	f1a3 013c 	sub.w	r1, r3, #60	; 0x3c
 8000d14:	2307      	movs	r3, #7
 8000d16:	68d5      	ldr	r5, [r2, #12]
 8000d18:	408b      	lsls	r3, r1
 8000d1a:	ea25 0303 	bic.w	r3, r5, r3
 8000d1e:	fa06 f101 	lsl.w	r1, r6, r1
 8000d22:	4319      	orrs	r1, r3
 8000d24:	60d1      	str	r1, [r2, #12]
 8000d26:	e7a1      	b.n	8000c6c <HAL_ADC_ConfigChannel+0x58>
    ADC_SMPR0_CHANNEL_SET(hadc, sConfig->SamplingTime, sConfig->Channel);
 8000d28:	2507      	movs	r5, #7
 8000d2a:	4423      	add	r3, r4
 8000d2c:	6dd1      	ldr	r1, [r2, #92]	; 0x5c
 8000d2e:	3b5a      	subs	r3, #90	; 0x5a
 8000d30:	409d      	lsls	r5, r3
 8000d32:	ea21 0105 	bic.w	r1, r1, r5
 8000d36:	fa06 f303 	lsl.w	r3, r6, r3
 8000d3a:	430b      	orrs	r3, r1
 8000d3c:	65d3      	str	r3, [r2, #92]	; 0x5c
 8000d3e:	e795      	b.n	8000c6c <HAL_ADC_ConfigChannel+0x58>
      if (READ_BIT(ADC->CCR, ADC_CCR_TSVREFE) == RESET)
 8000d40:	4b0c      	ldr	r3, [pc, #48]	; (8000d74 <HAL_ADC_ConfigChannel+0x160>)
 8000d42:	685a      	ldr	r2, [r3, #4]
 8000d44:	0212      	lsls	r2, r2, #8
 8000d46:	d495      	bmi.n	8000c74 <HAL_ADC_ConfigChannel+0x60>
        SET_BIT(ADC->CCR, ADC_CCR_TSVREFE);
 8000d48:	685a      	ldr	r2, [r3, #4]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8000d4a:	2c10      	cmp	r4, #16
        SET_BIT(ADC->CCR, ADC_CCR_TSVREFE);
 8000d4c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8000d50:	605a      	str	r2, [r3, #4]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8000d52:	d18f      	bne.n	8000c74 <HAL_ADC_ConfigChannel+0x60>
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8000d54:	4b08      	ldr	r3, [pc, #32]	; (8000d78 <HAL_ADC_ConfigChannel+0x164>)
 8000d56:	4a09      	ldr	r2, [pc, #36]	; (8000d7c <HAL_ADC_ConfigChannel+0x168>)
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	fbb3 f2f2 	udiv	r2, r3, r2
 8000d5e:	230a      	movs	r3, #10
 8000d60:	4353      	muls	r3, r2
            wait_loop_index--;
 8000d62:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0)
 8000d64:	9b01      	ldr	r3, [sp, #4]
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d084      	beq.n	8000c74 <HAL_ADC_ConfigChannel+0x60>
            wait_loop_index--;
 8000d6a:	9b01      	ldr	r3, [sp, #4]
 8000d6c:	3b01      	subs	r3, #1
 8000d6e:	e7f8      	b.n	8000d62 <HAL_ADC_ConfigChannel+0x14e>
  __HAL_LOCK(hadc);
 8000d70:	2002      	movs	r0, #2
 8000d72:	e783      	b.n	8000c7c <HAL_ADC_ConfigChannel+0x68>
 8000d74:	40012700 	.word	0x40012700
 8000d78:	20000000 	.word	0x20000000
 8000d7c:	000f4240 	.word	0x000f4240

08000d80 <ADC_Enable>:
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
  uint32_t tickstart = 0;
  __IO uint32_t wait_loop_index = 0;
 8000d80:	2300      	movs	r3, #0
{
 8000d82:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __IO uint32_t wait_loop_index = 0;
 8000d84:	9301      	str	r3, [sp, #4]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000d86:	6803      	ldr	r3, [r0, #0]
{
 8000d88:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000d8a:	681a      	ldr	r2, [r3, #0]
 8000d8c:	0652      	lsls	r2, r2, #25
 8000d8e:	d502      	bpl.n	8000d96 <ADC_Enable+0x16>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8000d90:	2000      	movs	r0, #0
}
 8000d92:	b002      	add	sp, #8
 8000d94:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_ADC_ENABLE(hadc);
 8000d96:	689a      	ldr	r2, [r3, #8]
 8000d98:	f042 0201 	orr.w	r2, r2, #1
 8000d9c:	609a      	str	r2, [r3, #8]
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8000d9e:	4b13      	ldr	r3, [pc, #76]	; (8000dec <ADC_Enable+0x6c>)
 8000da0:	4a13      	ldr	r2, [pc, #76]	; (8000df0 <ADC_Enable+0x70>)
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	fbb3 f3f2 	udiv	r3, r3, r2
 8000da8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
      wait_loop_index--;
 8000dac:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0)
 8000dae:	9b01      	ldr	r3, [sp, #4]
 8000db0:	b9c3      	cbnz	r3, 8000de4 <ADC_Enable+0x64>
    tickstart = HAL_GetTick();    
 8000db2:	f7ff fe07 	bl	80009c4 <HAL_GetTick>
 8000db6:	4606      	mov	r6, r0
    while(ADC_IS_ENABLE(hadc) == RESET)
 8000db8:	6823      	ldr	r3, [r4, #0]
 8000dba:	681d      	ldr	r5, [r3, #0]
 8000dbc:	f015 0540 	ands.w	r5, r5, #64	; 0x40
 8000dc0:	d1e6      	bne.n	8000d90 <ADC_Enable+0x10>
      if((HAL_GetTick() - tickstart ) > ADC_ENABLE_TIMEOUT)
 8000dc2:	f7ff fdff 	bl	80009c4 <HAL_GetTick>
 8000dc6:	1b80      	subs	r0, r0, r6
 8000dc8:	2802      	cmp	r0, #2
 8000dca:	d9f5      	bls.n	8000db8 <ADC_Enable+0x38>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000dcc:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
        __HAL_UNLOCK(hadc);
 8000dce:	f884 5048 	strb.w	r5, [r4, #72]	; 0x48
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000dd2:	f043 0310 	orr.w	r3, r3, #16
 8000dd6:	64e3      	str	r3, [r4, #76]	; 0x4c
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000dd8:	6d23      	ldr	r3, [r4, #80]	; 0x50
        __HAL_UNLOCK(hadc);
 8000dda:	2001      	movs	r0, #1
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000ddc:	f043 0301 	orr.w	r3, r3, #1
 8000de0:	6523      	str	r3, [r4, #80]	; 0x50
 8000de2:	e7d6      	b.n	8000d92 <ADC_Enable+0x12>
      wait_loop_index--;
 8000de4:	9b01      	ldr	r3, [sp, #4]
 8000de6:	3b01      	subs	r3, #1
 8000de8:	e7e0      	b.n	8000dac <ADC_Enable+0x2c>
 8000dea:	bf00      	nop
 8000dec:	20000000 	.word	0x20000000
 8000df0:	000f4240 	.word	0x000f4240

08000df4 <HAL_ADC_Start>:
  __HAL_LOCK(hadc);
 8000df4:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
{
 8000df8:	b510      	push	{r4, lr}
  __HAL_LOCK(hadc);
 8000dfa:	2b01      	cmp	r3, #1
{
 8000dfc:	4604      	mov	r4, r0
  __HAL_LOCK(hadc);
 8000dfe:	d02e      	beq.n	8000e5e <HAL_ADC_Start+0x6a>
 8000e00:	2301      	movs	r3, #1
 8000e02:	f880 3048 	strb.w	r3, [r0, #72]	; 0x48
  tmp_hal_status = ADC_Enable(hadc);
 8000e06:	f7ff ffbb 	bl	8000d80 <ADC_Enable>
  if (tmp_hal_status == HAL_OK)
 8000e0a:	bb48      	cbnz	r0, 8000e60 <HAL_ADC_Start+0x6c>
    ADC_STATE_CLR_SET(hadc->State,
 8000e0c:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8000e0e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000e12:	f023 0301 	bic.w	r3, r3, #1
 8000e16:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e1a:	64e3      	str	r3, [r4, #76]	; 0x4c
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000e1c:	6823      	ldr	r3, [r4, #0]
 8000e1e:	685a      	ldr	r2, [r3, #4]
 8000e20:	0552      	lsls	r2, r2, #21
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000e22:	bf41      	itttt	mi
 8000e24:	6ce2      	ldrmi	r2, [r4, #76]	; 0x4c
 8000e26:	f422 5240 	bicmi.w	r2, r2, #12288	; 0x3000
 8000e2a:	f442 5280 	orrmi.w	r2, r2, #4096	; 0x1000
 8000e2e:	64e2      	strmi	r2, [r4, #76]	; 0x4c
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000e30:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8000e32:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000e36:	bf1c      	itt	ne
 8000e38:	6d22      	ldrne	r2, [r4, #80]	; 0x50
 8000e3a:	f022 0206 	bicne.w	r2, r2, #6
      ADC_CLEAR_ERRORCODE(hadc);
 8000e3e:	6522      	str	r2, [r4, #80]	; 0x50
    __HAL_UNLOCK(hadc);
 8000e40:	2200      	movs	r2, #0
 8000e42:	f884 2048 	strb.w	r2, [r4, #72]	; 0x48
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8000e46:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8000e4a:	601a      	str	r2, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8000e4c:	689a      	ldr	r2, [r3, #8]
 8000e4e:	f012 5f40 	tst.w	r2, #805306368	; 0x30000000
 8000e52:	d105      	bne.n	8000e60 <HAL_ADC_Start+0x6c>
      SET_BIT(hadc->Instance->CR2, ADC_CR2_SWSTART);
 8000e54:	689a      	ldr	r2, [r3, #8]
 8000e56:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8000e5a:	609a      	str	r2, [r3, #8]
 8000e5c:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hadc);
 8000e5e:	2002      	movs	r0, #2
}
 8000e60:	bd10      	pop	{r4, pc}

08000e62 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8000e62:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart = 0;
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8000e64:	6803      	ldr	r3, [r0, #0]
{
 8000e66:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) != RESET)
 8000e68:	681a      	ldr	r2, [r3, #0]
 8000e6a:	0652      	lsls	r2, r2, #25
 8000e6c:	d401      	bmi.n	8000e72 <ADC_ConversionStop_Disable+0x10>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8000e6e:	2000      	movs	r0, #0
 8000e70:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_ADC_DISABLE(hadc);
 8000e72:	689a      	ldr	r2, [r3, #8]
 8000e74:	f022 0201 	bic.w	r2, r2, #1
 8000e78:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 8000e7a:	f7ff fda3 	bl	80009c4 <HAL_GetTick>
 8000e7e:	4605      	mov	r5, r0
    while(ADC_IS_ENABLE(hadc) != RESET)
 8000e80:	6823      	ldr	r3, [r4, #0]
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	065b      	lsls	r3, r3, #25
 8000e86:	d5f2      	bpl.n	8000e6e <ADC_ConversionStop_Disable+0xc>
      if((HAL_GetTick() - tickstart ) > ADC_DISABLE_TIMEOUT)
 8000e88:	f7ff fd9c 	bl	80009c4 <HAL_GetTick>
 8000e8c:	1b40      	subs	r0, r0, r5
 8000e8e:	2802      	cmp	r0, #2
 8000e90:	d9f6      	bls.n	8000e80 <ADC_ConversionStop_Disable+0x1e>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000e92:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000e94:	2001      	movs	r0, #1
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000e96:	f043 0310 	orr.w	r3, r3, #16
 8000e9a:	64e3      	str	r3, [r4, #76]	; 0x4c
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000e9c:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8000e9e:	f043 0301 	orr.w	r3, r3, #1
 8000ea2:	6523      	str	r3, [r4, #80]	; 0x50
 8000ea4:	bd38      	pop	{r3, r4, r5, pc}

08000ea6 <HAL_ADC_Stop>:
  __HAL_LOCK(hadc);
 8000ea6:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
{
 8000eaa:	b510      	push	{r4, lr}
  __HAL_LOCK(hadc);
 8000eac:	2b01      	cmp	r3, #1
{
 8000eae:	4604      	mov	r4, r0
  __HAL_LOCK(hadc);
 8000eb0:	d011      	beq.n	8000ed6 <HAL_ADC_Stop+0x30>
 8000eb2:	2301      	movs	r3, #1
 8000eb4:	f880 3048 	strb.w	r3, [r0, #72]	; 0x48
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000eb8:	f7ff ffd3 	bl	8000e62 <ADC_ConversionStop_Disable>
  if (tmp_hal_status == HAL_OK)
 8000ebc:	b938      	cbnz	r0, 8000ece <HAL_ADC_Stop+0x28>
    ADC_STATE_CLR_SET(hadc->State,
 8000ebe:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8000ec0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000ec4:	f023 0301 	bic.w	r3, r3, #1
 8000ec8:	f043 0301 	orr.w	r3, r3, #1
 8000ecc:	64e3      	str	r3, [r4, #76]	; 0x4c
  __HAL_UNLOCK(hadc);
 8000ece:	2300      	movs	r3, #0
 8000ed0:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  return tmp_hal_status;
 8000ed4:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hadc);
 8000ed6:	2002      	movs	r0, #2
}
 8000ed8:	bd10      	pop	{r4, pc}
	...

08000edc <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000edc:	4a07      	ldr	r2, [pc, #28]	; (8000efc <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000ede:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ee0:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000ee2:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ee6:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000eea:	041b      	lsls	r3, r3, #16
 8000eec:	0c1b      	lsrs	r3, r3, #16
 8000eee:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ef2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 8000ef6:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000ef8:	60d3      	str	r3, [r2, #12]
 8000efa:	4770      	bx	lr
 8000efc:	e000ed00 	.word	0xe000ed00

08000f00 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f00:	4b17      	ldr	r3, [pc, #92]	; (8000f60 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f02:	b530      	push	{r4, r5, lr}
 8000f04:	68dc      	ldr	r4, [r3, #12]
 8000f06:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f0a:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f0e:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f10:	2b04      	cmp	r3, #4
 8000f12:	bf28      	it	cs
 8000f14:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f16:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f18:	f04f 0501 	mov.w	r5, #1
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f1c:	bf98      	it	ls
 8000f1e:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f20:	fa05 f303 	lsl.w	r3, r5, r3
 8000f24:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f28:	bf88      	it	hi
 8000f2a:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f2c:	4019      	ands	r1, r3
 8000f2e:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f30:	fa05 f404 	lsl.w	r4, r5, r4
 8000f34:	3c01      	subs	r4, #1
 8000f36:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 8000f38:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f3a:	ea42 0201 	orr.w	r2, r2, r1
 8000f3e:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f42:	bfaf      	iteee	ge
 8000f44:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f48:	4b06      	ldrlt	r3, [pc, #24]	; (8000f64 <HAL_NVIC_SetPriority+0x64>)
 8000f4a:	f000 000f 	andlt.w	r0, r0, #15
 8000f4e:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f50:	bfa5      	ittet	ge
 8000f52:	b2d2      	uxtbge	r2, r2
 8000f54:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f58:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f5a:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8000f5e:	bd30      	pop	{r4, r5, pc}
 8000f60:	e000ed00 	.word	0xe000ed00
 8000f64:	e000ed14 	.word	0xe000ed14

08000f68 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f68:	3801      	subs	r0, #1
 8000f6a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000f6e:	d20a      	bcs.n	8000f86 <HAL_SYSTICK_Config+0x1e>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f70:	21f0      	movs	r1, #240	; 0xf0
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f72:	4b06      	ldr	r3, [pc, #24]	; (8000f8c <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f74:	4a06      	ldr	r2, [pc, #24]	; (8000f90 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f76:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f78:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f7c:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f7e:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f80:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f82:	601a      	str	r2, [r3, #0]
 8000f84:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000f86:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000f88:	4770      	bx	lr
 8000f8a:	bf00      	nop
 8000f8c:	e000e010 	.word	0xe000e010
 8000f90:	e000ed00 	.word	0xe000ed00

08000f94 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8000f94:	4b04      	ldr	r3, [pc, #16]	; (8000fa8 <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8000f96:	2804      	cmp	r0, #4
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000f98:	681a      	ldr	r2, [r3, #0]
 8000f9a:	bf0c      	ite	eq
 8000f9c:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8000fa0:	f022 0204 	bicne.w	r2, r2, #4
 8000fa4:	601a      	str	r2, [r3, #0]
 8000fa6:	4770      	bx	lr
 8000fa8:	e000e010 	.word	0xe000e010

08000fac <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8000fac:	4770      	bx	lr

08000fae <HAL_SYSTICK_IRQHandler>:
{
 8000fae:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 8000fb0:	f7ff fffc 	bl	8000fac <HAL_SYSTICK_Callback>
 8000fb4:	bd08      	pop	{r3, pc}
	...

08000fb8 <HAL_GPIO_Init>:
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
  uint32_t position = 0x00;
 8000fb8:	2300      	movs	r3, #0
{ 
 8000fba:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull)); 

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8000fbe:	f8d1 8000 	ldr.w	r8, [r1]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fc2:	f8df 9194 	ldr.w	r9, [pc, #404]	; 8001158 <HAL_GPIO_Init+0x1a0>
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
        SYSCFG->EXTICR[position >> 2] = temp;
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000fc6:	4a62      	ldr	r2, [pc, #392]	; (8001150 <HAL_GPIO_Init+0x198>)
  while (((GPIO_Init->Pin) >> position) != 0)
 8000fc8:	fa38 f403 	lsrs.w	r4, r8, r3
 8000fcc:	d102      	bne.n	8000fd4 <HAL_GPIO_Init+0x1c>
      }
    }
    
    position++;
  } 
}
 8000fce:	b003      	add	sp, #12
 8000fd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000fd4:	f04f 0e01 	mov.w	lr, #1
 8000fd8:	fa0e fe03 	lsl.w	lr, lr, r3
    if(iocurrent)
 8000fdc:	ea18 060e 	ands.w	r6, r8, lr
 8000fe0:	f000 80a8 	beq.w	8001134 <HAL_GPIO_Init+0x17c>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 8000fe4:	684c      	ldr	r4, [r1, #4]
 8000fe6:	f024 0710 	bic.w	r7, r4, #16
 8000fea:	2f02      	cmp	r7, #2
 8000fec:	d116      	bne.n	800101c <HAL_GPIO_Init+0x64>
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4)) ;      
 8000fee:	f04f 0c0f 	mov.w	ip, #15
        temp = GPIOx->AFR[position >> 3];
 8000ff2:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 8000ff6:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4)) ;      
 8000ffa:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3];
 8000ffe:	f8da 5020 	ldr.w	r5, [sl, #32]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4)) ;      
 8001002:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8001006:	fa0c fc0b 	lsl.w	ip, ip, fp
 800100a:	ea25 0c0c 	bic.w	ip, r5, ip
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));       
 800100e:	690d      	ldr	r5, [r1, #16]
 8001010:	fa05 f50b 	lsl.w	r5, r5, fp
 8001014:	ea45 050c 	orr.w	r5, r5, ip
        GPIOx->AFR[position >> 3] = temp;
 8001018:	f8ca 5020 	str.w	r5, [sl, #32]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));   
 800101c:	2503      	movs	r5, #3
 800101e:	ea4f 0a43 	mov.w	sl, r3, lsl #1
 8001022:	fa05 f50a 	lsl.w	r5, r5, sl
 8001026:	43ed      	mvns	r5, r5
      temp = GPIOx->MODER;
 8001028:	f8d0 b000 	ldr.w	fp, [r0]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800102c:	f004 0c03 	and.w	ip, r4, #3
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));   
 8001030:	ea0b 0b05 	and.w	fp, fp, r5
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001034:	fa0c fc0a 	lsl.w	ip, ip, sl
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001038:	3f01      	subs	r7, #1
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800103a:	ea4c 0c0b 	orr.w	ip, ip, fp
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800103e:	2f01      	cmp	r7, #1
      GPIOx->MODER = temp;
 8001040:	f8c0 c000 	str.w	ip, [r0]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001044:	d811      	bhi.n	800106a <HAL_GPIO_Init+0xb2>
        temp = GPIOx->OSPEEDR; 
 8001046:	6887      	ldr	r7, [r0, #8]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001048:	ea07 0b05 	and.w	fp, r7, r5
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 800104c:	68cf      	ldr	r7, [r1, #12]
 800104e:	fa07 fc0a 	lsl.w	ip, r7, sl
 8001052:	ea4c 070b 	orr.w	r7, ip, fp
        GPIOx->OSPEEDR = temp;
 8001056:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8001058:	6847      	ldr	r7, [r0, #4]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 800105a:	ea27 0e0e 	bic.w	lr, r7, lr
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 800105e:	f3c4 1700 	ubfx	r7, r4, #4, #1
 8001062:	409f      	lsls	r7, r3
 8001064:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 8001068:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 800106a:	68c7      	ldr	r7, [r0, #12]
      CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 800106c:	403d      	ands	r5, r7
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 800106e:	688f      	ldr	r7, [r1, #8]
 8001070:	fa07 f70a 	lsl.w	r7, r7, sl
 8001074:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 8001076:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8001078:	00e5      	lsls	r5, r4, #3
 800107a:	d55b      	bpl.n	8001134 <HAL_GPIO_Init+0x17c>
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 800107c:	f04f 0c0f 	mov.w	ip, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001080:	f8d9 5020 	ldr.w	r5, [r9, #32]
 8001084:	f023 0703 	bic.w	r7, r3, #3
 8001088:	f045 0501 	orr.w	r5, r5, #1
 800108c:	f8c9 5020 	str.w	r5, [r9, #32]
 8001090:	f8d9 5020 	ldr.w	r5, [r9, #32]
 8001094:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8001098:	f005 0501 	and.w	r5, r5, #1
 800109c:	9501      	str	r5, [sp, #4]
 800109e:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 80010a2:	f003 0e03 	and.w	lr, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010a6:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 80010a8:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
        temp = SYSCFG->EXTICR[position >> 2];
 80010ac:	f8d7 a008 	ldr.w	sl, [r7, #8]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 80010b0:	fa0c f50e 	lsl.w	r5, ip, lr
 80010b4:	ea2a 0c05 	bic.w	ip, sl, r5
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80010b8:	4d26      	ldr	r5, [pc, #152]	; (8001154 <HAL_GPIO_Init+0x19c>)
 80010ba:	42a8      	cmp	r0, r5
 80010bc:	d03c      	beq.n	8001138 <HAL_GPIO_Init+0x180>
 80010be:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80010c2:	42a8      	cmp	r0, r5
 80010c4:	d03a      	beq.n	800113c <HAL_GPIO_Init+0x184>
 80010c6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80010ca:	42a8      	cmp	r0, r5
 80010cc:	d038      	beq.n	8001140 <HAL_GPIO_Init+0x188>
 80010ce:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80010d2:	42a8      	cmp	r0, r5
 80010d4:	d036      	beq.n	8001144 <HAL_GPIO_Init+0x18c>
 80010d6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80010da:	42a8      	cmp	r0, r5
 80010dc:	d034      	beq.n	8001148 <HAL_GPIO_Init+0x190>
 80010de:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80010e2:	42a8      	cmp	r0, r5
 80010e4:	d032      	beq.n	800114c <HAL_GPIO_Init+0x194>
 80010e6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80010ea:	42a8      	cmp	r0, r5
 80010ec:	bf14      	ite	ne
 80010ee:	2507      	movne	r5, #7
 80010f0:	2506      	moveq	r5, #6
 80010f2:	fa05 f50e 	lsl.w	r5, r5, lr
 80010f6:	ea45 050c 	orr.w	r5, r5, ip
        SYSCFG->EXTICR[position >> 2] = temp;
 80010fa:	60bd      	str	r5, [r7, #8]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80010fc:	43f7      	mvns	r7, r6
        temp = EXTI->IMR;
 80010fe:	6815      	ldr	r5, [r2, #0]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001100:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8001104:	bf0c      	ite	eq
 8001106:	403d      	andeq	r5, r7
          SET_BIT(temp, iocurrent); 
 8001108:	4335      	orrne	r5, r6
        EXTI->IMR = temp;
 800110a:	6015      	str	r5, [r2, #0]
        temp = EXTI->EMR;
 800110c:	6855      	ldr	r5, [r2, #4]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800110e:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        CLEAR_BIT(temp, (uint32_t)iocurrent);      
 8001112:	bf0c      	ite	eq
 8001114:	403d      	andeq	r5, r7
          SET_BIT(temp, iocurrent); 
 8001116:	4335      	orrne	r5, r6
        EXTI->EMR = temp;
 8001118:	6055      	str	r5, [r2, #4]
        temp = EXTI->RTSR;
 800111a:	6895      	ldr	r5, [r2, #8]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800111c:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 8001120:	bf0c      	ite	eq
 8001122:	403d      	andeq	r5, r7
          SET_BIT(temp, iocurrent); 
 8001124:	4335      	orrne	r5, r6
        EXTI->RTSR = temp;
 8001126:	6095      	str	r5, [r2, #8]
        temp = EXTI->FTSR;
 8001128:	68d5      	ldr	r5, [r2, #12]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800112a:	02a4      	lsls	r4, r4, #10
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 800112c:	bf54      	ite	pl
 800112e:	403d      	andpl	r5, r7
          SET_BIT(temp, iocurrent); 
 8001130:	4335      	orrmi	r5, r6
        EXTI->FTSR = temp;
 8001132:	60d5      	str	r5, [r2, #12]
    position++;
 8001134:	3301      	adds	r3, #1
 8001136:	e747      	b.n	8000fc8 <HAL_GPIO_Init+0x10>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001138:	2500      	movs	r5, #0
 800113a:	e7da      	b.n	80010f2 <HAL_GPIO_Init+0x13a>
 800113c:	2501      	movs	r5, #1
 800113e:	e7d8      	b.n	80010f2 <HAL_GPIO_Init+0x13a>
 8001140:	2502      	movs	r5, #2
 8001142:	e7d6      	b.n	80010f2 <HAL_GPIO_Init+0x13a>
 8001144:	2503      	movs	r5, #3
 8001146:	e7d4      	b.n	80010f2 <HAL_GPIO_Init+0x13a>
 8001148:	2504      	movs	r5, #4
 800114a:	e7d2      	b.n	80010f2 <HAL_GPIO_Init+0x13a>
 800114c:	2505      	movs	r5, #5
 800114e:	e7d0      	b.n	80010f2 <HAL_GPIO_Init+0x13a>
 8001150:	40010400 	.word	0x40010400
 8001154:	40020000 	.word	0x40020000
 8001158:	40023800 	.word	0x40023800

0800115c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800115c:	b10a      	cbz	r2, 8001162 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 800115e:	6181      	str	r1, [r0, #24]
 8001160:	4770      	bx	lr
 8001162:	0409      	lsls	r1, r1, #16
 8001164:	e7fb      	b.n	800115e <HAL_GPIO_WritePin+0x2>
	...

08001168 <RCC_SetFlashLatencyFromMSIRange>:
{
  uint32_t vos = 0U;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8001168:	4b1c      	ldr	r3, [pc, #112]	; (80011dc <RCC_SetFlashLatencyFromMSIRange+0x74>)
{
 800116a:	b082      	sub	sp, #8
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 800116c:	689a      	ldr	r2, [r3, #8]
 800116e:	f012 0ff0 	tst.w	r2, #240	; 0xf0
 8001172:	d00c      	beq.n	800118e <RCC_SetFlashLatencyFromMSIRange+0x26>
{
 8001174:	2200      	movs	r2, #0
    {
      latency = FLASH_LATENCY_1; /* 1WS */
    }
  }
  
  __HAL_FLASH_SET_LATENCY(latency);
 8001176:	491a      	ldr	r1, [pc, #104]	; (80011e0 <RCC_SetFlashLatencyFromMSIRange+0x78>)
 8001178:	680b      	ldr	r3, [r1, #0]
 800117a:	f023 0301 	bic.w	r3, r3, #1
 800117e:	4313      	orrs	r3, r2
 8001180:	600b      	str	r3, [r1, #0]
  
  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 8001182:	6808      	ldr	r0, [r1, #0]
 8001184:	f000 0001 	and.w	r0, r0, #1
 8001188:	4050      	eors	r0, r2
  {
    return HAL_ERROR;
  }
  
  return HAL_OK;
}
 800118a:	b002      	add	sp, #8
 800118c:	4770      	bx	lr
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800118e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001190:	4914      	ldr	r1, [pc, #80]	; (80011e4 <RCC_SetFlashLatencyFromMSIRange+0x7c>)
 8001192:	f012 5f80 	tst.w	r2, #268435456	; 0x10000000
 8001196:	d00f      	beq.n	80011b8 <RCC_SetFlashLatencyFromMSIRange+0x50>
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8001198:	680a      	ldr	r2, [r1, #0]
 800119a:	f402 52c0 	and.w	r2, r2, #6144	; 0x1800
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 800119e:	f5b2 5fc0 	cmp.w	r2, #6144	; 0x1800
 80011a2:	d1e7      	bne.n	8001174 <RCC_SetFlashLatencyFromMSIRange+0xc>
 80011a4:	f5b0 4f40 	cmp.w	r0, #49152	; 0xc000
 80011a8:	d1e4      	bne.n	8001174 <RCC_SetFlashLatencyFromMSIRange+0xc>
  __HAL_FLASH_SET_LATENCY(latency);
 80011aa:	4a0d      	ldr	r2, [pc, #52]	; (80011e0 <RCC_SetFlashLatencyFromMSIRange+0x78>)
 80011ac:	6813      	ldr	r3, [r2, #0]
 80011ae:	f043 0304 	orr.w	r3, r3, #4
 80011b2:	6013      	str	r3, [r2, #0]
      latency = FLASH_LATENCY_1; /* 1WS */
 80011b4:	2201      	movs	r2, #1
 80011b6:	e7de      	b.n	8001176 <RCC_SetFlashLatencyFromMSIRange+0xe>
      __HAL_RCC_PWR_CLK_ENABLE();
 80011b8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80011ba:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80011be:	625a      	str	r2, [r3, #36]	; 0x24
 80011c0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80011c2:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 80011c6:	9201      	str	r2, [sp, #4]
 80011c8:	9a01      	ldr	r2, [sp, #4]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 80011ca:	680a      	ldr	r2, [r1, #0]
      __HAL_RCC_PWR_CLK_DISABLE();
 80011cc:	6a59      	ldr	r1, [r3, #36]	; 0x24
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 80011ce:	f402 52c0 	and.w	r2, r2, #6144	; 0x1800
      __HAL_RCC_PWR_CLK_DISABLE();
 80011d2:	f021 5180 	bic.w	r1, r1, #268435456	; 0x10000000
 80011d6:	6259      	str	r1, [r3, #36]	; 0x24
 80011d8:	e7e1      	b.n	800119e <RCC_SetFlashLatencyFromMSIRange+0x36>
 80011da:	bf00      	nop
 80011dc:	40023800 	.word	0x40023800
 80011e0:	40023c00 	.word	0x40023c00
 80011e4:	40007000 	.word	0x40007000

080011e8 <HAL_RCC_OscConfig>:
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80011e8:	6803      	ldr	r3, [r0, #0]
{
 80011ea:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80011ee:	07d9      	lsls	r1, r3, #31
{
 80011f0:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80011f2:	d46a      	bmi.n	80012ca <HAL_RCC_OscConfig+0xe2>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80011f4:	6823      	ldr	r3, [r4, #0]
 80011f6:	079a      	lsls	r2, r3, #30
 80011f8:	f100 80e6 	bmi.w	80013c8 <HAL_RCC_OscConfig+0x1e0>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80011fc:	6823      	ldr	r3, [r4, #0]
 80011fe:	06de      	lsls	r6, r3, #27
 8001200:	d555      	bpl.n	80012ae <HAL_RCC_OscConfig+0xc6>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI) )
 8001202:	4dc1      	ldr	r5, [pc, #772]	; (8001508 <HAL_RCC_OscConfig+0x320>)
 8001204:	68ab      	ldr	r3, [r5, #8]
 8001206:	f013 0f0c 	tst.w	r3, #12
 800120a:	f040 8183 	bne.w	8001514 <HAL_RCC_OscConfig+0x32c>
 800120e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001212:	fa93 f2a3 	rbit	r2, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != RESET) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001216:	6829      	ldr	r1, [r5, #0]
 8001218:	fa93 f3a3 	rbit	r3, r3
 800121c:	fab3 f383 	clz	r3, r3
 8001220:	2201      	movs	r2, #1
 8001222:	f003 031f 	and.w	r3, r3, #31
 8001226:	fa02 f303 	lsl.w	r3, r2, r3
 800122a:	420b      	tst	r3, r1
 800122c:	d002      	beq.n	8001234 <HAL_RCC_OscConfig+0x4c>
 800122e:	69a3      	ldr	r3, [r4, #24]
 8001230:	2b00      	cmp	r3, #0
 8001232:	d06e      	beq.n	8001312 <HAL_RCC_OscConfig+0x12a>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001234:	4db4      	ldr	r5, [pc, #720]	; (8001508 <HAL_RCC_OscConfig+0x320>)
 8001236:	6a20      	ldr	r0, [r4, #32]
 8001238:	686b      	ldr	r3, [r5, #4]
 800123a:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800123e:	4298      	cmp	r0, r3
 8001240:	f240 814a 	bls.w	80014d8 <HAL_RCC_OscConfig+0x2f0>
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001244:	f7ff ff90 	bl	8001168 <RCC_SetFlashLatencyFromMSIRange>
 8001248:	2800      	cmp	r0, #0
 800124a:	d162      	bne.n	8001312 <HAL_RCC_OscConfig+0x12a>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800124c:	686b      	ldr	r3, [r5, #4]
 800124e:	6a22      	ldr	r2, [r4, #32]
 8001250:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8001254:	4313      	orrs	r3, r2
 8001256:	606b      	str	r3, [r5, #4]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001258:	6869      	ldr	r1, [r5, #4]
 800125a:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 800125e:	fa93 f3a3 	rbit	r3, r3
 8001262:	fab3 f283 	clz	r2, r3
 8001266:	69e3      	ldr	r3, [r4, #28]
 8001268:	4093      	lsls	r3, r2
 800126a:	f021 427f 	bic.w	r2, r1, #4278190080	; 0xff000000
 800126e:	4313      	orrs	r3, r2
 8001270:	606b      	str	r3, [r5, #4]
 8001272:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8001276:	fa93 f3a3 	rbit	r3, r3
        SystemCoreClock =  (32768U * (1U << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_BITNUMBER) + 1U))) 
 800127a:	fab3 f083 	clz	r0, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_BITNUMBER)];
 800127e:	4ba2      	ldr	r3, [pc, #648]	; (8001508 <HAL_RCC_OscConfig+0x320>)
 8001280:	21f0      	movs	r1, #240	; 0xf0
 8001282:	689a      	ldr	r2, [r3, #8]
 8001284:	fa91 f1a1 	rbit	r1, r1
 8001288:	fab1 f181 	clz	r1, r1
        SystemCoreClock =  (32768U * (1U << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_BITNUMBER) + 1U))) 
 800128c:	6a23      	ldr	r3, [r4, #32]
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_BITNUMBER)];
 800128e:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
        SystemCoreClock =  (32768U * (1U << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_BITNUMBER) + 1U))) 
 8001292:	40c3      	lsrs	r3, r0
 8001294:	1c58      	adds	r0, r3, #1
 8001296:	f44f 4300 	mov.w	r3, #32768	; 0x8000
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_BITNUMBER)];
 800129a:	40ca      	lsrs	r2, r1
 800129c:	499b      	ldr	r1, [pc, #620]	; (800150c <HAL_RCC_OscConfig+0x324>)
        SystemCoreClock =  (32768U * (1U << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_BITNUMBER) + 1U))) 
 800129e:	4083      	lsls	r3, r0
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_BITNUMBER)];
 80012a0:	5c8a      	ldrb	r2, [r1, r2]
        HAL_InitTick (TICK_INT_PRIORITY);
 80012a2:	2000      	movs	r0, #0
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_BITNUMBER)];
 80012a4:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1U << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_BITNUMBER) + 1U))) 
 80012a6:	4a9a      	ldr	r2, [pc, #616]	; (8001510 <HAL_RCC_OscConfig+0x328>)
 80012a8:	6013      	str	r3, [r2, #0]
        HAL_InitTick (TICK_INT_PRIORITY);
 80012aa:	f7ff fb63 	bl	8000974 <HAL_InitTick>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80012ae:	6823      	ldr	r3, [r4, #0]
 80012b0:	071d      	lsls	r5, r3, #28
 80012b2:	f100 8191 	bmi.w	80015d8 <HAL_RCC_OscConfig+0x3f0>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80012b6:	6823      	ldr	r3, [r4, #0]
 80012b8:	0758      	lsls	r0, r3, #29
 80012ba:	f100 81d3 	bmi.w	8001664 <HAL_RCC_OscConfig+0x47c>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80012be:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80012c0:	2a00      	cmp	r2, #0
 80012c2:	f040 8257 	bne.w	8001774 <HAL_RCC_OscConfig+0x58c>
  return HAL_OK;
 80012c6:	2000      	movs	r0, #0
 80012c8:	e024      	b.n	8001314 <HAL_RCC_OscConfig+0x12c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80012ca:	4b8f      	ldr	r3, [pc, #572]	; (8001508 <HAL_RCC_OscConfig+0x320>)
 80012cc:	689a      	ldr	r2, [r3, #8]
 80012ce:	f002 020c 	and.w	r2, r2, #12
 80012d2:	2a08      	cmp	r2, #8
 80012d4:	d007      	beq.n	80012e6 <HAL_RCC_OscConfig+0xfe>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80012d6:	689a      	ldr	r2, [r3, #8]
 80012d8:	f002 020c 	and.w	r2, r2, #12
 80012dc:	2a0c      	cmp	r2, #12
 80012de:	d11c      	bne.n	800131a <HAL_RCC_OscConfig+0x132>
 80012e0:	689b      	ldr	r3, [r3, #8]
 80012e2:	03db      	lsls	r3, r3, #15
 80012e4:	d519      	bpl.n	800131a <HAL_RCC_OscConfig+0x132>
 80012e6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80012ea:	fa93 f2a3 	rbit	r2, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012ee:	4a86      	ldr	r2, [pc, #536]	; (8001508 <HAL_RCC_OscConfig+0x320>)
 80012f0:	6811      	ldr	r1, [r2, #0]
 80012f2:	fa93 f3a3 	rbit	r3, r3
 80012f6:	fab3 f383 	clz	r3, r3
 80012fa:	2201      	movs	r2, #1
 80012fc:	f003 031f 	and.w	r3, r3, #31
 8001300:	fa02 f303 	lsl.w	r3, r2, r3
 8001304:	420b      	tst	r3, r1
 8001306:	f43f af75 	beq.w	80011f4 <HAL_RCC_OscConfig+0xc>
 800130a:	6863      	ldr	r3, [r4, #4]
 800130c:	2b00      	cmp	r3, #0
 800130e:	f47f af71 	bne.w	80011f4 <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 8001312:	2001      	movs	r0, #1
}
 8001314:	b003      	add	sp, #12
 8001316:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800131a:	6863      	ldr	r3, [r4, #4]
 800131c:	4d7a      	ldr	r5, [pc, #488]	; (8001508 <HAL_RCC_OscConfig+0x320>)
 800131e:	2b01      	cmp	r3, #1
 8001320:	d120      	bne.n	8001364 <HAL_RCC_OscConfig+0x17c>
 8001322:	682b      	ldr	r3, [r5, #0]
 8001324:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001328:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800132a:	f7ff fb4b 	bl	80009c4 <HAL_GetTick>
 800132e:	f44f 3500 	mov.w	r5, #131072	; 0x20000
 8001332:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001334:	2601      	movs	r6, #1
 8001336:	4f74      	ldr	r7, [pc, #464]	; (8001508 <HAL_RCC_OscConfig+0x320>)
 8001338:	fa95 f3a5 	rbit	r3, r5
 800133c:	683a      	ldr	r2, [r7, #0]
 800133e:	fa95 f3a5 	rbit	r3, r5
 8001342:	fab3 f383 	clz	r3, r3
 8001346:	f003 031f 	and.w	r3, r3, #31
 800134a:	fa06 f303 	lsl.w	r3, r6, r3
 800134e:	4213      	tst	r3, r2
 8001350:	f47f af50 	bne.w	80011f4 <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001354:	f7ff fb36 	bl	80009c4 <HAL_GetTick>
 8001358:	eba0 0008 	sub.w	r0, r0, r8
 800135c:	2864      	cmp	r0, #100	; 0x64
 800135e:	d9eb      	bls.n	8001338 <HAL_RCC_OscConfig+0x150>
            return HAL_TIMEOUT;
 8001360:	2003      	movs	r0, #3
 8001362:	e7d7      	b.n	8001314 <HAL_RCC_OscConfig+0x12c>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001364:	bb13      	cbnz	r3, 80013ac <HAL_RCC_OscConfig+0x1c4>
 8001366:	682b      	ldr	r3, [r5, #0]
 8001368:	f44f 3600 	mov.w	r6, #131072	; 0x20000
 800136c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001370:	602b      	str	r3, [r5, #0]
 8001372:	682b      	ldr	r3, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001374:	2701      	movs	r7, #1
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001376:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800137a:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800137c:	f7ff fb22 	bl	80009c4 <HAL_GetTick>
 8001380:	4680      	mov	r8, r0
 8001382:	fa96 f3a6 	rbit	r3, r6
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001386:	682a      	ldr	r2, [r5, #0]
 8001388:	fa96 f3a6 	rbit	r3, r6
 800138c:	fab3 f383 	clz	r3, r3
 8001390:	f003 031f 	and.w	r3, r3, #31
 8001394:	fa07 f303 	lsl.w	r3, r7, r3
 8001398:	4213      	tst	r3, r2
 800139a:	f43f af2b 	beq.w	80011f4 <HAL_RCC_OscConfig+0xc>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800139e:	f7ff fb11 	bl	80009c4 <HAL_GetTick>
 80013a2:	eba0 0008 	sub.w	r0, r0, r8
 80013a6:	2864      	cmp	r0, #100	; 0x64
 80013a8:	d9eb      	bls.n	8001382 <HAL_RCC_OscConfig+0x19a>
 80013aa:	e7d9      	b.n	8001360 <HAL_RCC_OscConfig+0x178>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80013ac:	2b05      	cmp	r3, #5
 80013ae:	682b      	ldr	r3, [r5, #0]
 80013b0:	d103      	bne.n	80013ba <HAL_RCC_OscConfig+0x1d2>
 80013b2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80013b6:	602b      	str	r3, [r5, #0]
 80013b8:	e7b3      	b.n	8001322 <HAL_RCC_OscConfig+0x13a>
 80013ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80013be:	602b      	str	r3, [r5, #0]
 80013c0:	682b      	ldr	r3, [r5, #0]
 80013c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80013c6:	e7af      	b.n	8001328 <HAL_RCC_OscConfig+0x140>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80013c8:	4b4f      	ldr	r3, [pc, #316]	; (8001508 <HAL_RCC_OscConfig+0x320>)
 80013ca:	689a      	ldr	r2, [r3, #8]
 80013cc:	f002 020c 	and.w	r2, r2, #12
 80013d0:	2a04      	cmp	r2, #4
 80013d2:	d007      	beq.n	80013e4 <HAL_RCC_OscConfig+0x1fc>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80013d4:	689a      	ldr	r2, [r3, #8]
 80013d6:	f002 020c 	and.w	r2, r2, #12
 80013da:	2a0c      	cmp	r2, #12
 80013dc:	d124      	bne.n	8001428 <HAL_RCC_OscConfig+0x240>
 80013de:	689b      	ldr	r3, [r3, #8]
 80013e0:	03df      	lsls	r7, r3, #15
 80013e2:	d421      	bmi.n	8001428 <HAL_RCC_OscConfig+0x240>
 80013e4:	2302      	movs	r3, #2
 80013e6:	fa93 f2a3 	rbit	r2, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013ea:	4a47      	ldr	r2, [pc, #284]	; (8001508 <HAL_RCC_OscConfig+0x320>)
 80013ec:	6810      	ldr	r0, [r2, #0]
 80013ee:	fa93 f3a3 	rbit	r3, r3
 80013f2:	fab3 f383 	clz	r3, r3
 80013f6:	2101      	movs	r1, #1
 80013f8:	f003 031f 	and.w	r3, r3, #31
 80013fc:	fa01 f303 	lsl.w	r3, r1, r3
 8001400:	4203      	tst	r3, r0
 8001402:	4613      	mov	r3, r2
 8001404:	d002      	beq.n	800140c <HAL_RCC_OscConfig+0x224>
 8001406:	68e2      	ldr	r2, [r4, #12]
 8001408:	428a      	cmp	r2, r1
 800140a:	d182      	bne.n	8001312 <HAL_RCC_OscConfig+0x12a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800140c:	6858      	ldr	r0, [r3, #4]
 800140e:	f44f 52f8 	mov.w	r2, #7936	; 0x1f00
 8001412:	fa92 f2a2 	rbit	r2, r2
 8001416:	fab2 f182 	clz	r1, r2
 800141a:	6922      	ldr	r2, [r4, #16]
 800141c:	408a      	lsls	r2, r1
 800141e:	f420 51f8 	bic.w	r1, r0, #7936	; 0x1f00
 8001422:	430a      	orrs	r2, r1
 8001424:	605a      	str	r2, [r3, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001426:	e6e9      	b.n	80011fc <HAL_RCC_OscConfig+0x14>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001428:	68e2      	ldr	r2, [r4, #12]
 800142a:	2501      	movs	r5, #1
 800142c:	b382      	cbz	r2, 8001490 <HAL_RCC_OscConfig+0x2a8>
 800142e:	fa95 f3a5 	rbit	r3, r5
        __HAL_RCC_HSI_ENABLE();
 8001432:	fab3 f383 	clz	r3, r3
 8001436:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800143a:	f503 138e 	add.w	r3, r3, #1163264	; 0x11c000
 800143e:	009b      	lsls	r3, r3, #2
 8001440:	601d      	str	r5, [r3, #0]
        tickstart = HAL_GetTick();
 8001442:	f7ff fabf 	bl	80009c4 <HAL_GetTick>
 8001446:	2702      	movs	r7, #2
 8001448:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800144a:	4e2f      	ldr	r6, [pc, #188]	; (8001508 <HAL_RCC_OscConfig+0x320>)
 800144c:	fa97 f3a7 	rbit	r3, r7
 8001450:	6832      	ldr	r2, [r6, #0]
 8001452:	fa97 f3a7 	rbit	r3, r7
 8001456:	fab3 f383 	clz	r3, r3
 800145a:	f003 031f 	and.w	r3, r3, #31
 800145e:	fa05 f303 	lsl.w	r3, r5, r3
 8001462:	4213      	tst	r3, r2
 8001464:	d00d      	beq.n	8001482 <HAL_RCC_OscConfig+0x29a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001466:	6871      	ldr	r1, [r6, #4]
 8001468:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 800146c:	fa93 f3a3 	rbit	r3, r3
 8001470:	fab3 f283 	clz	r2, r3
 8001474:	6923      	ldr	r3, [r4, #16]
 8001476:	4093      	lsls	r3, r2
 8001478:	f421 52f8 	bic.w	r2, r1, #7936	; 0x1f00
 800147c:	4313      	orrs	r3, r2
 800147e:	6073      	str	r3, [r6, #4]
 8001480:	e6bc      	b.n	80011fc <HAL_RCC_OscConfig+0x14>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001482:	f7ff fa9f 	bl	80009c4 <HAL_GetTick>
 8001486:	eba0 0008 	sub.w	r0, r0, r8
 800148a:	2802      	cmp	r0, #2
 800148c:	d9de      	bls.n	800144c <HAL_RCC_OscConfig+0x264>
 800148e:	e767      	b.n	8001360 <HAL_RCC_OscConfig+0x178>
 8001490:	fa95 f3a5 	rbit	r3, r5
        __HAL_RCC_HSI_DISABLE();
 8001494:	fab3 f383 	clz	r3, r3
 8001498:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800149c:	f503 138e 	add.w	r3, r3, #1163264	; 0x11c000
 80014a0:	009b      	lsls	r3, r3, #2
 80014a2:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80014a4:	f7ff fa8e 	bl	80009c4 <HAL_GetTick>
 80014a8:	2602      	movs	r6, #2
 80014aa:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80014ac:	4f16      	ldr	r7, [pc, #88]	; (8001508 <HAL_RCC_OscConfig+0x320>)
 80014ae:	fa96 f3a6 	rbit	r3, r6
 80014b2:	683a      	ldr	r2, [r7, #0]
 80014b4:	fa96 f3a6 	rbit	r3, r6
 80014b8:	fab3 f383 	clz	r3, r3
 80014bc:	f003 031f 	and.w	r3, r3, #31
 80014c0:	fa05 f303 	lsl.w	r3, r5, r3
 80014c4:	4213      	tst	r3, r2
 80014c6:	f43f ae99 	beq.w	80011fc <HAL_RCC_OscConfig+0x14>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80014ca:	f7ff fa7b 	bl	80009c4 <HAL_GetTick>
 80014ce:	eba0 0008 	sub.w	r0, r0, r8
 80014d2:	2802      	cmp	r0, #2
 80014d4:	d9eb      	bls.n	80014ae <HAL_RCC_OscConfig+0x2c6>
 80014d6:	e743      	b.n	8001360 <HAL_RCC_OscConfig+0x178>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80014d8:	686b      	ldr	r3, [r5, #4]
 80014da:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80014de:	4303      	orrs	r3, r0
 80014e0:	606b      	str	r3, [r5, #4]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80014e2:	6869      	ldr	r1, [r5, #4]
 80014e4:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 80014e8:	fa93 f3a3 	rbit	r3, r3
 80014ec:	fab3 f283 	clz	r2, r3
 80014f0:	69e3      	ldr	r3, [r4, #28]
 80014f2:	4093      	lsls	r3, r2
 80014f4:	f021 427f 	bic.w	r2, r1, #4278190080	; 0xff000000
 80014f8:	4313      	orrs	r3, r2
 80014fa:	606b      	str	r3, [r5, #4]
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80014fc:	f7ff fe34 	bl	8001168 <RCC_SetFlashLatencyFromMSIRange>
 8001500:	2800      	cmp	r0, #0
 8001502:	f43f aeb6 	beq.w	8001272 <HAL_RCC_OscConfig+0x8a>
 8001506:	e704      	b.n	8001312 <HAL_RCC_OscConfig+0x12a>
 8001508:	40023800 	.word	0x40023800
 800150c:	08002dc0 	.word	0x08002dc0
 8001510:	20000000 	.word	0x20000000
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001514:	69a2      	ldr	r2, [r4, #24]
 8001516:	f44f 7380 	mov.w	r3, #256	; 0x100
 800151a:	2a00      	cmp	r2, #0
 800151c:	d037      	beq.n	800158e <HAL_RCC_OscConfig+0x3a6>
 800151e:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_MSI_ENABLE();
 8001522:	fab3 f383 	clz	r3, r3
 8001526:	2601      	movs	r6, #1
 8001528:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800152c:	f503 138e 	add.w	r3, r3, #1163264	; 0x11c000
 8001530:	009b      	lsls	r3, r3, #2
 8001532:	601e      	str	r6, [r3, #0]
        tickstart = HAL_GetTick();
 8001534:	f7ff fa46 	bl	80009c4 <HAL_GetTick>
 8001538:	f44f 7700 	mov.w	r7, #512	; 0x200
 800153c:	4680      	mov	r8, r0
 800153e:	fa97 f3a7 	rbit	r3, r7
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == RESET)
 8001542:	682a      	ldr	r2, [r5, #0]
 8001544:	fa97 f3a7 	rbit	r3, r7
 8001548:	fab3 f383 	clz	r3, r3
 800154c:	f003 031f 	and.w	r3, r3, #31
 8001550:	fa06 f303 	lsl.w	r3, r6, r3
 8001554:	4213      	tst	r3, r2
 8001556:	d013      	beq.n	8001580 <HAL_RCC_OscConfig+0x398>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001558:	686b      	ldr	r3, [r5, #4]
 800155a:	6a22      	ldr	r2, [r4, #32]
 800155c:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8001560:	4313      	orrs	r3, r2
 8001562:	606b      	str	r3, [r5, #4]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001564:	6869      	ldr	r1, [r5, #4]
 8001566:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 800156a:	fa93 f3a3 	rbit	r3, r3
 800156e:	fab3 f283 	clz	r2, r3
 8001572:	69e3      	ldr	r3, [r4, #28]
 8001574:	4093      	lsls	r3, r2
 8001576:	f021 427f 	bic.w	r2, r1, #4278190080	; 0xff000000
 800157a:	4313      	orrs	r3, r2
 800157c:	606b      	str	r3, [r5, #4]
 800157e:	e696      	b.n	80012ae <HAL_RCC_OscConfig+0xc6>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001580:	f7ff fa20 	bl	80009c4 <HAL_GetTick>
 8001584:	eba0 0008 	sub.w	r0, r0, r8
 8001588:	2802      	cmp	r0, #2
 800158a:	d9d8      	bls.n	800153e <HAL_RCC_OscConfig+0x356>
 800158c:	e6e8      	b.n	8001360 <HAL_RCC_OscConfig+0x178>
 800158e:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_MSI_DISABLE();
 8001592:	fab3 f383 	clz	r3, r3
 8001596:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800159a:	f503 138e 	add.w	r3, r3, #1163264	; 0x11c000
 800159e:	009b      	lsls	r3, r3, #2
 80015a0:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80015a2:	f7ff fa0f 	bl	80009c4 <HAL_GetTick>
 80015a6:	f44f 7600 	mov.w	r6, #512	; 0x200
 80015aa:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != RESET)
 80015ac:	2701      	movs	r7, #1
 80015ae:	fa96 f3a6 	rbit	r3, r6
 80015b2:	682a      	ldr	r2, [r5, #0]
 80015b4:	fa96 f3a6 	rbit	r3, r6
 80015b8:	fab3 f383 	clz	r3, r3
 80015bc:	f003 031f 	and.w	r3, r3, #31
 80015c0:	fa07 f303 	lsl.w	r3, r7, r3
 80015c4:	4213      	tst	r3, r2
 80015c6:	f43f ae72 	beq.w	80012ae <HAL_RCC_OscConfig+0xc6>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80015ca:	f7ff f9fb 	bl	80009c4 <HAL_GetTick>
 80015ce:	eba0 0008 	sub.w	r0, r0, r8
 80015d2:	2802      	cmp	r0, #2
 80015d4:	d9eb      	bls.n	80015ae <HAL_RCC_OscConfig+0x3c6>
 80015d6:	e6c3      	b.n	8001360 <HAL_RCC_OscConfig+0x178>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80015d8:	6962      	ldr	r2, [r4, #20]
 80015da:	2501      	movs	r5, #1
 80015dc:	49a9      	ldr	r1, [pc, #676]	; (8001884 <HAL_RCC_OscConfig+0x69c>)
 80015de:	b302      	cbz	r2, 8001622 <HAL_RCC_OscConfig+0x43a>
 80015e0:	fa95 f3a5 	rbit	r3, r5
      __HAL_RCC_LSI_ENABLE();
 80015e4:	fab3 f383 	clz	r3, r3
 80015e8:	440b      	add	r3, r1
 80015ea:	009b      	lsls	r3, r3, #2
 80015ec:	601d      	str	r5, [r3, #0]
      tickstart = HAL_GetTick();
 80015ee:	f7ff f9e9 	bl	80009c4 <HAL_GetTick>
 80015f2:	2602      	movs	r6, #2
 80015f4:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80015f6:	4fa4      	ldr	r7, [pc, #656]	; (8001888 <HAL_RCC_OscConfig+0x6a0>)
 80015f8:	fa96 f3a6 	rbit	r3, r6
 80015fc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80015fe:	fa96 f3a6 	rbit	r3, r6
 8001602:	fab3 f383 	clz	r3, r3
 8001606:	f003 031f 	and.w	r3, r3, #31
 800160a:	fa05 f303 	lsl.w	r3, r5, r3
 800160e:	4213      	tst	r3, r2
 8001610:	f47f ae51 	bne.w	80012b6 <HAL_RCC_OscConfig+0xce>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001614:	f7ff f9d6 	bl	80009c4 <HAL_GetTick>
 8001618:	eba0 0008 	sub.w	r0, r0, r8
 800161c:	2802      	cmp	r0, #2
 800161e:	d9eb      	bls.n	80015f8 <HAL_RCC_OscConfig+0x410>
 8001620:	e69e      	b.n	8001360 <HAL_RCC_OscConfig+0x178>
 8001622:	fa95 f3a5 	rbit	r3, r5
      __HAL_RCC_LSI_DISABLE();
 8001626:	fab3 f383 	clz	r3, r3
 800162a:	440b      	add	r3, r1
 800162c:	009b      	lsls	r3, r3, #2
 800162e:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001630:	f7ff f9c8 	bl	80009c4 <HAL_GetTick>
 8001634:	2602      	movs	r6, #2
 8001636:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001638:	4f93      	ldr	r7, [pc, #588]	; (8001888 <HAL_RCC_OscConfig+0x6a0>)
 800163a:	fa96 f3a6 	rbit	r3, r6
 800163e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001640:	fa96 f3a6 	rbit	r3, r6
 8001644:	fab3 f383 	clz	r3, r3
 8001648:	f003 031f 	and.w	r3, r3, #31
 800164c:	fa05 f303 	lsl.w	r3, r5, r3
 8001650:	4213      	tst	r3, r2
 8001652:	f43f ae30 	beq.w	80012b6 <HAL_RCC_OscConfig+0xce>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001656:	f7ff f9b5 	bl	80009c4 <HAL_GetTick>
 800165a:	eba0 0008 	sub.w	r0, r0, r8
 800165e:	2802      	cmp	r0, #2
 8001660:	d9eb      	bls.n	800163a <HAL_RCC_OscConfig+0x452>
 8001662:	e67d      	b.n	8001360 <HAL_RCC_OscConfig+0x178>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001664:	4b88      	ldr	r3, [pc, #544]	; (8001888 <HAL_RCC_OscConfig+0x6a0>)
 8001666:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001668:	00d1      	lsls	r1, r2, #3
 800166a:	d434      	bmi.n	80016d6 <HAL_RCC_OscConfig+0x4ee>
      pwrclkchanged = SET;
 800166c:	2601      	movs	r6, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 800166e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001670:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001674:	625a      	str	r2, [r3, #36]	; 0x24
 8001676:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001678:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800167c:	9301      	str	r3, [sp, #4]
 800167e:	9b01      	ldr	r3, [sp, #4]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001680:	4d82      	ldr	r5, [pc, #520]	; (800188c <HAL_RCC_OscConfig+0x6a4>)
 8001682:	682b      	ldr	r3, [r5, #0]
 8001684:	05da      	lsls	r2, r3, #23
 8001686:	d528      	bpl.n	80016da <HAL_RCC_OscConfig+0x4f2>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001688:	68a3      	ldr	r3, [r4, #8]
 800168a:	4d7f      	ldr	r5, [pc, #508]	; (8001888 <HAL_RCC_OscConfig+0x6a0>)
 800168c:	2b01      	cmp	r3, #1
 800168e:	d134      	bne.n	80016fa <HAL_RCC_OscConfig+0x512>
 8001690:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8001692:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001696:	636b      	str	r3, [r5, #52]	; 0x34
      tickstart = HAL_GetTick();
 8001698:	f7ff f994 	bl	80009c4 <HAL_GetTick>
 800169c:	f44f 7500 	mov.w	r5, #512	; 0x200
 80016a0:	4681      	mov	r9, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016a2:	2701      	movs	r7, #1
 80016a4:	f8df 81e0 	ldr.w	r8, [pc, #480]	; 8001888 <HAL_RCC_OscConfig+0x6a0>
 80016a8:	fa95 f3a5 	rbit	r3, r5
 80016ac:	f8d8 2034 	ldr.w	r2, [r8, #52]	; 0x34
 80016b0:	fa95 f3a5 	rbit	r3, r5
 80016b4:	fab3 f383 	clz	r3, r3
 80016b8:	f003 031f 	and.w	r3, r3, #31
 80016bc:	fa07 f303 	lsl.w	r3, r7, r3
 80016c0:	4213      	tst	r3, r2
 80016c2:	d04e      	beq.n	8001762 <HAL_RCC_OscConfig+0x57a>
    if(pwrclkchanged == SET)
 80016c4:	2e00      	cmp	r6, #0
 80016c6:	f43f adfa 	beq.w	80012be <HAL_RCC_OscConfig+0xd6>
      __HAL_RCC_PWR_CLK_DISABLE();
 80016ca:	4a6f      	ldr	r2, [pc, #444]	; (8001888 <HAL_RCC_OscConfig+0x6a0>)
 80016cc:	6a53      	ldr	r3, [r2, #36]	; 0x24
 80016ce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80016d2:	6253      	str	r3, [r2, #36]	; 0x24
 80016d4:	e5f3      	b.n	80012be <HAL_RCC_OscConfig+0xd6>
    FlagStatus       pwrclkchanged = RESET;
 80016d6:	2600      	movs	r6, #0
 80016d8:	e7d2      	b.n	8001680 <HAL_RCC_OscConfig+0x498>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80016da:	682b      	ldr	r3, [r5, #0]
 80016dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016e0:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 80016e2:	f7ff f96f 	bl	80009c4 <HAL_GetTick>
 80016e6:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016e8:	682b      	ldr	r3, [r5, #0]
 80016ea:	05db      	lsls	r3, r3, #23
 80016ec:	d4cc      	bmi.n	8001688 <HAL_RCC_OscConfig+0x4a0>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80016ee:	f7ff f969 	bl	80009c4 <HAL_GetTick>
 80016f2:	1bc0      	subs	r0, r0, r7
 80016f4:	2864      	cmp	r0, #100	; 0x64
 80016f6:	d9f7      	bls.n	80016e8 <HAL_RCC_OscConfig+0x500>
 80016f8:	e632      	b.n	8001360 <HAL_RCC_OscConfig+0x178>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80016fa:	bb23      	cbnz	r3, 8001746 <HAL_RCC_OscConfig+0x55e>
 80016fc:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 80016fe:	f44f 7700 	mov.w	r7, #512	; 0x200
 8001702:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001706:	636b      	str	r3, [r5, #52]	; 0x34
 8001708:	6b6b      	ldr	r3, [r5, #52]	; 0x34
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800170a:	f04f 0801 	mov.w	r8, #1
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800170e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001712:	636b      	str	r3, [r5, #52]	; 0x34
      tickstart = HAL_GetTick();
 8001714:	f7ff f956 	bl	80009c4 <HAL_GetTick>
 8001718:	4681      	mov	r9, r0
 800171a:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800171e:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8001720:	fa97 f3a7 	rbit	r3, r7
 8001724:	fab3 f383 	clz	r3, r3
 8001728:	f003 031f 	and.w	r3, r3, #31
 800172c:	fa08 f303 	lsl.w	r3, r8, r3
 8001730:	4213      	tst	r3, r2
 8001732:	d0c7      	beq.n	80016c4 <HAL_RCC_OscConfig+0x4dc>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001734:	f7ff f946 	bl	80009c4 <HAL_GetTick>
 8001738:	f241 3388 	movw	r3, #5000	; 0x1388
 800173c:	eba0 0009 	sub.w	r0, r0, r9
 8001740:	4298      	cmp	r0, r3
 8001742:	d9ea      	bls.n	800171a <HAL_RCC_OscConfig+0x532>
 8001744:	e60c      	b.n	8001360 <HAL_RCC_OscConfig+0x178>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001746:	2b05      	cmp	r3, #5
 8001748:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800174a:	d103      	bne.n	8001754 <HAL_RCC_OscConfig+0x56c>
 800174c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001750:	636b      	str	r3, [r5, #52]	; 0x34
 8001752:	e79d      	b.n	8001690 <HAL_RCC_OscConfig+0x4a8>
 8001754:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001758:	636b      	str	r3, [r5, #52]	; 0x34
 800175a:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800175c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001760:	e799      	b.n	8001696 <HAL_RCC_OscConfig+0x4ae>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001762:	f7ff f92f 	bl	80009c4 <HAL_GetTick>
 8001766:	f241 3388 	movw	r3, #5000	; 0x1388
 800176a:	eba0 0009 	sub.w	r0, r0, r9
 800176e:	4298      	cmp	r0, r3
 8001770:	d99a      	bls.n	80016a8 <HAL_RCC_OscConfig+0x4c0>
 8001772:	e5f5      	b.n	8001360 <HAL_RCC_OscConfig+0x178>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001774:	4d44      	ldr	r5, [pc, #272]	; (8001888 <HAL_RCC_OscConfig+0x6a0>)
 8001776:	68ab      	ldr	r3, [r5, #8]
 8001778:	f003 030c 	and.w	r3, r3, #12
 800177c:	2b0c      	cmp	r3, #12
 800177e:	f43f adc8 	beq.w	8001312 <HAL_RCC_OscConfig+0x12a>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001782:	2a02      	cmp	r2, #2
 8001784:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001788:	d156      	bne.n	8001838 <HAL_RCC_OscConfig+0x650>
 800178a:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 800178e:	fab3 f383 	clz	r3, r3
 8001792:	2200      	movs	r2, #0
 8001794:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001798:	f503 138e 	add.w	r3, r3, #1163264	; 0x11c000
 800179c:	009b      	lsls	r3, r3, #2
 800179e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80017a0:	f7ff f910 	bl	80009c4 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80017a4:	462e      	mov	r6, r5
        tickstart = HAL_GetTick();
 80017a6:	4680      	mov	r8, r0
 80017a8:	f04f 7700 	mov.w	r7, #33554432	; 0x2000000
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80017ac:	2501      	movs	r5, #1
 80017ae:	fa97 f3a7 	rbit	r3, r7
 80017b2:	6832      	ldr	r2, [r6, #0]
 80017b4:	fa97 f3a7 	rbit	r3, r7
 80017b8:	fab3 f383 	clz	r3, r3
 80017bc:	f003 031f 	and.w	r3, r3, #31
 80017c0:	fa05 f303 	lsl.w	r3, r5, r3
 80017c4:	4213      	tst	r3, r2
 80017c6:	d130      	bne.n	800182a <HAL_RCC_OscConfig+0x642>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80017c8:	68b2      	ldr	r2, [r6, #8]
 80017ca:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80017cc:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80017ce:	f422 027d 	bic.w	r2, r2, #16580608	; 0xfd0000
 80017d2:	430b      	orrs	r3, r1
 80017d4:	4313      	orrs	r3, r2
 80017d6:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80017d8:	4313      	orrs	r3, r2
 80017da:	60b3      	str	r3, [r6, #8]
 80017dc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80017e0:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_ENABLE();
 80017e4:	fab3 f383 	clz	r3, r3
 80017e8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80017ec:	f503 138e 	add.w	r3, r3, #1163264	; 0x11c000
 80017f0:	009b      	lsls	r3, r3, #2
 80017f2:	601d      	str	r5, [r3, #0]
        tickstart = HAL_GetTick();
 80017f4:	f7ff f8e6 	bl	80009c4 <HAL_GetTick>
 80017f8:	f04f 7400 	mov.w	r4, #33554432	; 0x2000000
 80017fc:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80017fe:	2501      	movs	r5, #1
 8001800:	4e21      	ldr	r6, [pc, #132]	; (8001888 <HAL_RCC_OscConfig+0x6a0>)
 8001802:	fa94 f3a4 	rbit	r3, r4
 8001806:	6832      	ldr	r2, [r6, #0]
 8001808:	fa94 f3a4 	rbit	r3, r4
 800180c:	fab3 f383 	clz	r3, r3
 8001810:	f003 031f 	and.w	r3, r3, #31
 8001814:	fa05 f303 	lsl.w	r3, r5, r3
 8001818:	4213      	tst	r3, r2
 800181a:	f47f ad54 	bne.w	80012c6 <HAL_RCC_OscConfig+0xde>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800181e:	f7ff f8d1 	bl	80009c4 <HAL_GetTick>
 8001822:	1bc0      	subs	r0, r0, r7
 8001824:	2802      	cmp	r0, #2
 8001826:	d9ec      	bls.n	8001802 <HAL_RCC_OscConfig+0x61a>
 8001828:	e59a      	b.n	8001360 <HAL_RCC_OscConfig+0x178>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800182a:	f7ff f8cb 	bl	80009c4 <HAL_GetTick>
 800182e:	eba0 0008 	sub.w	r0, r0, r8
 8001832:	2802      	cmp	r0, #2
 8001834:	d9bb      	bls.n	80017ae <HAL_RCC_OscConfig+0x5c6>
 8001836:	e593      	b.n	8001360 <HAL_RCC_OscConfig+0x178>
 8001838:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 800183c:	fab3 f383 	clz	r3, r3
 8001840:	2200      	movs	r2, #0
 8001842:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001846:	f503 138e 	add.w	r3, r3, #1163264	; 0x11c000
 800184a:	009b      	lsls	r3, r3, #2
 800184c:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800184e:	f7ff f8b9 	bl	80009c4 <HAL_GetTick>
 8001852:	f04f 7400 	mov.w	r4, #33554432	; 0x2000000
 8001856:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001858:	2601      	movs	r6, #1
 800185a:	fa94 f3a4 	rbit	r3, r4
 800185e:	682a      	ldr	r2, [r5, #0]
 8001860:	fa94 f3a4 	rbit	r3, r4
 8001864:	fab3 f383 	clz	r3, r3
 8001868:	f003 031f 	and.w	r3, r3, #31
 800186c:	fa06 f303 	lsl.w	r3, r6, r3
 8001870:	4213      	tst	r3, r2
 8001872:	f43f ad28 	beq.w	80012c6 <HAL_RCC_OscConfig+0xde>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001876:	f7ff f8a5 	bl	80009c4 <HAL_GetTick>
 800187a:	1bc0      	subs	r0, r0, r7
 800187c:	2802      	cmp	r0, #2
 800187e:	d9ec      	bls.n	800185a <HAL_RCC_OscConfig+0x672>
 8001880:	e56e      	b.n	8001360 <HAL_RCC_OscConfig+0x178>
 8001882:	bf00      	nop
 8001884:	1091c1a0 	.word	0x1091c1a0
 8001888:	40023800 	.word	0x40023800
 800188c:	40007000 	.word	0x40007000

08001890 <HAL_RCC_GetSysClockFreq>:
  tmpreg = RCC->CFGR;
 8001890:	491e      	ldr	r1, [pc, #120]	; (800190c <HAL_RCC_GetSysClockFreq+0x7c>)
{
 8001892:	b510      	push	{r4, lr}
  tmpreg = RCC->CFGR;
 8001894:	688b      	ldr	r3, [r1, #8]
  switch (tmpreg & RCC_CFGR_SWS)
 8001896:	f003 020c 	and.w	r2, r3, #12
 800189a:	2a08      	cmp	r2, #8
 800189c:	d005      	beq.n	80018aa <HAL_RCC_GetSysClockFreq+0x1a>
 800189e:	2a0c      	cmp	r2, #12
 80018a0:	d005      	beq.n	80018ae <HAL_RCC_GetSysClockFreq+0x1e>
 80018a2:	2a04      	cmp	r2, #4
 80018a4:	d122      	bne.n	80018ec <HAL_RCC_GetSysClockFreq+0x5c>
      sysclockfreq = HSI_VALUE;
 80018a6:	481a      	ldr	r0, [pc, #104]	; (8001910 <HAL_RCC_GetSysClockFreq+0x80>)
}
 80018a8:	bd10      	pop	{r4, pc}
      sysclockfreq = HSE_VALUE;
 80018aa:	481a      	ldr	r0, [pc, #104]	; (8001914 <HAL_RCC_GetSysClockFreq+0x84>)
 80018ac:	bd10      	pop	{r4, pc}
 80018ae:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80018b2:	fa92 f2a2 	rbit	r2, r2
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80018b6:	fab2 f282 	clz	r2, r2
 80018ba:	f403 1070 	and.w	r0, r3, #3932160	; 0x3c0000
 80018be:	fa20 f202 	lsr.w	r2, r0, r2
 80018c2:	4815      	ldr	r0, [pc, #84]	; (8001918 <HAL_RCC_GetSysClockFreq+0x88>)
 80018c4:	5c84      	ldrb	r4, [r0, r2]
 80018c6:	f44f 0040 	mov.w	r0, #12582912	; 0xc00000
 80018ca:	fa90 f0a0 	rbit	r0, r0
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_BITNUMBER) + 1U;
 80018ce:	fab0 f280 	clz	r2, r0
 80018d2:	f403 0040 	and.w	r0, r3, #12582912	; 0xc00000
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80018d6:	688b      	ldr	r3, [r1, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_BITNUMBER) + 1U;
 80018d8:	40d0      	lsrs	r0, r2
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80018da:	03db      	lsls	r3, r3, #15
        pllvco = (HSE_VALUE * pllm) / plld;
 80018dc:	bf4c      	ite	mi
 80018de:	4b0d      	ldrmi	r3, [pc, #52]	; (8001914 <HAL_RCC_GetSysClockFreq+0x84>)
        pllvco = (HSI_VALUE * pllm) / plld;
 80018e0:	4b0b      	ldrpl	r3, [pc, #44]	; (8001910 <HAL_RCC_GetSysClockFreq+0x80>)
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_BITNUMBER) + 1U;
 80018e2:	3001      	adds	r0, #1
        pllvco = (HSI_VALUE * pllm) / plld;
 80018e4:	4363      	muls	r3, r4
 80018e6:	fbb3 f0f0 	udiv	r0, r3, r0
 80018ea:	bd10      	pop	{r4, pc}
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_BITNUMBER;
 80018ec:	6848      	ldr	r0, [r1, #4]
 80018ee:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80018f2:	fa93 f3a3 	rbit	r3, r3
 80018f6:	fab3 f383 	clz	r3, r3
 80018fa:	f400 4060 	and.w	r0, r0, #57344	; 0xe000
 80018fe:	40d8      	lsrs	r0, r3
      sysclockfreq = (32768U * (1U << (msiclkrange + 1U)));
 8001900:	1c43      	adds	r3, r0, #1
 8001902:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001906:	4098      	lsls	r0, r3
 8001908:	bd10      	pop	{r4, pc}
 800190a:	bf00      	nop
 800190c:	40023800 	.word	0x40023800
 8001910:	00f42400 	.word	0x00f42400
 8001914:	007a1200 	.word	0x007a1200
 8001918:	08002dd8 	.word	0x08002dd8

0800191c <HAL_RCC_ClockConfig>:
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 800191c:	4b6a      	ldr	r3, [pc, #424]	; (8001ac8 <HAL_RCC_ClockConfig+0x1ac>)
{
 800191e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001922:	681a      	ldr	r2, [r3, #0]
{
 8001924:	4606      	mov	r6, r0
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001926:	f002 0201 	and.w	r2, r2, #1
 800192a:	428a      	cmp	r2, r1
{
 800192c:	460d      	mov	r5, r1
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 800192e:	d330      	bcc.n	8001992 <HAL_RCC_ClockConfig+0x76>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001930:	6832      	ldr	r2, [r6, #0]
 8001932:	0794      	lsls	r4, r2, #30
 8001934:	d440      	bmi.n	80019b8 <HAL_RCC_ClockConfig+0x9c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001936:	07d0      	lsls	r0, r2, #31
 8001938:	d446      	bmi.n	80019c8 <HAL_RCC_ClockConfig+0xac>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 800193a:	4b63      	ldr	r3, [pc, #396]	; (8001ac8 <HAL_RCC_ClockConfig+0x1ac>)
 800193c:	681a      	ldr	r2, [r3, #0]
 800193e:	f002 0201 	and.w	r2, r2, #1
 8001942:	4295      	cmp	r5, r2
 8001944:	f0c0 80ae 	bcc.w	8001aa4 <HAL_RCC_ClockConfig+0x188>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001948:	6832      	ldr	r2, [r6, #0]
 800194a:	0751      	lsls	r1, r2, #29
 800194c:	f100 80b3 	bmi.w	8001ab6 <HAL_RCC_ClockConfig+0x19a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001950:	0713      	lsls	r3, r2, #28
 8001952:	d507      	bpl.n	8001964 <HAL_RCC_ClockConfig+0x48>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001954:	4a5d      	ldr	r2, [pc, #372]	; (8001acc <HAL_RCC_ClockConfig+0x1b0>)
 8001956:	6931      	ldr	r1, [r6, #16]
 8001958:	6893      	ldr	r3, [r2, #8]
 800195a:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 800195e:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001962:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001964:	f7ff ff94 	bl	8001890 <HAL_RCC_GetSysClockFreq>
 8001968:	4b58      	ldr	r3, [pc, #352]	; (8001acc <HAL_RCC_ClockConfig+0x1b0>)
 800196a:	22f0      	movs	r2, #240	; 0xf0
 800196c:	689b      	ldr	r3, [r3, #8]
 800196e:	fa92 f2a2 	rbit	r2, r2
 8001972:	fab2 f282 	clz	r2, r2
 8001976:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800197a:	40d3      	lsrs	r3, r2
 800197c:	4a54      	ldr	r2, [pc, #336]	; (8001ad0 <HAL_RCC_ClockConfig+0x1b4>)
 800197e:	5cd3      	ldrb	r3, [r2, r3]
 8001980:	40d8      	lsrs	r0, r3
 8001982:	4b54      	ldr	r3, [pc, #336]	; (8001ad4 <HAL_RCC_ClockConfig+0x1b8>)
 8001984:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8001986:	2000      	movs	r0, #0
 8001988:	f7fe fff4 	bl	8000974 <HAL_InitTick>
  return HAL_OK;
 800198c:	2000      	movs	r0, #0
}
 800198e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001992:	2901      	cmp	r1, #1
 8001994:	bf02      	ittt	eq
 8001996:	681a      	ldreq	r2, [r3, #0]
 8001998:	f042 0204 	orreq.w	r2, r2, #4
 800199c:	601a      	streq	r2, [r3, #0]
 800199e:	681a      	ldr	r2, [r3, #0]
 80019a0:	f022 0201 	bic.w	r2, r2, #1
 80019a4:	430a      	orrs	r2, r1
 80019a6:	601a      	str	r2, [r3, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f003 0301 	and.w	r3, r3, #1
 80019ae:	4299      	cmp	r1, r3
 80019b0:	d0be      	beq.n	8001930 <HAL_RCC_ClockConfig+0x14>
      return HAL_ERROR;
 80019b2:	2001      	movs	r0, #1
 80019b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80019b8:	4944      	ldr	r1, [pc, #272]	; (8001acc <HAL_RCC_ClockConfig+0x1b0>)
 80019ba:	68b0      	ldr	r0, [r6, #8]
 80019bc:	688b      	ldr	r3, [r1, #8]
 80019be:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80019c2:	4303      	orrs	r3, r0
 80019c4:	608b      	str	r3, [r1, #8]
 80019c6:	e7b6      	b.n	8001936 <HAL_RCC_ClockConfig+0x1a>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80019c8:	6872      	ldr	r2, [r6, #4]
 80019ca:	4940      	ldr	r1, [pc, #256]	; (8001acc <HAL_RCC_ClockConfig+0x1b0>)
 80019cc:	2a02      	cmp	r2, #2
 80019ce:	d10f      	bne.n	80019f0 <HAL_RCC_ClockConfig+0xd4>
 80019d0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80019d4:	fa93 f0a3 	rbit	r0, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == RESET)
 80019d8:	6808      	ldr	r0, [r1, #0]
 80019da:	fa93 f3a3 	rbit	r3, r3
 80019de:	fab3 f383 	clz	r3, r3
 80019e2:	2101      	movs	r1, #1
 80019e4:	f003 031f 	and.w	r3, r3, #31
 80019e8:	fa01 f303 	lsl.w	r3, r1, r3
 80019ec:	4203      	tst	r3, r0
 80019ee:	e013      	b.n	8001a18 <HAL_RCC_ClockConfig+0xfc>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80019f0:	2a03      	cmp	r2, #3
 80019f2:	d102      	bne.n	80019fa <HAL_RCC_ClockConfig+0xde>
 80019f4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80019f8:	e7ec      	b.n	80019d4 <HAL_RCC_ClockConfig+0xb8>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80019fa:	2a01      	cmp	r2, #1
 80019fc:	d129      	bne.n	8001a52 <HAL_RCC_ClockConfig+0x136>
 80019fe:	2302      	movs	r3, #2
 8001a00:	fa93 f0a3 	rbit	r0, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a04:	6809      	ldr	r1, [r1, #0]
 8001a06:	fa93 f3a3 	rbit	r3, r3
 8001a0a:	fab3 f383 	clz	r3, r3
 8001a0e:	f003 031f 	and.w	r3, r3, #31
 8001a12:	fa02 f303 	lsl.w	r3, r2, r3
 8001a16:	420b      	tst	r3, r1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == RESET)
 8001a18:	d0cb      	beq.n	80019b2 <HAL_RCC_ClockConfig+0x96>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001a1a:	4c2c      	ldr	r4, [pc, #176]	; (8001acc <HAL_RCC_ClockConfig+0x1b0>)
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a1c:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001a20:	68a3      	ldr	r3, [r4, #8]
 8001a22:	f023 0303 	bic.w	r3, r3, #3
 8001a26:	431a      	orrs	r2, r3
 8001a28:	60a2      	str	r2, [r4, #8]
    tickstart = HAL_GetTick();
 8001a2a:	f7fe ffcb 	bl	80009c4 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a2e:	6873      	ldr	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8001a30:	4607      	mov	r7, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a32:	2b02      	cmp	r3, #2
 8001a34:	d110      	bne.n	8001a58 <HAL_RCC_ClockConfig+0x13c>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001a36:	68a3      	ldr	r3, [r4, #8]
 8001a38:	f003 030c 	and.w	r3, r3, #12
 8001a3c:	2b08      	cmp	r3, #8
 8001a3e:	f43f af7c 	beq.w	800193a <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a42:	f7fe ffbf 	bl	80009c4 <HAL_GetTick>
 8001a46:	1bc0      	subs	r0, r0, r7
 8001a48:	4540      	cmp	r0, r8
 8001a4a:	d9f4      	bls.n	8001a36 <HAL_RCC_ClockConfig+0x11a>
          return HAL_TIMEOUT;
 8001a4c:	2003      	movs	r0, #3
 8001a4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001a52:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001a56:	e7bd      	b.n	80019d4 <HAL_RCC_ClockConfig+0xb8>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001a58:	2b03      	cmp	r3, #3
 8001a5a:	d10b      	bne.n	8001a74 <HAL_RCC_ClockConfig+0x158>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001a5c:	68a3      	ldr	r3, [r4, #8]
 8001a5e:	f003 030c 	and.w	r3, r3, #12
 8001a62:	2b0c      	cmp	r3, #12
 8001a64:	f43f af69 	beq.w	800193a <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a68:	f7fe ffac 	bl	80009c4 <HAL_GetTick>
 8001a6c:	1bc0      	subs	r0, r0, r7
 8001a6e:	4540      	cmp	r0, r8
 8001a70:	d9f4      	bls.n	8001a5c <HAL_RCC_ClockConfig+0x140>
 8001a72:	e7eb      	b.n	8001a4c <HAL_RCC_ClockConfig+0x130>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001a74:	2b01      	cmp	r3, #1
 8001a76:	d110      	bne.n	8001a9a <HAL_RCC_ClockConfig+0x17e>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001a78:	68a3      	ldr	r3, [r4, #8]
 8001a7a:	f003 030c 	and.w	r3, r3, #12
 8001a7e:	2b04      	cmp	r3, #4
 8001a80:	f43f af5b 	beq.w	800193a <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a84:	f7fe ff9e 	bl	80009c4 <HAL_GetTick>
 8001a88:	1bc0      	subs	r0, r0, r7
 8001a8a:	4540      	cmp	r0, r8
 8001a8c:	d9f4      	bls.n	8001a78 <HAL_RCC_ClockConfig+0x15c>
 8001a8e:	e7dd      	b.n	8001a4c <HAL_RCC_ClockConfig+0x130>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a90:	f7fe ff98 	bl	80009c4 <HAL_GetTick>
 8001a94:	1bc0      	subs	r0, r0, r7
 8001a96:	4540      	cmp	r0, r8
 8001a98:	d8d8      	bhi.n	8001a4c <HAL_RCC_ClockConfig+0x130>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8001a9a:	68a3      	ldr	r3, [r4, #8]
 8001a9c:	f013 0f0c 	tst.w	r3, #12
 8001aa0:	d1f6      	bne.n	8001a90 <HAL_RCC_ClockConfig+0x174>
 8001aa2:	e74a      	b.n	800193a <HAL_RCC_ClockConfig+0x1e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001aa4:	681a      	ldr	r2, [r3, #0]
 8001aa6:	f022 0201 	bic.w	r2, r2, #1
 8001aaa:	601a      	str	r2, [r3, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	07da      	lsls	r2, r3, #31
 8001ab0:	f53f af7f 	bmi.w	80019b2 <HAL_RCC_ClockConfig+0x96>
 8001ab4:	e748      	b.n	8001948 <HAL_RCC_ClockConfig+0x2c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ab6:	4905      	ldr	r1, [pc, #20]	; (8001acc <HAL_RCC_ClockConfig+0x1b0>)
 8001ab8:	68f0      	ldr	r0, [r6, #12]
 8001aba:	688b      	ldr	r3, [r1, #8]
 8001abc:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001ac0:	4303      	orrs	r3, r0
 8001ac2:	608b      	str	r3, [r1, #8]
 8001ac4:	e744      	b.n	8001950 <HAL_RCC_ClockConfig+0x34>
 8001ac6:	bf00      	nop
 8001ac8:	40023c00 	.word	0x40023c00
 8001acc:	40023800 	.word	0x40023800
 8001ad0:	08002dc0 	.word	0x08002dc0
 8001ad4:	20000000 	.word	0x20000000

08001ad8 <HAL_RCC_GetHCLKFreq>:
}
 8001ad8:	4b01      	ldr	r3, [pc, #4]	; (8001ae0 <HAL_RCC_GetHCLKFreq+0x8>)
 8001ada:	6818      	ldr	r0, [r3, #0]
 8001adc:	4770      	bx	lr
 8001ade:	bf00      	nop
 8001ae0:	20000000 	.word	0x20000000

08001ae4 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8001ae4:	4b08      	ldr	r3, [pc, #32]	; (8001b08 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001ae6:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001aea:	689b      	ldr	r3, [r3, #8]
 8001aec:	fa92 f2a2 	rbit	r2, r2
 8001af0:	fab2 f282 	clz	r2, r2
 8001af4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001af8:	40d3      	lsrs	r3, r2
 8001afa:	4a04      	ldr	r2, [pc, #16]	; (8001b0c <HAL_RCC_GetPCLK1Freq+0x28>)
 8001afc:	5cd3      	ldrb	r3, [r2, r3]
 8001afe:	4a04      	ldr	r2, [pc, #16]	; (8001b10 <HAL_RCC_GetPCLK1Freq+0x2c>)
 8001b00:	6810      	ldr	r0, [r2, #0]
}    
 8001b02:	40d8      	lsrs	r0, r3
 8001b04:	4770      	bx	lr
 8001b06:	bf00      	nop
 8001b08:	40023800 	.word	0x40023800
 8001b0c:	08002dd0 	.word	0x08002dd0
 8001b10:	20000000 	.word	0x20000000

08001b14 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8001b14:	4b08      	ldr	r3, [pc, #32]	; (8001b38 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001b16:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8001b1a:	689b      	ldr	r3, [r3, #8]
 8001b1c:	fa92 f2a2 	rbit	r2, r2
 8001b20:	fab2 f282 	clz	r2, r2
 8001b24:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8001b28:	40d3      	lsrs	r3, r2
 8001b2a:	4a04      	ldr	r2, [pc, #16]	; (8001b3c <HAL_RCC_GetPCLK2Freq+0x28>)
 8001b2c:	5cd3      	ldrb	r3, [r2, r3]
 8001b2e:	4a04      	ldr	r2, [pc, #16]	; (8001b40 <HAL_RCC_GetPCLK2Freq+0x2c>)
 8001b30:	6810      	ldr	r0, [r2, #0]
} 
 8001b32:	40d8      	lsrs	r0, r3
 8001b34:	4770      	bx	lr
 8001b36:	bf00      	nop
 8001b38:	40023800 	.word	0x40023800
 8001b3c:	08002dd0 	.word	0x08002dd0
 8001b40:	20000000 	.word	0x20000000

08001b44 <UART_SetConfig>:
  * @param  huart: Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001b44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001b48:	4681      	mov	r9, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*------- UART-associated USART registers setting : CR2 Configuration ------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according 
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001b4a:	6805      	ldr	r5, [r0, #0]
 8001b4c:	68c2      	ldr	r2, [r0, #12]
 8001b4e:	692b      	ldr	r3, [r5, #16]
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001b50:	69c1      	ldr	r1, [r0, #28]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001b52:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001b56:	4313      	orrs	r3, r2
 8001b58:	612b      	str	r3, [r5, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001b5a:	6883      	ldr	r3, [r0, #8]
 8001b5c:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1, 
 8001b5e:	68ea      	ldr	r2, [r5, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001b60:	4303      	orrs	r3, r0
 8001b62:	f8d9 0014 	ldr.w	r0, [r9, #20]
  MODIFY_REG(huart->Instance->CR1, 
 8001b66:	f422 4216 	bic.w	r2, r2, #38400	; 0x9600
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001b6a:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1, 
 8001b6c:	f022 020c 	bic.w	r2, r2, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001b70:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1, 
 8001b72:	4313      	orrs	r3, r2
 8001b74:	60eb      	str	r3, [r5, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8), 
             tmpreg);
  
  /*------- UART-associated USART registers setting : CR3 Configuration ------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001b76:	696b      	ldr	r3, [r5, #20]
 8001b78:	f8d9 2018 	ldr.w	r2, [r9, #24]
 8001b7c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001b80:	4313      	orrs	r3, r2
  
  /* Check the Over Sampling */
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001b82:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001b86:	616b      	str	r3, [r5, #20]
 8001b88:	4b7e      	ldr	r3, [pc, #504]	; (8001d84 <UART_SetConfig+0x240>)
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001b8a:	d17f      	bne.n	8001c8c <UART_SetConfig+0x148>
  {
    /*------- UART-associated USART registers setting : BRR Configuration ------*/
    if((huart->Instance == USART1))
 8001b8c:	429d      	cmp	r5, r3
 8001b8e:	f04f 0419 	mov.w	r4, #25
 8001b92:	d147      	bne.n	8001c24 <UART_SetConfig+0xe0>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8001b94:	f7ff ffbe 	bl	8001b14 <HAL_RCC_GetPCLK2Freq>
 8001b98:	fb04 f300 	mul.w	r3, r4, r0
 8001b9c:	f8d9 7004 	ldr.w	r7, [r9, #4]
 8001ba0:	f04f 0864 	mov.w	r8, #100	; 0x64
 8001ba4:	007f      	lsls	r7, r7, #1
 8001ba6:	fbb3 f3f7 	udiv	r3, r3, r7
 8001baa:	fbb3 f3f8 	udiv	r3, r3, r8
 8001bae:	011f      	lsls	r7, r3, #4
 8001bb0:	f7ff ffb0 	bl	8001b14 <HAL_RCC_GetPCLK2Freq>
 8001bb4:	4360      	muls	r0, r4
 8001bb6:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8001bba:	005b      	lsls	r3, r3, #1
 8001bbc:	fbb0 f6f3 	udiv	r6, r0, r3
 8001bc0:	f7ff ffa8 	bl	8001b14 <HAL_RCC_GetPCLK2Freq>
 8001bc4:	4360      	muls	r0, r4
 8001bc6:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8001bca:	005b      	lsls	r3, r3, #1
 8001bcc:	fbb0 f3f3 	udiv	r3, r0, r3
 8001bd0:	fbb3 f3f8 	udiv	r3, r3, r8
 8001bd4:	fb08 6313 	mls	r3, r8, r3, r6
 8001bd8:	00db      	lsls	r3, r3, #3
 8001bda:	3332      	adds	r3, #50	; 0x32
 8001bdc:	fbb3 f3f8 	udiv	r3, r3, r8
 8001be0:	005b      	lsls	r3, r3, #1
 8001be2:	f403 76f8 	and.w	r6, r3, #496	; 0x1f0
 8001be6:	f7ff ff95 	bl	8001b14 <HAL_RCC_GetPCLK2Freq>
 8001bea:	4360      	muls	r0, r4
 8001bec:	f8d9 2004 	ldr.w	r2, [r9, #4]
 8001bf0:	0052      	lsls	r2, r2, #1
 8001bf2:	fbb0 faf2 	udiv	sl, r0, r2
 8001bf6:	f7ff ff8d 	bl	8001b14 <HAL_RCC_GetPCLK2Freq>
    }
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8001bfa:	4360      	muls	r0, r4
 8001bfc:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8001c00:	005b      	lsls	r3, r3, #1
 8001c02:	fbb0 f3f3 	udiv	r3, r0, r3
 8001c06:	fbb3 f3f8 	udiv	r3, r3, r8
 8001c0a:	fb08 a313 	mls	r3, r8, r3, sl
 8001c0e:	00db      	lsls	r3, r3, #3
 8001c10:	3332      	adds	r3, #50	; 0x32
 8001c12:	fbb3 f3f8 	udiv	r3, r3, r8
 8001c16:	f003 0307 	and.w	r3, r3, #7
 8001c1a:	443b      	add	r3, r7
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8001c1c:	4433      	add	r3, r6
 8001c1e:	60ab      	str	r3, [r5, #8]
 8001c20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8001c24:	f7ff ff5e 	bl	8001ae4 <HAL_RCC_GetPCLK1Freq>
 8001c28:	fb04 f300 	mul.w	r3, r4, r0
 8001c2c:	f8d9 7004 	ldr.w	r7, [r9, #4]
 8001c30:	f04f 0864 	mov.w	r8, #100	; 0x64
 8001c34:	007f      	lsls	r7, r7, #1
 8001c36:	fbb3 f3f7 	udiv	r3, r3, r7
 8001c3a:	fbb3 f3f8 	udiv	r3, r3, r8
 8001c3e:	011f      	lsls	r7, r3, #4
 8001c40:	f7ff ff50 	bl	8001ae4 <HAL_RCC_GetPCLK1Freq>
 8001c44:	4360      	muls	r0, r4
 8001c46:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8001c4a:	005b      	lsls	r3, r3, #1
 8001c4c:	fbb0 f6f3 	udiv	r6, r0, r3
 8001c50:	f7ff ff48 	bl	8001ae4 <HAL_RCC_GetPCLK1Freq>
 8001c54:	4360      	muls	r0, r4
 8001c56:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8001c5a:	005b      	lsls	r3, r3, #1
 8001c5c:	fbb0 f3f3 	udiv	r3, r0, r3
 8001c60:	fbb3 f3f8 	udiv	r3, r3, r8
 8001c64:	fb08 6313 	mls	r3, r8, r3, r6
 8001c68:	00db      	lsls	r3, r3, #3
 8001c6a:	3332      	adds	r3, #50	; 0x32
 8001c6c:	fbb3 f3f8 	udiv	r3, r3, r8
 8001c70:	005b      	lsls	r3, r3, #1
 8001c72:	f403 76f8 	and.w	r6, r3, #496	; 0x1f0
 8001c76:	f7ff ff35 	bl	8001ae4 <HAL_RCC_GetPCLK1Freq>
 8001c7a:	4360      	muls	r0, r4
 8001c7c:	f8d9 2004 	ldr.w	r2, [r9, #4]
 8001c80:	0052      	lsls	r2, r2, #1
 8001c82:	fbb0 faf2 	udiv	sl, r0, r2
 8001c86:	f7ff ff2d 	bl	8001ae4 <HAL_RCC_GetPCLK1Freq>
 8001c8a:	e7b6      	b.n	8001bfa <UART_SetConfig+0xb6>
    if((huart->Instance == USART1))
 8001c8c:	429d      	cmp	r5, r3
 8001c8e:	f04f 0419 	mov.w	r4, #25
 8001c92:	d143      	bne.n	8001d1c <UART_SetConfig+0x1d8>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8001c94:	f7ff ff3e 	bl	8001b14 <HAL_RCC_GetPCLK2Freq>
 8001c98:	fb04 f300 	mul.w	r3, r4, r0
 8001c9c:	f8d9 6004 	ldr.w	r6, [r9, #4]
 8001ca0:	f04f 0864 	mov.w	r8, #100	; 0x64
 8001ca4:	00b6      	lsls	r6, r6, #2
 8001ca6:	fbb3 f3f6 	udiv	r3, r3, r6
 8001caa:	fbb3 f3f8 	udiv	r3, r3, r8
 8001cae:	011e      	lsls	r6, r3, #4
 8001cb0:	f7ff ff30 	bl	8001b14 <HAL_RCC_GetPCLK2Freq>
 8001cb4:	4360      	muls	r0, r4
 8001cb6:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8001cba:	009b      	lsls	r3, r3, #2
 8001cbc:	fbb0 f7f3 	udiv	r7, r0, r3
 8001cc0:	f7ff ff28 	bl	8001b14 <HAL_RCC_GetPCLK2Freq>
 8001cc4:	4360      	muls	r0, r4
 8001cc6:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8001cca:	009b      	lsls	r3, r3, #2
 8001ccc:	fbb0 f3f3 	udiv	r3, r0, r3
 8001cd0:	fbb3 f3f8 	udiv	r3, r3, r8
 8001cd4:	fb08 7313 	mls	r3, r8, r3, r7
 8001cd8:	011b      	lsls	r3, r3, #4
 8001cda:	3332      	adds	r3, #50	; 0x32
 8001cdc:	fbb3 f3f8 	udiv	r3, r3, r8
 8001ce0:	f003 07f0 	and.w	r7, r3, #240	; 0xf0
 8001ce4:	f7ff ff16 	bl	8001b14 <HAL_RCC_GetPCLK2Freq>
 8001ce8:	4360      	muls	r0, r4
 8001cea:	f8d9 2004 	ldr.w	r2, [r9, #4]
 8001cee:	0092      	lsls	r2, r2, #2
 8001cf0:	fbb0 faf2 	udiv	sl, r0, r2
 8001cf4:	f7ff ff0e 	bl	8001b14 <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8001cf8:	4360      	muls	r0, r4
 8001cfa:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8001cfe:	009b      	lsls	r3, r3, #2
 8001d00:	fbb0 f3f3 	udiv	r3, r0, r3
 8001d04:	fbb3 f3f8 	udiv	r3, r3, r8
 8001d08:	fb08 a313 	mls	r3, r8, r3, sl
 8001d0c:	011b      	lsls	r3, r3, #4
 8001d0e:	3332      	adds	r3, #50	; 0x32
 8001d10:	fbb3 f3f8 	udiv	r3, r3, r8
 8001d14:	f003 030f 	and.w	r3, r3, #15
 8001d18:	433b      	orrs	r3, r7
 8001d1a:	e77f      	b.n	8001c1c <UART_SetConfig+0xd8>
 8001d1c:	f7ff fee2 	bl	8001ae4 <HAL_RCC_GetPCLK1Freq>
 8001d20:	fb04 f300 	mul.w	r3, r4, r0
 8001d24:	f8d9 6004 	ldr.w	r6, [r9, #4]
 8001d28:	f04f 0864 	mov.w	r8, #100	; 0x64
 8001d2c:	00b6      	lsls	r6, r6, #2
 8001d2e:	fbb3 f3f6 	udiv	r3, r3, r6
 8001d32:	fbb3 f3f8 	udiv	r3, r3, r8
 8001d36:	011e      	lsls	r6, r3, #4
 8001d38:	f7ff fed4 	bl	8001ae4 <HAL_RCC_GetPCLK1Freq>
 8001d3c:	4360      	muls	r0, r4
 8001d3e:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8001d42:	009b      	lsls	r3, r3, #2
 8001d44:	fbb0 f7f3 	udiv	r7, r0, r3
 8001d48:	f7ff fecc 	bl	8001ae4 <HAL_RCC_GetPCLK1Freq>
 8001d4c:	4360      	muls	r0, r4
 8001d4e:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8001d52:	009b      	lsls	r3, r3, #2
 8001d54:	fbb0 f3f3 	udiv	r3, r0, r3
 8001d58:	fbb3 f3f8 	udiv	r3, r3, r8
 8001d5c:	fb08 7313 	mls	r3, r8, r3, r7
 8001d60:	011b      	lsls	r3, r3, #4
 8001d62:	3332      	adds	r3, #50	; 0x32
 8001d64:	fbb3 f3f8 	udiv	r3, r3, r8
 8001d68:	f003 07f0 	and.w	r7, r3, #240	; 0xf0
 8001d6c:	f7ff feba 	bl	8001ae4 <HAL_RCC_GetPCLK1Freq>
 8001d70:	4360      	muls	r0, r4
 8001d72:	f8d9 2004 	ldr.w	r2, [r9, #4]
 8001d76:	0092      	lsls	r2, r2, #2
 8001d78:	fbb0 faf2 	udiv	sl, r0, r2
 8001d7c:	f7ff feb2 	bl	8001ae4 <HAL_RCC_GetPCLK1Freq>
 8001d80:	e7ba      	b.n	8001cf8 <UART_SetConfig+0x1b4>
 8001d82:	bf00      	nop
 8001d84:	40013800 	.word	0x40013800

08001d88 <UART_WaitOnFlagUntilTimeout.constprop.1>:
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Timeout)
 8001d88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001d8a:	4604      	mov	r4, r0
 8001d8c:	460e      	mov	r6, r1
 8001d8e:	4615      	mov	r5, r2
  tickstart = HAL_GetTick();
 8001d90:	f7fe fe18 	bl	80009c4 <HAL_GetTick>
 8001d94:	4607      	mov	r7, r0
    while(__HAL_UART_GET_FLAG(huart, Flag) == RESET)
 8001d96:	6822      	ldr	r2, [r4, #0]
 8001d98:	6813      	ldr	r3, [r2, #0]
 8001d9a:	ea36 0303 	bics.w	r3, r6, r3
 8001d9e:	d101      	bne.n	8001da4 <UART_WaitOnFlagUntilTimeout.constprop.1+0x1c>
  return HAL_OK;
 8001da0:	2000      	movs	r0, #0
}
 8001da2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if(Timeout != HAL_MAX_DELAY)
 8001da4:	1c6b      	adds	r3, r5, #1
 8001da6:	d0f7      	beq.n	8001d98 <UART_WaitOnFlagUntilTimeout.constprop.1+0x10>
        if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 8001da8:	b9c5      	cbnz	r5, 8001ddc <UART_WaitOnFlagUntilTimeout.constprop.1+0x54>
          __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8001daa:	6823      	ldr	r3, [r4, #0]
          return HAL_TIMEOUT;
 8001dac:	2003      	movs	r0, #3
          __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8001dae:	68da      	ldr	r2, [r3, #12]
 8001db0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001db4:	60da      	str	r2, [r3, #12]
          __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8001db6:	68da      	ldr	r2, [r3, #12]
 8001db8:	f022 0220 	bic.w	r2, r2, #32
 8001dbc:	60da      	str	r2, [r3, #12]
          __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8001dbe:	68da      	ldr	r2, [r3, #12]
 8001dc0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001dc4:	60da      	str	r2, [r3, #12]
          __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8001dc6:	695a      	ldr	r2, [r3, #20]
 8001dc8:	f022 0201 	bic.w	r2, r2, #1
 8001dcc:	615a      	str	r2, [r3, #20]
          huart->State= HAL_UART_STATE_READY;
 8001dce:	2301      	movs	r3, #1
 8001dd0:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
          __HAL_UNLOCK(huart);
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
 8001dda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 8001ddc:	f7fe fdf2 	bl	80009c4 <HAL_GetTick>
 8001de0:	1bc0      	subs	r0, r0, r7
 8001de2:	4285      	cmp	r5, r0
 8001de4:	d2d7      	bcs.n	8001d96 <UART_WaitOnFlagUntilTimeout.constprop.1+0xe>
 8001de6:	e7e0      	b.n	8001daa <UART_WaitOnFlagUntilTimeout.constprop.1+0x22>

08001de8 <HAL_UART_Init>:
{
 8001de8:	b510      	push	{r4, lr}
  if(huart == NULL)
 8001dea:	4604      	mov	r4, r0
 8001dec:	b330      	cbz	r0, 8001e3c <HAL_UART_Init+0x54>
  if(huart->State == HAL_UART_STATE_RESET)
 8001dee:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8001df2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001df6:	b91b      	cbnz	r3, 8001e00 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8001df8:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8001dfc:	f000 fad8 	bl	80023b0 <HAL_UART_MspInit>
  huart->State = HAL_UART_STATE_BUSY;
 8001e00:	2302      	movs	r3, #2
  __HAL_UART_DISABLE(huart);
 8001e02:	6822      	ldr	r2, [r4, #0]
  huart->State = HAL_UART_STATE_BUSY;
 8001e04:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8001e08:	68d3      	ldr	r3, [r2, #12]
  UART_SetConfig(huart);
 8001e0a:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 8001e0c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001e10:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8001e12:	f7ff fe97 	bl	8001b44 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001e16:	6823      	ldr	r3, [r4, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001e18:	2000      	movs	r0, #0
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001e1a:	691a      	ldr	r2, [r3, #16]
 8001e1c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001e20:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001e22:	695a      	ldr	r2, [r3, #20]
 8001e24:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001e28:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8001e2a:	68da      	ldr	r2, [r3, #12]
 8001e2c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001e30:	60da      	str	r2, [r3, #12]
  huart->State= HAL_UART_STATE_READY;
 8001e32:	2301      	movs	r3, #1
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001e34:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->State= HAL_UART_STATE_READY;
 8001e36:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  return HAL_OK;
 8001e3a:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001e3c:	2001      	movs	r0, #1
}
 8001e3e:	bd10      	pop	{r4, pc}

08001e40 <HAL_UART_Transmit>:
{
 8001e40:	b570      	push	{r4, r5, r6, lr}
 8001e42:	460d      	mov	r5, r1
  tmp_state = huart->State;
 8001e44:	f890 1039 	ldrb.w	r1, [r0, #57]	; 0x39
{
 8001e48:	4604      	mov	r4, r0
  tmp_state = huart->State;
 8001e4a:	b2c9      	uxtb	r1, r1
  if((tmp_state == HAL_UART_STATE_READY) || (tmp_state == HAL_UART_STATE_BUSY_RX))
 8001e4c:	2901      	cmp	r1, #1
{
 8001e4e:	461e      	mov	r6, r3
  if((tmp_state == HAL_UART_STATE_READY) || (tmp_state == HAL_UART_STATE_BUSY_RX))
 8001e50:	d001      	beq.n	8001e56 <HAL_UART_Transmit+0x16>
 8001e52:	2922      	cmp	r1, #34	; 0x22
 8001e54:	d14d      	bne.n	8001ef2 <HAL_UART_Transmit+0xb2>
    if((pData == NULL) || (Size == 0))
 8001e56:	2d00      	cmp	r5, #0
 8001e58:	d049      	beq.n	8001eee <HAL_UART_Transmit+0xae>
 8001e5a:	2a00      	cmp	r2, #0
 8001e5c:	d047      	beq.n	8001eee <HAL_UART_Transmit+0xae>
    __HAL_LOCK(huart);
 8001e5e:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8001e62:	2b01      	cmp	r3, #1
 8001e64:	d045      	beq.n	8001ef2 <HAL_UART_Transmit+0xb2>
 8001e66:	2301      	movs	r3, #1
 8001e68:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	63e3      	str	r3, [r4, #60]	; 0x3c
    if(huart->State == HAL_UART_STATE_BUSY_RX) 
 8001e70:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
    huart->TxXferSize = Size;
 8001e74:	84a2      	strh	r2, [r4, #36]	; 0x24
    if(huart->State == HAL_UART_STATE_BUSY_RX) 
 8001e76:	2b22      	cmp	r3, #34	; 0x22
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
 8001e78:	bf0c      	ite	eq
 8001e7a:	2332      	moveq	r3, #50	; 0x32
      huart->State = HAL_UART_STATE_BUSY_TX;
 8001e7c:	2312      	movne	r3, #18
    huart->TxXferCount = Size;
 8001e7e:	84e2      	strh	r2, [r4, #38]	; 0x26
      huart->State = HAL_UART_STATE_BUSY_TX;
 8001e80:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    while(huart->TxXferCount > 0)
 8001e84:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 8001e86:	b98a      	cbnz	r2, 8001eac <HAL_UART_Transmit+0x6c>
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, Timeout) != HAL_OK)
 8001e88:	4632      	mov	r2, r6
 8001e8a:	2140      	movs	r1, #64	; 0x40
 8001e8c:	4620      	mov	r0, r4
 8001e8e:	f7ff ff7b 	bl	8001d88 <UART_WaitOnFlagUntilTimeout.constprop.1>
 8001e92:	b9c0      	cbnz	r0, 8001ec6 <HAL_UART_Transmit+0x86>
    if(huart->State == HAL_UART_STATE_BUSY_TX_RX) 
 8001e94:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
 8001e98:	2b32      	cmp	r3, #50	; 0x32
      huart->State = HAL_UART_STATE_BUSY_RX;
 8001e9a:	bf0c      	ite	eq
 8001e9c:	2322      	moveq	r3, #34	; 0x22
      huart->State = HAL_UART_STATE_READY;
 8001e9e:	2301      	movne	r3, #1
 8001ea0:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    __HAL_UNLOCK(huart);
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
    return HAL_OK;
 8001eaa:	bd70      	pop	{r4, r5, r6, pc}
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001eac:	68a3      	ldr	r3, [r4, #8]
      huart->TxXferCount--;
 8001eae:	3a01      	subs	r2, #1
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001eb0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
      huart->TxXferCount--;
 8001eb4:	84e2      	strh	r2, [r4, #38]	; 0x26
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, Timeout) != HAL_OK)
 8001eb6:	f04f 0180 	mov.w	r1, #128	; 0x80
 8001eba:	4632      	mov	r2, r6
 8001ebc:	4620      	mov	r0, r4
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001ebe:	d10d      	bne.n	8001edc <HAL_UART_Transmit+0x9c>
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, Timeout) != HAL_OK)
 8001ec0:	f7ff ff62 	bl	8001d88 <UART_WaitOnFlagUntilTimeout.constprop.1>
 8001ec4:	b108      	cbz	r0, 8001eca <HAL_UART_Transmit+0x8a>
          return HAL_TIMEOUT;
 8001ec6:	2003      	movs	r0, #3
 8001ec8:	bd70      	pop	{r4, r5, r6, pc}
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8001eca:	882b      	ldrh	r3, [r5, #0]
 8001ecc:	6822      	ldr	r2, [r4, #0]
 8001ece:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001ed2:	6053      	str	r3, [r2, #4]
        if(huart->Init.Parity == UART_PARITY_NONE)
 8001ed4:	6923      	ldr	r3, [r4, #16]
 8001ed6:	b943      	cbnz	r3, 8001eea <HAL_UART_Transmit+0xaa>
          pData +=2;
 8001ed8:	3502      	adds	r5, #2
 8001eda:	e7d3      	b.n	8001e84 <HAL_UART_Transmit+0x44>
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, Timeout) != HAL_OK)
 8001edc:	f7ff ff54 	bl	8001d88 <UART_WaitOnFlagUntilTimeout.constprop.1>
 8001ee0:	2800      	cmp	r0, #0
 8001ee2:	d1f0      	bne.n	8001ec6 <HAL_UART_Transmit+0x86>
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8001ee4:	6823      	ldr	r3, [r4, #0]
 8001ee6:	782a      	ldrb	r2, [r5, #0]
 8001ee8:	605a      	str	r2, [r3, #4]
 8001eea:	3501      	adds	r5, #1
 8001eec:	e7ca      	b.n	8001e84 <HAL_UART_Transmit+0x44>
      return  HAL_ERROR;
 8001eee:	2001      	movs	r0, #1
 8001ef0:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_BUSY;
 8001ef2:	2002      	movs	r0, #2
}
 8001ef4:	bd70      	pop	{r4, r5, r6, pc}
	...

08001ef8 <send_message>:
	}
	/* USER CODE END 3 */

}

void send_message(char* caption, double value, char* unit){
 8001ef8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8001efa:	4604      	mov	r4, r0
 8001efc:	4619      	mov	r1, r3
 8001efe:	4610      	mov	r0, r2
	lower = trunc(value * 100);
 8001f00:	4b1a      	ldr	r3, [pc, #104]	; (8001f6c <send_message+0x74>)
 8001f02:	2200      	movs	r2, #0
 8001f04:	f7fe fafc 	bl	8000500 <__aeabi_dmul>
 8001f08:	f7fe fd0c 	bl	8000924 <__aeabi_d2iz>
	upper = lower/100;
 8001f0c:	2164      	movs	r1, #100	; 0x64
 8001f0e:	fb90 f3f1 	sdiv	r3, r0, r1
 8001f12:	4a17      	ldr	r2, [pc, #92]	; (8001f70 <send_message+0x78>)
void send_message(char* caption, double value, char* unit){
 8001f14:	9d06      	ldr	r5, [sp, #24]
	upper = lower/100;
 8001f16:	6013      	str	r3, [r2, #0]
	lower = abs(lower)%100;
 8001f18:	ea80 72e0 	eor.w	r2, r0, r0, asr #31
 8001f1c:	eba2 72e0 	sub.w	r2, r2, r0, asr #31
 8001f20:	fb92 f0f1 	sdiv	r0, r2, r1
 8001f24:	fb01 2010 	mls	r0, r1, r0, r2
 8001f28:	4a12      	ldr	r2, [pc, #72]	; (8001f74 <send_message+0x7c>)
	if (lower > 9)
 8001f2a:	2809      	cmp	r0, #9
		sprintf(data, "%s: %3d.%d %2s \n", caption, upper, lower, unit);
 8001f2c:	bfcc      	ite	gt
 8001f2e:	4912      	ldrgt	r1, [pc, #72]	; (8001f78 <send_message+0x80>)
	else
		sprintf(data, "%s: %3d.0%d %2s \n", caption, upper, lower, unit);
 8001f30:	4912      	ldrle	r1, [pc, #72]	; (8001f7c <send_message+0x84>)
	lower = abs(lower)%100;
 8001f32:	6010      	str	r0, [r2, #0]
		sprintf(data, "%s: %3d.%d %2s \n", caption, upper, lower, unit);
 8001f34:	e88d 0021 	stmia.w	sp, {r0, r5}
 8001f38:	4622      	mov	r2, r4
		sprintf(data, "%s: %3d.0%d %2s \n", caption, upper, lower, unit);
 8001f3a:	4811      	ldr	r0, [pc, #68]	; (8001f80 <send_message+0x88>)
 8001f3c:	f000 fad4 	bl	80024e8 <siprintf>
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8001f40:	2201      	movs	r2, #1
 8001f42:	2120      	movs	r1, #32
 8001f44:	480f      	ldr	r0, [pc, #60]	; (8001f84 <send_message+0x8c>)
 8001f46:	f7ff f909 	bl	800115c <HAL_GPIO_WritePin>
	HAL_UART_Transmit(&huart2, data, (uint16_t) strlen(data), timeout);
 8001f4a:	480d      	ldr	r0, [pc, #52]	; (8001f80 <send_message+0x88>)
 8001f4c:	f7fe f918 	bl	8000180 <strlen>
 8001f50:	2332      	movs	r3, #50	; 0x32
 8001f52:	b282      	uxth	r2, r0
 8001f54:	490a      	ldr	r1, [pc, #40]	; (8001f80 <send_message+0x88>)
 8001f56:	480c      	ldr	r0, [pc, #48]	; (8001f88 <send_message+0x90>)
 8001f58:	f7ff ff72 	bl	8001e40 <HAL_UART_Transmit>
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	2120      	movs	r1, #32
 8001f60:	4808      	ldr	r0, [pc, #32]	; (8001f84 <send_message+0x8c>)
}
 8001f62:	b003      	add	sp, #12
 8001f64:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001f68:	f7ff b8f8 	b.w	800115c <HAL_GPIO_WritePin>
 8001f6c:	40590000 	.word	0x40590000
 8001f70:	20000104 	.word	0x20000104
 8001f74:	200000b4 	.word	0x200000b4
 8001f78:	08002d9d 	.word	0x08002d9d
 8001f7c:	08002dae 	.word	0x08002dae
 8001f80:	200000b8 	.word	0x200000b8
 8001f84:	40020000 	.word	0x40020000
 8001f88:	20000108 	.word	0x20000108

08001f8c <SystemClock_Config>:
	RCC_OscInitTypeDef RCC_OscInitStruct;
	RCC_ClkInitTypeDef RCC_ClkInitStruct;

	/**Configure the main internal regulator output voltage
	 */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001f8c:	4a1e      	ldr	r2, [pc, #120]	; (8002008 <SystemClock_Config+0x7c>)
void SystemClock_Config(void) {
 8001f8e:	b510      	push	{r4, lr}
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001f90:	6813      	ldr	r3, [r2, #0]
void SystemClock_Config(void) {
 8001f92:	b092      	sub	sp, #72	; 0x48
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001f94:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 8001f98:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001f9c:	6013      	str	r3, [r2, #0]

	/**Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001f9e:	2302      	movs	r3, #2
 8001fa0:	9305      	str	r3, [sp, #20]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
	RCC_OscInitStruct.HSICalibrationValue = 16;
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001fa2:	930e      	str	r3, [sp, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	930f      	str	r3, [sp, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8001fa8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001fac:	2401      	movs	r4, #1
	RCC_OscInitStruct.HSICalibrationValue = 16;
 8001fae:	2210      	movs	r2, #16
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8001fb0:	9310      	str	r3, [sp, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV3;
 8001fb2:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8001fb6:	a805      	add	r0, sp, #20
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001fb8:	9408      	str	r4, [sp, #32]
	RCC_OscInitStruct.HSICalibrationValue = 16;
 8001fba:	9209      	str	r2, [sp, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV3;
 8001fbc:	9311      	str	r3, [sp, #68]	; 0x44
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8001fbe:	f7ff f913 	bl	80011e8 <HAL_RCC_OscConfig>
 8001fc2:	b100      	cbz	r0, 8001fc6 <SystemClock_Config+0x3a>
 8001fc4:	e7fe      	b.n	8001fc4 <SystemClock_Config+0x38>

	/**Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001fc6:	220f      	movs	r2, #15
 8001fc8:	2303      	movs	r3, #3
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001fca:	9002      	str	r0, [sp, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001fcc:	9003      	str	r0, [sp, #12]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001fce:	9004      	str	r0, [sp, #16]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK) {
 8001fd0:	4621      	mov	r1, r4
 8001fd2:	4668      	mov	r0, sp
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001fd4:	e88d 000c 	stmia.w	sp, {r2, r3}
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK) {
 8001fd8:	f7ff fca0 	bl	800191c <HAL_RCC_ClockConfig>
 8001fdc:	4604      	mov	r4, r0
 8001fde:	b100      	cbz	r0, 8001fe2 <SystemClock_Config+0x56>
 8001fe0:	e7fe      	b.n	8001fe0 <SystemClock_Config+0x54>
		_Error_Handler(__FILE__, __LINE__);
	}

	/**Configure the Systick interrupt time
	 */
	HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / 1000);
 8001fe2:	f7ff fd79 	bl	8001ad8 <HAL_RCC_GetHCLKFreq>
 8001fe6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001fea:	fbb0 f0f3 	udiv	r0, r0, r3
 8001fee:	f7fe ffbb 	bl	8000f68 <HAL_SYSTICK_Config>

	/**Configure the Systick
	 */
	HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8001ff2:	2004      	movs	r0, #4
 8001ff4:	f7fe ffce 	bl	8000f94 <HAL_SYSTICK_CLKSourceConfig>

	/* SysTick_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8001ff8:	4622      	mov	r2, r4
 8001ffa:	4621      	mov	r1, r4
 8001ffc:	f04f 30ff 	mov.w	r0, #4294967295
 8002000:	f7fe ff7e 	bl	8000f00 <HAL_NVIC_SetPriority>
}
 8002004:	b012      	add	sp, #72	; 0x48
 8002006:	bd10      	pop	{r4, pc}
 8002008:	40007000 	.word	0x40007000

0800200c <MX_ADC_Init_Channel>:
	if (HAL_ADC_Init(&hadc) != HAL_OK) {
		_Error_Handler(__FILE__, __LINE__);
	}
}

void MX_ADC_Init_Channel(uint32_t channel){
 800200c:	b508      	push	{r3, lr}
	/**Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = channel;
	sConfig.Rank = ADC_REGULAR_RANK_1;
 800200e:	2301      	movs	r3, #1
	sConfig.Channel = channel;
 8002010:	4905      	ldr	r1, [pc, #20]	; (8002028 <MX_ADC_Init_Channel+0x1c>)
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8002012:	604b      	str	r3, [r1, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_4CYCLES;
 8002014:	2300      	movs	r3, #0
	sConfig.Channel = channel;
 8002016:	6008      	str	r0, [r1, #0]
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 8002018:	4804      	ldr	r0, [pc, #16]	; (800202c <MX_ADC_Init_Channel+0x20>)
	sConfig.SamplingTime = ADC_SAMPLETIME_4CYCLES;
 800201a:	608b      	str	r3, [r1, #8]
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800201c:	f7fe fdfa 	bl	8000c14 <HAL_ADC_ConfigChannel>
 8002020:	b100      	cbz	r0, 8002024 <MX_ADC_Init_Channel+0x18>
 8002022:	e7fe      	b.n	8002022 <MX_ADC_Init_Channel+0x16>
 8002024:	bd08      	pop	{r3, pc}
 8002026:	bf00      	nop
 8002028:	200000f8 	.word	0x200000f8
 800202c:	20000148 	.word	0x20000148

08002030 <main>:
int main(void) {
 8002030:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 8002034:	b08d      	sub	sp, #52	; 0x34
	HAL_Init();
 8002036:	f7fe fcb1 	bl	800099c <HAL_Init>
	SystemClock_Config();
 800203a:	f7ff ffa7 	bl	8001f8c <SystemClock_Config>
static void MX_GPIO_Init(void) {

	GPIO_InitTypeDef GPIO_InitStruct;

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE()
 800203e:	4b8e      	ldr	r3, [pc, #568]	; (8002278 <main+0x248>)
	;
	__HAL_RCC_GPIOB_CLK_ENABLE()
	;

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8002040:	2120      	movs	r1, #32
	__HAL_RCC_GPIOC_CLK_ENABLE()
 8002042:	69da      	ldr	r2, [r3, #28]
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8002044:	488d      	ldr	r0, [pc, #564]	; (800227c <main+0x24c>)
	__HAL_RCC_GPIOC_CLK_ENABLE()
 8002046:	f042 0204 	orr.w	r2, r2, #4
 800204a:	61da      	str	r2, [r3, #28]
 800204c:	69da      	ldr	r2, [r3, #28]

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800204e:	2400      	movs	r4, #0
	__HAL_RCC_GPIOC_CLK_ENABLE()
 8002050:	f002 0204 	and.w	r2, r2, #4
 8002054:	9203      	str	r2, [sp, #12]
 8002056:	9a03      	ldr	r2, [sp, #12]
	__HAL_RCC_GPIOH_CLK_ENABLE()
 8002058:	69da      	ldr	r2, [r3, #28]
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);

	/*Configure GPIO pin : LD2_Pin */
	GPIO_InitStruct.Pin = LD2_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800205a:	2501      	movs	r5, #1
	__HAL_RCC_GPIOH_CLK_ENABLE()
 800205c:	f042 0220 	orr.w	r2, r2, #32
 8002060:	61da      	str	r2, [r3, #28]
 8002062:	69da      	ldr	r2, [r3, #28]
 8002064:	f002 0220 	and.w	r2, r2, #32
 8002068:	9204      	str	r2, [sp, #16]
 800206a:	9a04      	ldr	r2, [sp, #16]
	__HAL_RCC_GPIOA_CLK_ENABLE()
 800206c:	69da      	ldr	r2, [r3, #28]
 800206e:	f042 0201 	orr.w	r2, r2, #1
 8002072:	61da      	str	r2, [r3, #28]
 8002074:	69da      	ldr	r2, [r3, #28]
 8002076:	f002 0201 	and.w	r2, r2, #1
 800207a:	9205      	str	r2, [sp, #20]
 800207c:	9a05      	ldr	r2, [sp, #20]
	__HAL_RCC_GPIOB_CLK_ENABLE()
 800207e:	69da      	ldr	r2, [r3, #28]
 8002080:	f042 0202 	orr.w	r2, r2, #2
 8002084:	61da      	str	r2, [r3, #28]
 8002086:	69db      	ldr	r3, [r3, #28]
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8002088:	2200      	movs	r2, #0
	__HAL_RCC_GPIOB_CLK_ENABLE()
 800208a:	f003 0302 	and.w	r3, r3, #2
 800208e:	9306      	str	r3, [sp, #24]
 8002090:	9b06      	ldr	r3, [sp, #24]
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8002092:	f7ff f863 	bl	800115c <HAL_GPIO_WritePin>
	GPIO_InitStruct.Pin = B1_Pin;
 8002096:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800209a:	9307      	str	r3, [sp, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800209c:	4b78      	ldr	r3, [pc, #480]	; (8002280 <main+0x250>)
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800209e:	a907      	add	r1, sp, #28
 80020a0:	4878      	ldr	r0, [pc, #480]	; (8002284 <main+0x254>)
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80020a2:	9308      	str	r3, [sp, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020a4:	9409      	str	r4, [sp, #36]	; 0x24
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80020a6:	f7fe ff87 	bl	8000fb8 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = LD2_Pin;
 80020aa:	2320      	movs	r3, #32
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
	HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80020ac:	4873      	ldr	r0, [pc, #460]	; (800227c <main+0x24c>)
 80020ae:	a907      	add	r1, sp, #28
	GPIO_InitStruct.Pin = LD2_Pin;
 80020b0:	9307      	str	r3, [sp, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020b2:	9508      	str	r5, [sp, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020b4:	9409      	str	r4, [sp, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020b6:	940a      	str	r4, [sp, #40]	; 0x28
	HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80020b8:	f7fe ff7e 	bl	8000fb8 <HAL_GPIO_Init>
	huart2.Init.BaudRate = 115200;
 80020bc:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
	huart2.Instance = USART2;
 80020c0:	4871      	ldr	r0, [pc, #452]	; (8002288 <main+0x258>)
	huart2.Init.BaudRate = 115200;
 80020c2:	4a72      	ldr	r2, [pc, #456]	; (800228c <main+0x25c>)
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80020c4:	6084      	str	r4, [r0, #8]
	huart2.Init.BaudRate = 115200;
 80020c6:	e880 000c 	stmia.w	r0, {r2, r3}
	huart2.Init.Mode = UART_MODE_TX_RX;
 80020ca:	230c      	movs	r3, #12
	huart2.Init.StopBits = UART_STOPBITS_1;
 80020cc:	60c4      	str	r4, [r0, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 80020ce:	6104      	str	r4, [r0, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 80020d0:	6143      	str	r3, [r0, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80020d2:	6184      	str	r4, [r0, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80020d4:	61c4      	str	r4, [r0, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 80020d6:	f7ff fe87 	bl	8001de8 <HAL_UART_Init>
 80020da:	b100      	cbz	r0, 80020de <main+0xae>
 80020dc:	e7fe      	b.n	80020dc <main+0xac>
	hadc.Instance = ADC1;
 80020de:	4b6c      	ldr	r3, [pc, #432]	; (8002290 <main+0x260>)
 80020e0:	4a6c      	ldr	r2, [pc, #432]	; (8002294 <main+0x264>)
	hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80020e2:	6058      	str	r0, [r3, #4]
	hadc.Instance = ADC1;
 80020e4:	601a      	str	r2, [r3, #0]
	hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80020e6:	2210      	movs	r2, #16
	hadc.Init.Resolution = ADC_RESOLUTION_12B;
 80020e8:	6098      	str	r0, [r3, #8]
	hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80020ea:	60d8      	str	r0, [r3, #12]
	hadc.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80020ec:	6118      	str	r0, [r3, #16]
	hadc.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80020ee:	6158      	str	r0, [r3, #20]
	hadc.Init.LowPowerAutoWait = ADC_AUTOWAIT_DISABLE;
 80020f0:	6198      	str	r0, [r3, #24]
	hadc.Init.LowPowerAutoPowerOff = ADC_AUTOPOWEROFF_DISABLE;
 80020f2:	61d8      	str	r0, [r3, #28]
	hadc.Init.ChannelsBank = ADC_CHANNELS_BANK_A;
 80020f4:	6218      	str	r0, [r3, #32]
	hadc.Init.ContinuousConvMode = DISABLE;
 80020f6:	6258      	str	r0, [r3, #36]	; 0x24
	hadc.Init.DiscontinuousConvMode = DISABLE;
 80020f8:	62d8      	str	r0, [r3, #44]	; 0x2c
	hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80020fa:	6398      	str	r0, [r3, #56]	; 0x38
	hadc.Init.DMAContinuousRequests = DISABLE;
 80020fc:	63d8      	str	r0, [r3, #60]	; 0x3c
	if (HAL_ADC_Init(&hadc) != HAL_OK) {
 80020fe:	4618      	mov	r0, r3
	hadc.Init.NbrOfConversion = 1;
 8002100:	629d      	str	r5, [r3, #40]	; 0x28
	hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002102:	635a      	str	r2, [r3, #52]	; 0x34
	if (HAL_ADC_Init(&hadc) != HAL_OK) {
 8002104:	f7fe fc72 	bl	80009ec <HAL_ADC_Init>
 8002108:	2800      	cmp	r0, #0
 800210a:	d173      	bne.n	80021f4 <main+0x1c4>
		temperature = ((double)adc_result)/4096*100 - 50;
 800210c:	2600      	movs	r6, #0
			result[i] = adc_result;
 800210e:	4c62      	ldr	r4, [pc, #392]	; (8002298 <main+0x268>)
		temperature = ((double)adc_result)/4096*100 - 50;
 8002110:	4f62      	ldr	r7, [pc, #392]	; (800229c <main+0x26c>)
		for (i=0; i<5; i++){
 8002112:	4d63      	ldr	r5, [pc, #396]	; (80022a0 <main+0x270>)
		MX_ADC_Init_Channel(ADC_CHANNEL_0);
 8002114:	2000      	movs	r0, #0
 8002116:	f7ff ff79 	bl	800200c <MX_ADC_Init_Channel>
		for (i=0; i<5; i++){
 800211a:	2300      	movs	r3, #0
 800211c:	46a8      	mov	r8, r5
			HAL_ADC_Start(&hadc);
 800211e:	f8df 9170 	ldr.w	r9, [pc, #368]	; 8002290 <main+0x260>
			stt = HAL_ADC_PollForConversion(&hadc, timeout);
 8002122:	f8df b194 	ldr.w	fp, [pc, #404]	; 80022b8 <main+0x288>
 8002126:	f8df a17c 	ldr.w	sl, [pc, #380]	; 80022a4 <main+0x274>
		for (i=0; i<5; i++){
 800212a:	602b      	str	r3, [r5, #0]
 800212c:	f8d8 3000 	ldr.w	r3, [r8]
 8002130:	2b04      	cmp	r3, #4
 8002132:	dd60      	ble.n	80021f6 <main+0x1c6>
		for (i=0; i<5; i++)
 8002134:	2300      	movs	r3, #0
 8002136:	4619      	mov	r1, r3
 8002138:	461a      	mov	r2, r3
 800213a:	f8df c188 	ldr.w	ip, [pc, #392]	; 80022c4 <main+0x294>
 800213e:	f8df 8188 	ldr.w	r8, [pc, #392]	; 80022c8 <main+0x298>
 8002142:	f8dc e000 	ldr.w	lr, [ip]
 8002146:	f8d8 0000 	ldr.w	r0, [r8]
 800214a:	602b      	str	r3, [r5, #0]
 800214c:	2b05      	cmp	r3, #5
 800214e:	4699      	mov	r9, r3
 8002150:	d172      	bne.n	8002238 <main+0x208>
 8002152:	2a00      	cmp	r2, #0
 8002154:	f000 8087 	beq.w	8002266 <main+0x236>
 8002158:	f8c8 0000 	str.w	r0, [r8]
 800215c:	b111      	cbz	r1, 8002164 <main+0x134>
 800215e:	f8cc e000 	str.w	lr, [ip]
 8002162:	b10a      	cbz	r2, 8002168 <main+0x138>
 8002164:	2305      	movs	r3, #5
 8002166:	602b      	str	r3, [r5, #0]
		adc_result = result[2];
 8002168:	68a0      	ldr	r0, [r4, #8]
 800216a:	4d4e      	ldr	r5, [pc, #312]	; (80022a4 <main+0x274>)
		temperature = ((double)adc_result)/4096*100 - 50;
 800216c:	f8df 815c 	ldr.w	r8, [pc, #348]	; 80022cc <main+0x29c>
		adc_result = result[2];
 8002170:	6028      	str	r0, [r5, #0]
		temperature = ((double)adc_result)/4096*100 - 50;
 8002172:	f7fe f94f 	bl	8000414 <__aeabi_ui2d>
 8002176:	4632      	mov	r2, r6
 8002178:	463b      	mov	r3, r7
 800217a:	f7fe f9c1 	bl	8000500 <__aeabi_dmul>
 800217e:	2200      	movs	r2, #0
 8002180:	4b49      	ldr	r3, [pc, #292]	; (80022a8 <main+0x278>)
 8002182:	f7fe f9bd 	bl	8000500 <__aeabi_dmul>
 8002186:	2200      	movs	r2, #0
 8002188:	4b48      	ldr	r3, [pc, #288]	; (80022ac <main+0x27c>)
 800218a:	f7fe f805 	bl	8000198 <__aeabi_dsub>
 800218e:	460b      	mov	r3, r1
 8002190:	4602      	mov	r2, r0
		send_message("Temperature (CN1)", temperature, "*C");
 8002192:	4947      	ldr	r1, [pc, #284]	; (80022b0 <main+0x280>)
		temperature = ((double)adc_result)/4096*100 - 50;
 8002194:	e9c8 2300 	strd	r2, r3, [r8]
		send_message("Temperature (CN1)", temperature, "*C");
 8002198:	4846      	ldr	r0, [pc, #280]	; (80022b4 <main+0x284>)
 800219a:	9100      	str	r1, [sp, #0]
 800219c:	f7ff feac 	bl	8001ef8 <send_message>
		MX_ADC_Init_Channel(ADC_CHANNEL_1);
 80021a0:	2001      	movs	r0, #1
 80021a2:	f7ff ff33 	bl	800200c <MX_ADC_Init_Channel>
		HAL_ADC_Start(&hadc);
 80021a6:	483a      	ldr	r0, [pc, #232]	; (8002290 <main+0x260>)
 80021a8:	f7fe fe24 	bl	8000df4 <HAL_ADC_Start>
		stt = HAL_ADC_PollForConversion(&hadc, timeout);
 80021ac:	2132      	movs	r1, #50	; 0x32
 80021ae:	4838      	ldr	r0, [pc, #224]	; (8002290 <main+0x260>)
 80021b0:	f7fe fcda 	bl	8000b68 <HAL_ADC_PollForConversion>
 80021b4:	4b40      	ldr	r3, [pc, #256]	; (80022b8 <main+0x288>)
 80021b6:	6018      	str	r0, [r3, #0]
		if (stt == HAL_OK) {
 80021b8:	b910      	cbnz	r0, 80021c0 <main+0x190>
			adc_result = HAL_ADC_GetValue(&hadc);
 80021ba:	4835      	ldr	r0, [pc, #212]	; (8002290 <main+0x260>)
 80021bc:	f7fe fd26 	bl	8000c0c <HAL_ADC_GetValue>
			adc_result = stt;
 80021c0:	6028      	str	r0, [r5, #0]
		HAL_ADC_Stop(&hadc);
 80021c2:	4833      	ldr	r0, [pc, #204]	; (8002290 <main+0x260>)
 80021c4:	f7fe fe6f 	bl	8000ea6 <HAL_ADC_Stop>
		temperature = ((double)adc_result)/4096*3.3;
 80021c8:	6828      	ldr	r0, [r5, #0]
 80021ca:	f7fe f923 	bl	8000414 <__aeabi_ui2d>
 80021ce:	4632      	mov	r2, r6
 80021d0:	463b      	mov	r3, r7
 80021d2:	f7fe f995 	bl	8000500 <__aeabi_dmul>
 80021d6:	a326      	add	r3, pc, #152	; (adr r3, 8002270 <main+0x240>)
 80021d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021dc:	f7fe f990 	bl	8000500 <__aeabi_dmul>
 80021e0:	4602      	mov	r2, r0
 80021e2:	460b      	mov	r3, r1
		send_message("Voltage     (CN2)", temperature, "V");
 80021e4:	4935      	ldr	r1, [pc, #212]	; (80022bc <main+0x28c>)
		temperature = ((double)adc_result)/4096*3.3;
 80021e6:	e9c8 2300 	strd	r2, r3, [r8]
		send_message("Voltage     (CN2)", temperature, "V");
 80021ea:	4835      	ldr	r0, [pc, #212]	; (80022c0 <main+0x290>)
 80021ec:	9100      	str	r1, [sp, #0]
 80021ee:	f7ff fe83 	bl	8001ef8 <send_message>
		MX_ADC_Init_Channel(ADC_CHANNEL_0);
 80021f2:	e78e      	b.n	8002112 <main+0xe2>
 80021f4:	e7fe      	b.n	80021f4 <main+0x1c4>
			HAL_ADC_Start(&hadc);
 80021f6:	4648      	mov	r0, r9
 80021f8:	f7fe fdfc 	bl	8000df4 <HAL_ADC_Start>
			stt = HAL_ADC_PollForConversion(&hadc, timeout);
 80021fc:	2132      	movs	r1, #50	; 0x32
 80021fe:	4648      	mov	r0, r9
 8002200:	f7fe fcb2 	bl	8000b68 <HAL_ADC_PollForConversion>
 8002204:	f8cb 0000 	str.w	r0, [fp]
			if (stt == HAL_OK) {
 8002208:	b910      	cbnz	r0, 8002210 <main+0x1e0>
				adc_result = HAL_ADC_GetValue(&hadc);
 800220a:	4648      	mov	r0, r9
 800220c:	f7fe fcfe 	bl	8000c0c <HAL_ADC_GetValue>
				adc_result = stt;
 8002210:	f8ca 0000 	str.w	r0, [sl]
			HAL_ADC_Stop(&hadc);
 8002214:	4648      	mov	r0, r9
 8002216:	f7fe fe46 	bl	8000ea6 <HAL_ADC_Stop>
			result[i] = adc_result;
 800221a:	f8d8 3000 	ldr.w	r3, [r8]
 800221e:	f8da 2000 	ldr.w	r2, [sl]
			HAL_Delay(timeout);
 8002222:	2032      	movs	r0, #50	; 0x32
			result[i] = adc_result;
 8002224:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
			HAL_Delay(timeout);
 8002228:	f7fe fbd2 	bl	80009d0 <HAL_Delay>
		for (i=0; i<5; i++){
 800222c:	f8d8 3000 	ldr.w	r3, [r8]
 8002230:	3301      	adds	r3, #1
 8002232:	f8c8 3000 	str.w	r3, [r8]
 8002236:	e779      	b.n	800212c <main+0xfc>
			for (j=4; j>i; j--)
 8002238:	2204      	movs	r2, #4
				if (result[i]<result[j]) {
 800223a:	eb04 0a83 	add.w	sl, r4, r3, lsl #2
			for (j=4; j>i; j--)
 800223e:	4293      	cmp	r3, r2
 8002240:	d103      	bne.n	800224a <main+0x21a>
 8002242:	3301      	adds	r3, #1
 8002244:	2201      	movs	r2, #1
 8002246:	4648      	mov	r0, r9
 8002248:	e780      	b.n	800214c <main+0x11c>
				if (result[i]<result[j]) {
 800224a:	f8da 0000 	ldr.w	r0, [sl]
 800224e:	f854 b022 	ldr.w	fp, [r4, r2, lsl #2]
 8002252:	4558      	cmp	r0, fp
					result[i] = result[j];
 8002254:	bf3f      	itttt	cc
 8002256:	f8ca b000 	strcc.w	fp, [sl]
					result[j] = swap;
 800225a:	4686      	movcc	lr, r0
 800225c:	f844 0022 	strcc.w	r0, [r4, r2, lsl #2]
 8002260:	2101      	movcc	r1, #1
 8002262:	3a01      	subs	r2, #1
 8002264:	e7eb      	b.n	800223e <main+0x20e>
 8002266:	2900      	cmp	r1, #0
 8002268:	f43f af7e 	beq.w	8002168 <main+0x138>
 800226c:	e777      	b.n	800215e <main+0x12e>
 800226e:	bf00      	nop
 8002270:	66666666 	.word	0x66666666
 8002274:	400a6666 	.word	0x400a6666
 8002278:	40023800 	.word	0x40023800
 800227c:	40020000 	.word	0x40020000
 8002280:	10110000 	.word	0x10110000
 8002284:	40020800 	.word	0x40020800
 8002288:	20000108 	.word	0x20000108
 800228c:	40004400 	.word	0x40004400
 8002290:	20000148 	.word	0x20000148
 8002294:	40012400 	.word	0x40012400
 8002298:	200000e0 	.word	0x200000e0
 800229c:	3f300000 	.word	0x3f300000
 80022a0:	200000b0 	.word	0x200000b0
 80022a4:	200000a0 	.word	0x200000a0
 80022a8:	40590000 	.word	0x40590000
 80022ac:	40490000 	.word	0x40490000
 80022b0:	08002d86 	.word	0x08002d86
 80022b4:	08002d74 	.word	0x08002d74
 80022b8:	200000f4 	.word	0x200000f4
 80022bc:	08002d9b 	.word	0x08002d9b
 80022c0:	08002d89 	.word	0x08002d89
 80022c4:	2000009c 	.word	0x2000009c
 80022c8:	20000098 	.word	0x20000098
 80022cc:	200000a8 	.word	0x200000a8

080022d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80022d0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 80022d2:	4b26      	ldr	r3, [pc, #152]	; (800236c <HAL_MspInit+0x9c>)
  __HAL_RCC_SYSCFG_CLK_ENABLE();
  __HAL_RCC_PWR_CLK_ENABLE();

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80022d4:	2007      	movs	r0, #7
  __HAL_RCC_COMP_CLK_ENABLE();
 80022d6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80022d8:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80022dc:	625a      	str	r2, [r3, #36]	; 0x24
 80022de:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80022e0:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80022e4:	9201      	str	r2, [sp, #4]
 80022e6:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022e8:	6a1a      	ldr	r2, [r3, #32]
 80022ea:	f042 0201 	orr.w	r2, r2, #1
 80022ee:	621a      	str	r2, [r3, #32]
 80022f0:	6a1a      	ldr	r2, [r3, #32]
 80022f2:	f002 0201 	and.w	r2, r2, #1
 80022f6:	9202      	str	r2, [sp, #8]
 80022f8:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80022fa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80022fc:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002300:	625a      	str	r2, [r3, #36]	; 0x24
 8002302:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002304:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002308:	9303      	str	r3, [sp, #12]
 800230a:	9b03      	ldr	r3, [sp, #12]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800230c:	f7fe fde6 	bl	8000edc <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8002310:	2200      	movs	r2, #0
 8002312:	f06f 000b 	mvn.w	r0, #11
 8002316:	4611      	mov	r1, r2
 8002318:	f7fe fdf2 	bl	8000f00 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 800231c:	2200      	movs	r2, #0
 800231e:	f06f 000a 	mvn.w	r0, #10
 8002322:	4611      	mov	r1, r2
 8002324:	f7fe fdec 	bl	8000f00 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8002328:	2200      	movs	r2, #0
 800232a:	f06f 0009 	mvn.w	r0, #9
 800232e:	4611      	mov	r1, r2
 8002330:	f7fe fde6 	bl	8000f00 <HAL_NVIC_SetPriority>
  /* SVC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVC_IRQn, 0, 0);
 8002334:	2200      	movs	r2, #0
 8002336:	f06f 0004 	mvn.w	r0, #4
 800233a:	4611      	mov	r1, r2
 800233c:	f7fe fde0 	bl	8000f00 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8002340:	2200      	movs	r2, #0
 8002342:	f06f 0003 	mvn.w	r0, #3
 8002346:	4611      	mov	r1, r2
 8002348:	f7fe fdda 	bl	8000f00 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 800234c:	2200      	movs	r2, #0
 800234e:	f06f 0001 	mvn.w	r0, #1
 8002352:	4611      	mov	r1, r2
 8002354:	f7fe fdd4 	bl	8000f00 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8002358:	2200      	movs	r2, #0
 800235a:	f04f 30ff 	mov.w	r0, #4294967295
 800235e:	4611      	mov	r1, r2
 8002360:	f7fe fdce 	bl	8000f00 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002364:	b005      	add	sp, #20
 8002366:	f85d fb04 	ldr.w	pc, [sp], #4
 800236a:	bf00      	nop
 800236c:	40023800 	.word	0x40023800

08002370 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002370:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hadc->Instance==ADC1)
 8002372:	6802      	ldr	r2, [r0, #0]
 8002374:	4b0c      	ldr	r3, [pc, #48]	; (80023a8 <HAL_ADC_MspInit+0x38>)
 8002376:	429a      	cmp	r2, r3
 8002378:	d113      	bne.n	80023a2 <HAL_ADC_MspInit+0x32>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800237a:	f503 338a 	add.w	r3, r3, #70656	; 0x11400
 800237e:	6a1a      	ldr	r2, [r3, #32]
    PA1     ------> ADC_IN1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002380:	a901      	add	r1, sp, #4
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002382:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002386:	621a      	str	r2, [r3, #32]
 8002388:	6a1b      	ldr	r3, [r3, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800238a:	4808      	ldr	r0, [pc, #32]	; (80023ac <HAL_ADC_MspInit+0x3c>)
    __HAL_RCC_ADC1_CLK_ENABLE();
 800238c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002390:	9300      	str	r3, [sp, #0]
 8002392:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002394:	2303      	movs	r3, #3
 8002396:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002398:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800239a:	2300      	movs	r3, #0
 800239c:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800239e:	f7fe fe0b 	bl	8000fb8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80023a2:	b007      	add	sp, #28
 80023a4:	f85d fb04 	ldr.w	pc, [sp], #4
 80023a8:	40012400 	.word	0x40012400
 80023ac:	40020000 	.word	0x40020000

080023b0 <HAL_UART_MspInit>:
  }

}

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80023b0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==USART2)
 80023b2:	6802      	ldr	r2, [r0, #0]
 80023b4:	4b0f      	ldr	r3, [pc, #60]	; (80023f4 <HAL_UART_MspInit+0x44>)
 80023b6:	429a      	cmp	r2, r3
 80023b8:	d118      	bne.n	80023ec <HAL_UART_MspInit+0x3c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80023ba:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 80023be:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023c0:	a901      	add	r1, sp, #4
    __HAL_RCC_USART2_CLK_ENABLE();
 80023c2:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80023c6:	625a      	str	r2, [r3, #36]	; 0x24
 80023c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023ca:	480b      	ldr	r0, [pc, #44]	; (80023f8 <HAL_UART_MspInit+0x48>)
    __HAL_RCC_USART2_CLK_ENABLE();
 80023cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023d0:	9300      	str	r3, [sp, #0]
 80023d2:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80023d4:	230c      	movs	r3, #12
 80023d6:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023d8:	2302      	movs	r3, #2
 80023da:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80023dc:	2301      	movs	r3, #1
 80023de:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023e0:	2303      	movs	r3, #3
 80023e2:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80023e4:	2307      	movs	r3, #7
 80023e6:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023e8:	f7fe fde6 	bl	8000fb8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80023ec:	b007      	add	sp, #28
 80023ee:	f85d fb04 	ldr.w	pc, [sp], #4
 80023f2:	bf00      	nop
 80023f4:	40004400 	.word	0x40004400
 80023f8:	40020000 	.word	0x40020000

080023fc <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 80023fc:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80023fe:	f7fe fad9 	bl	80009b4 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002402:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_SYSTICK_IRQHandler();
 8002406:	f7fe bdd2 	b.w	8000fae <HAL_SYSTICK_IRQHandler>
	...

0800240c <SystemInit>:
  * @retval None
  */
void SystemInit (void)
{
  /*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100;
 800240c:	4b0e      	ldr	r3, [pc, #56]	; (8002448 <SystemInit+0x3c>)
 800240e:	681a      	ldr	r2, [r3, #0]
 8002410:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002414:	601a      	str	r2, [r3, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t)0x88FFC00C;
 8002416:	6899      	ldr	r1, [r3, #8]
 8002418:	4a0c      	ldr	r2, [pc, #48]	; (800244c <SystemInit+0x40>)
 800241a:	400a      	ands	r2, r1
 800241c:	609a      	str	r2, [r3, #8]
  
  /*!< Reset HSION, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xEEFEFFFE;
 800241e:	681a      	ldr	r2, [r3, #0]
 8002420:	f022 5288 	bic.w	r2, r2, #285212672	; 0x11000000
 8002424:	f022 1201 	bic.w	r2, r2, #65537	; 0x10001
 8002428:	601a      	str	r2, [r3, #0]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800242a:	681a      	ldr	r2, [r3, #0]
 800242c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002430:	601a      	str	r2, [r3, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFF;
 8002432:	689a      	ldr	r2, [r3, #8]
 8002434:	f422 027d 	bic.w	r2, r2, #16580608	; 0xfd0000
 8002438:	609a      	str	r2, [r3, #8]

  /*!< Disable all interrupts */
  RCC->CIR = 0x00000000;
 800243a:	2200      	movs	r2, #0
 800243c:	60da      	str	r2, [r3, #12]
#endif /* DATA_IN_ExtSRAM */
    
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 800243e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002442:	4b03      	ldr	r3, [pc, #12]	; (8002450 <SystemInit+0x44>)
 8002444:	609a      	str	r2, [r3, #8]
 8002446:	4770      	bx	lr
 8002448:	40023800 	.word	0x40023800
 800244c:	88ffc00c 	.word	0x88ffc00c
 8002450:	e000ed00 	.word	0xe000ed00

08002454 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8002454:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8002456:	e003      	b.n	8002460 <LoopCopyDataInit>

08002458 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8002458:	4b0b      	ldr	r3, [pc, #44]	; (8002488 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800245a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 800245c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800245e:	3104      	adds	r1, #4

08002460 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8002460:	480a      	ldr	r0, [pc, #40]	; (800248c <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8002462:	4b0b      	ldr	r3, [pc, #44]	; (8002490 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8002464:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8002466:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8002468:	d3f6      	bcc.n	8002458 <CopyDataInit>
  ldr r2, =_sbss
 800246a:	4a0a      	ldr	r2, [pc, #40]	; (8002494 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 800246c:	e002      	b.n	8002474 <LoopFillZerobss>

0800246e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800246e:	2300      	movs	r3, #0
  str r3, [r2], #4
 8002470:	f842 3b04 	str.w	r3, [r2], #4

08002474 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8002474:	4b08      	ldr	r3, [pc, #32]	; (8002498 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8002476:	429a      	cmp	r2, r3
  bcc FillZerobss
 8002478:	d3f9      	bcc.n	800246e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800247a:	f7ff ffc7 	bl	800240c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800247e:	f000 f80f 	bl	80024a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002482:	f7ff fdd5 	bl	8002030 <main>
  bx lr
 8002486:	4770      	bx	lr
  ldr r3, =_sidata
 8002488:	08002e1c 	.word	0x08002e1c
  ldr r0, =_sdata
 800248c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8002490:	20000068 	.word	0x20000068
  ldr r2, =_sbss
 8002494:	20000068 	.word	0x20000068
  ldr r3, = _ebss
 8002498:	200001a0 	.word	0x200001a0

0800249c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800249c:	e7fe      	b.n	800249c <ADC1_IRQHandler>
	...

080024a0 <__libc_init_array>:
 80024a0:	b570      	push	{r4, r5, r6, lr}
 80024a2:	2500      	movs	r5, #0
 80024a4:	4e0c      	ldr	r6, [pc, #48]	; (80024d8 <__libc_init_array+0x38>)
 80024a6:	4c0d      	ldr	r4, [pc, #52]	; (80024dc <__libc_init_array+0x3c>)
 80024a8:	1ba4      	subs	r4, r4, r6
 80024aa:	10a4      	asrs	r4, r4, #2
 80024ac:	42a5      	cmp	r5, r4
 80024ae:	d109      	bne.n	80024c4 <__libc_init_array+0x24>
 80024b0:	f000 fc54 	bl	8002d5c <_init>
 80024b4:	2500      	movs	r5, #0
 80024b6:	4e0a      	ldr	r6, [pc, #40]	; (80024e0 <__libc_init_array+0x40>)
 80024b8:	4c0a      	ldr	r4, [pc, #40]	; (80024e4 <__libc_init_array+0x44>)
 80024ba:	1ba4      	subs	r4, r4, r6
 80024bc:	10a4      	asrs	r4, r4, #2
 80024be:	42a5      	cmp	r5, r4
 80024c0:	d105      	bne.n	80024ce <__libc_init_array+0x2e>
 80024c2:	bd70      	pop	{r4, r5, r6, pc}
 80024c4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80024c8:	4798      	blx	r3
 80024ca:	3501      	adds	r5, #1
 80024cc:	e7ee      	b.n	80024ac <__libc_init_array+0xc>
 80024ce:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80024d2:	4798      	blx	r3
 80024d4:	3501      	adds	r5, #1
 80024d6:	e7f2      	b.n	80024be <__libc_init_array+0x1e>
 80024d8:	08002e14 	.word	0x08002e14
 80024dc:	08002e14 	.word	0x08002e14
 80024e0:	08002e14 	.word	0x08002e14
 80024e4:	08002e18 	.word	0x08002e18

080024e8 <siprintf>:
 80024e8:	b40e      	push	{r1, r2, r3}
 80024ea:	f44f 7102 	mov.w	r1, #520	; 0x208
 80024ee:	b500      	push	{lr}
 80024f0:	b09c      	sub	sp, #112	; 0x70
 80024f2:	f8ad 1014 	strh.w	r1, [sp, #20]
 80024f6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80024fa:	9104      	str	r1, [sp, #16]
 80024fc:	9107      	str	r1, [sp, #28]
 80024fe:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002502:	ab1d      	add	r3, sp, #116	; 0x74
 8002504:	9002      	str	r0, [sp, #8]
 8002506:	9006      	str	r0, [sp, #24]
 8002508:	4808      	ldr	r0, [pc, #32]	; (800252c <siprintf+0x44>)
 800250a:	f853 2b04 	ldr.w	r2, [r3], #4
 800250e:	f8ad 1016 	strh.w	r1, [sp, #22]
 8002512:	6800      	ldr	r0, [r0, #0]
 8002514:	a902      	add	r1, sp, #8
 8002516:	9301      	str	r3, [sp, #4]
 8002518:	f000 f866 	bl	80025e8 <_svfiprintf_r>
 800251c:	2200      	movs	r2, #0
 800251e:	9b02      	ldr	r3, [sp, #8]
 8002520:	701a      	strb	r2, [r3, #0]
 8002522:	b01c      	add	sp, #112	; 0x70
 8002524:	f85d eb04 	ldr.w	lr, [sp], #4
 8002528:	b003      	add	sp, #12
 800252a:	4770      	bx	lr
 800252c:	20000004 	.word	0x20000004

08002530 <__ssputs_r>:
 8002530:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002534:	688e      	ldr	r6, [r1, #8]
 8002536:	4682      	mov	sl, r0
 8002538:	429e      	cmp	r6, r3
 800253a:	460c      	mov	r4, r1
 800253c:	4691      	mov	r9, r2
 800253e:	4698      	mov	r8, r3
 8002540:	d835      	bhi.n	80025ae <__ssputs_r+0x7e>
 8002542:	898a      	ldrh	r2, [r1, #12]
 8002544:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8002548:	d031      	beq.n	80025ae <__ssputs_r+0x7e>
 800254a:	2302      	movs	r3, #2
 800254c:	6825      	ldr	r5, [r4, #0]
 800254e:	6909      	ldr	r1, [r1, #16]
 8002550:	1a6f      	subs	r7, r5, r1
 8002552:	6965      	ldr	r5, [r4, #20]
 8002554:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002558:	fb95 f5f3 	sdiv	r5, r5, r3
 800255c:	f108 0301 	add.w	r3, r8, #1
 8002560:	443b      	add	r3, r7
 8002562:	429d      	cmp	r5, r3
 8002564:	bf38      	it	cc
 8002566:	461d      	movcc	r5, r3
 8002568:	0553      	lsls	r3, r2, #21
 800256a:	d531      	bpl.n	80025d0 <__ssputs_r+0xa0>
 800256c:	4629      	mov	r1, r5
 800256e:	f000 fb47 	bl	8002c00 <_malloc_r>
 8002572:	4606      	mov	r6, r0
 8002574:	b950      	cbnz	r0, 800258c <__ssputs_r+0x5c>
 8002576:	230c      	movs	r3, #12
 8002578:	f8ca 3000 	str.w	r3, [sl]
 800257c:	89a3      	ldrh	r3, [r4, #12]
 800257e:	f04f 30ff 	mov.w	r0, #4294967295
 8002582:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002586:	81a3      	strh	r3, [r4, #12]
 8002588:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800258c:	463a      	mov	r2, r7
 800258e:	6921      	ldr	r1, [r4, #16]
 8002590:	f000 fac4 	bl	8002b1c <memcpy>
 8002594:	89a3      	ldrh	r3, [r4, #12]
 8002596:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800259a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800259e:	81a3      	strh	r3, [r4, #12]
 80025a0:	6126      	str	r6, [r4, #16]
 80025a2:	443e      	add	r6, r7
 80025a4:	6026      	str	r6, [r4, #0]
 80025a6:	4646      	mov	r6, r8
 80025a8:	6165      	str	r5, [r4, #20]
 80025aa:	1bed      	subs	r5, r5, r7
 80025ac:	60a5      	str	r5, [r4, #8]
 80025ae:	4546      	cmp	r6, r8
 80025b0:	bf28      	it	cs
 80025b2:	4646      	movcs	r6, r8
 80025b4:	4649      	mov	r1, r9
 80025b6:	4632      	mov	r2, r6
 80025b8:	6820      	ldr	r0, [r4, #0]
 80025ba:	f000 faba 	bl	8002b32 <memmove>
 80025be:	68a3      	ldr	r3, [r4, #8]
 80025c0:	2000      	movs	r0, #0
 80025c2:	1b9b      	subs	r3, r3, r6
 80025c4:	60a3      	str	r3, [r4, #8]
 80025c6:	6823      	ldr	r3, [r4, #0]
 80025c8:	441e      	add	r6, r3
 80025ca:	6026      	str	r6, [r4, #0]
 80025cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80025d0:	462a      	mov	r2, r5
 80025d2:	f000 fb73 	bl	8002cbc <_realloc_r>
 80025d6:	4606      	mov	r6, r0
 80025d8:	2800      	cmp	r0, #0
 80025da:	d1e1      	bne.n	80025a0 <__ssputs_r+0x70>
 80025dc:	6921      	ldr	r1, [r4, #16]
 80025de:	4650      	mov	r0, sl
 80025e0:	f000 fac2 	bl	8002b68 <_free_r>
 80025e4:	e7c7      	b.n	8002576 <__ssputs_r+0x46>
	...

080025e8 <_svfiprintf_r>:
 80025e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80025ec:	b09d      	sub	sp, #116	; 0x74
 80025ee:	9303      	str	r3, [sp, #12]
 80025f0:	898b      	ldrh	r3, [r1, #12]
 80025f2:	4680      	mov	r8, r0
 80025f4:	061c      	lsls	r4, r3, #24
 80025f6:	460d      	mov	r5, r1
 80025f8:	4616      	mov	r6, r2
 80025fa:	d50f      	bpl.n	800261c <_svfiprintf_r+0x34>
 80025fc:	690b      	ldr	r3, [r1, #16]
 80025fe:	b96b      	cbnz	r3, 800261c <_svfiprintf_r+0x34>
 8002600:	2140      	movs	r1, #64	; 0x40
 8002602:	f000 fafd 	bl	8002c00 <_malloc_r>
 8002606:	6028      	str	r0, [r5, #0]
 8002608:	6128      	str	r0, [r5, #16]
 800260a:	b928      	cbnz	r0, 8002618 <_svfiprintf_r+0x30>
 800260c:	230c      	movs	r3, #12
 800260e:	f8c8 3000 	str.w	r3, [r8]
 8002612:	f04f 30ff 	mov.w	r0, #4294967295
 8002616:	e0c4      	b.n	80027a2 <_svfiprintf_r+0x1ba>
 8002618:	2340      	movs	r3, #64	; 0x40
 800261a:	616b      	str	r3, [r5, #20]
 800261c:	2300      	movs	r3, #0
 800261e:	9309      	str	r3, [sp, #36]	; 0x24
 8002620:	2320      	movs	r3, #32
 8002622:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002626:	2330      	movs	r3, #48	; 0x30
 8002628:	f04f 0b01 	mov.w	fp, #1
 800262c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002630:	4637      	mov	r7, r6
 8002632:	463c      	mov	r4, r7
 8002634:	f814 3b01 	ldrb.w	r3, [r4], #1
 8002638:	2b00      	cmp	r3, #0
 800263a:	d13c      	bne.n	80026b6 <_svfiprintf_r+0xce>
 800263c:	ebb7 0a06 	subs.w	sl, r7, r6
 8002640:	d00b      	beq.n	800265a <_svfiprintf_r+0x72>
 8002642:	4653      	mov	r3, sl
 8002644:	4632      	mov	r2, r6
 8002646:	4629      	mov	r1, r5
 8002648:	4640      	mov	r0, r8
 800264a:	f7ff ff71 	bl	8002530 <__ssputs_r>
 800264e:	3001      	adds	r0, #1
 8002650:	f000 80a2 	beq.w	8002798 <_svfiprintf_r+0x1b0>
 8002654:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002656:	4453      	add	r3, sl
 8002658:	9309      	str	r3, [sp, #36]	; 0x24
 800265a:	783b      	ldrb	r3, [r7, #0]
 800265c:	2b00      	cmp	r3, #0
 800265e:	f000 809b 	beq.w	8002798 <_svfiprintf_r+0x1b0>
 8002662:	2300      	movs	r3, #0
 8002664:	f04f 32ff 	mov.w	r2, #4294967295
 8002668:	9304      	str	r3, [sp, #16]
 800266a:	9307      	str	r3, [sp, #28]
 800266c:	9205      	str	r2, [sp, #20]
 800266e:	9306      	str	r3, [sp, #24]
 8002670:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002674:	931a      	str	r3, [sp, #104]	; 0x68
 8002676:	2205      	movs	r2, #5
 8002678:	7821      	ldrb	r1, [r4, #0]
 800267a:	4850      	ldr	r0, [pc, #320]	; (80027bc <_svfiprintf_r+0x1d4>)
 800267c:	f000 fa40 	bl	8002b00 <memchr>
 8002680:	1c67      	adds	r7, r4, #1
 8002682:	9b04      	ldr	r3, [sp, #16]
 8002684:	b9d8      	cbnz	r0, 80026be <_svfiprintf_r+0xd6>
 8002686:	06d9      	lsls	r1, r3, #27
 8002688:	bf44      	itt	mi
 800268a:	2220      	movmi	r2, #32
 800268c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8002690:	071a      	lsls	r2, r3, #28
 8002692:	bf44      	itt	mi
 8002694:	222b      	movmi	r2, #43	; 0x2b
 8002696:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800269a:	7822      	ldrb	r2, [r4, #0]
 800269c:	2a2a      	cmp	r2, #42	; 0x2a
 800269e:	d016      	beq.n	80026ce <_svfiprintf_r+0xe6>
 80026a0:	2100      	movs	r1, #0
 80026a2:	200a      	movs	r0, #10
 80026a4:	9a07      	ldr	r2, [sp, #28]
 80026a6:	4627      	mov	r7, r4
 80026a8:	783b      	ldrb	r3, [r7, #0]
 80026aa:	3401      	adds	r4, #1
 80026ac:	3b30      	subs	r3, #48	; 0x30
 80026ae:	2b09      	cmp	r3, #9
 80026b0:	d950      	bls.n	8002754 <_svfiprintf_r+0x16c>
 80026b2:	b1c9      	cbz	r1, 80026e8 <_svfiprintf_r+0x100>
 80026b4:	e011      	b.n	80026da <_svfiprintf_r+0xf2>
 80026b6:	2b25      	cmp	r3, #37	; 0x25
 80026b8:	d0c0      	beq.n	800263c <_svfiprintf_r+0x54>
 80026ba:	4627      	mov	r7, r4
 80026bc:	e7b9      	b.n	8002632 <_svfiprintf_r+0x4a>
 80026be:	4a3f      	ldr	r2, [pc, #252]	; (80027bc <_svfiprintf_r+0x1d4>)
 80026c0:	463c      	mov	r4, r7
 80026c2:	1a80      	subs	r0, r0, r2
 80026c4:	fa0b f000 	lsl.w	r0, fp, r0
 80026c8:	4318      	orrs	r0, r3
 80026ca:	9004      	str	r0, [sp, #16]
 80026cc:	e7d3      	b.n	8002676 <_svfiprintf_r+0x8e>
 80026ce:	9a03      	ldr	r2, [sp, #12]
 80026d0:	1d11      	adds	r1, r2, #4
 80026d2:	6812      	ldr	r2, [r2, #0]
 80026d4:	9103      	str	r1, [sp, #12]
 80026d6:	2a00      	cmp	r2, #0
 80026d8:	db01      	blt.n	80026de <_svfiprintf_r+0xf6>
 80026da:	9207      	str	r2, [sp, #28]
 80026dc:	e004      	b.n	80026e8 <_svfiprintf_r+0x100>
 80026de:	4252      	negs	r2, r2
 80026e0:	f043 0302 	orr.w	r3, r3, #2
 80026e4:	9207      	str	r2, [sp, #28]
 80026e6:	9304      	str	r3, [sp, #16]
 80026e8:	783b      	ldrb	r3, [r7, #0]
 80026ea:	2b2e      	cmp	r3, #46	; 0x2e
 80026ec:	d10d      	bne.n	800270a <_svfiprintf_r+0x122>
 80026ee:	787b      	ldrb	r3, [r7, #1]
 80026f0:	1c79      	adds	r1, r7, #1
 80026f2:	2b2a      	cmp	r3, #42	; 0x2a
 80026f4:	d132      	bne.n	800275c <_svfiprintf_r+0x174>
 80026f6:	9b03      	ldr	r3, [sp, #12]
 80026f8:	3702      	adds	r7, #2
 80026fa:	1d1a      	adds	r2, r3, #4
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	9203      	str	r2, [sp, #12]
 8002700:	2b00      	cmp	r3, #0
 8002702:	bfb8      	it	lt
 8002704:	f04f 33ff 	movlt.w	r3, #4294967295
 8002708:	9305      	str	r3, [sp, #20]
 800270a:	4c2d      	ldr	r4, [pc, #180]	; (80027c0 <_svfiprintf_r+0x1d8>)
 800270c:	2203      	movs	r2, #3
 800270e:	7839      	ldrb	r1, [r7, #0]
 8002710:	4620      	mov	r0, r4
 8002712:	f000 f9f5 	bl	8002b00 <memchr>
 8002716:	b138      	cbz	r0, 8002728 <_svfiprintf_r+0x140>
 8002718:	2340      	movs	r3, #64	; 0x40
 800271a:	1b00      	subs	r0, r0, r4
 800271c:	fa03 f000 	lsl.w	r0, r3, r0
 8002720:	9b04      	ldr	r3, [sp, #16]
 8002722:	3701      	adds	r7, #1
 8002724:	4303      	orrs	r3, r0
 8002726:	9304      	str	r3, [sp, #16]
 8002728:	7839      	ldrb	r1, [r7, #0]
 800272a:	2206      	movs	r2, #6
 800272c:	4825      	ldr	r0, [pc, #148]	; (80027c4 <_svfiprintf_r+0x1dc>)
 800272e:	1c7e      	adds	r6, r7, #1
 8002730:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002734:	f000 f9e4 	bl	8002b00 <memchr>
 8002738:	2800      	cmp	r0, #0
 800273a:	d035      	beq.n	80027a8 <_svfiprintf_r+0x1c0>
 800273c:	4b22      	ldr	r3, [pc, #136]	; (80027c8 <_svfiprintf_r+0x1e0>)
 800273e:	b9fb      	cbnz	r3, 8002780 <_svfiprintf_r+0x198>
 8002740:	9b03      	ldr	r3, [sp, #12]
 8002742:	3307      	adds	r3, #7
 8002744:	f023 0307 	bic.w	r3, r3, #7
 8002748:	3308      	adds	r3, #8
 800274a:	9303      	str	r3, [sp, #12]
 800274c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800274e:	444b      	add	r3, r9
 8002750:	9309      	str	r3, [sp, #36]	; 0x24
 8002752:	e76d      	b.n	8002630 <_svfiprintf_r+0x48>
 8002754:	fb00 3202 	mla	r2, r0, r2, r3
 8002758:	2101      	movs	r1, #1
 800275a:	e7a4      	b.n	80026a6 <_svfiprintf_r+0xbe>
 800275c:	2300      	movs	r3, #0
 800275e:	240a      	movs	r4, #10
 8002760:	4618      	mov	r0, r3
 8002762:	9305      	str	r3, [sp, #20]
 8002764:	460f      	mov	r7, r1
 8002766:	783a      	ldrb	r2, [r7, #0]
 8002768:	3101      	adds	r1, #1
 800276a:	3a30      	subs	r2, #48	; 0x30
 800276c:	2a09      	cmp	r2, #9
 800276e:	d903      	bls.n	8002778 <_svfiprintf_r+0x190>
 8002770:	2b00      	cmp	r3, #0
 8002772:	d0ca      	beq.n	800270a <_svfiprintf_r+0x122>
 8002774:	9005      	str	r0, [sp, #20]
 8002776:	e7c8      	b.n	800270a <_svfiprintf_r+0x122>
 8002778:	fb04 2000 	mla	r0, r4, r0, r2
 800277c:	2301      	movs	r3, #1
 800277e:	e7f1      	b.n	8002764 <_svfiprintf_r+0x17c>
 8002780:	ab03      	add	r3, sp, #12
 8002782:	9300      	str	r3, [sp, #0]
 8002784:	462a      	mov	r2, r5
 8002786:	4b11      	ldr	r3, [pc, #68]	; (80027cc <_svfiprintf_r+0x1e4>)
 8002788:	a904      	add	r1, sp, #16
 800278a:	4640      	mov	r0, r8
 800278c:	f3af 8000 	nop.w
 8002790:	f1b0 3fff 	cmp.w	r0, #4294967295
 8002794:	4681      	mov	r9, r0
 8002796:	d1d9      	bne.n	800274c <_svfiprintf_r+0x164>
 8002798:	89ab      	ldrh	r3, [r5, #12]
 800279a:	065b      	lsls	r3, r3, #25
 800279c:	f53f af39 	bmi.w	8002612 <_svfiprintf_r+0x2a>
 80027a0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80027a2:	b01d      	add	sp, #116	; 0x74
 80027a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80027a8:	ab03      	add	r3, sp, #12
 80027aa:	9300      	str	r3, [sp, #0]
 80027ac:	462a      	mov	r2, r5
 80027ae:	4b07      	ldr	r3, [pc, #28]	; (80027cc <_svfiprintf_r+0x1e4>)
 80027b0:	a904      	add	r1, sp, #16
 80027b2:	4640      	mov	r0, r8
 80027b4:	f000 f884 	bl	80028c0 <_printf_i>
 80027b8:	e7ea      	b.n	8002790 <_svfiprintf_r+0x1a8>
 80027ba:	bf00      	nop
 80027bc:	08002de1 	.word	0x08002de1
 80027c0:	08002de7 	.word	0x08002de7
 80027c4:	08002deb 	.word	0x08002deb
 80027c8:	00000000 	.word	0x00000000
 80027cc:	08002531 	.word	0x08002531

080027d0 <_printf_common>:
 80027d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80027d4:	4691      	mov	r9, r2
 80027d6:	461f      	mov	r7, r3
 80027d8:	688a      	ldr	r2, [r1, #8]
 80027da:	690b      	ldr	r3, [r1, #16]
 80027dc:	4606      	mov	r6, r0
 80027de:	4293      	cmp	r3, r2
 80027e0:	bfb8      	it	lt
 80027e2:	4613      	movlt	r3, r2
 80027e4:	f8c9 3000 	str.w	r3, [r9]
 80027e8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80027ec:	460c      	mov	r4, r1
 80027ee:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80027f2:	b112      	cbz	r2, 80027fa <_printf_common+0x2a>
 80027f4:	3301      	adds	r3, #1
 80027f6:	f8c9 3000 	str.w	r3, [r9]
 80027fa:	6823      	ldr	r3, [r4, #0]
 80027fc:	0699      	lsls	r1, r3, #26
 80027fe:	bf42      	ittt	mi
 8002800:	f8d9 3000 	ldrmi.w	r3, [r9]
 8002804:	3302      	addmi	r3, #2
 8002806:	f8c9 3000 	strmi.w	r3, [r9]
 800280a:	6825      	ldr	r5, [r4, #0]
 800280c:	f015 0506 	ands.w	r5, r5, #6
 8002810:	d107      	bne.n	8002822 <_printf_common+0x52>
 8002812:	f104 0a19 	add.w	sl, r4, #25
 8002816:	68e3      	ldr	r3, [r4, #12]
 8002818:	f8d9 2000 	ldr.w	r2, [r9]
 800281c:	1a9b      	subs	r3, r3, r2
 800281e:	429d      	cmp	r5, r3
 8002820:	db2a      	blt.n	8002878 <_printf_common+0xa8>
 8002822:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8002826:	6822      	ldr	r2, [r4, #0]
 8002828:	3300      	adds	r3, #0
 800282a:	bf18      	it	ne
 800282c:	2301      	movne	r3, #1
 800282e:	0692      	lsls	r2, r2, #26
 8002830:	d42f      	bmi.n	8002892 <_printf_common+0xc2>
 8002832:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002836:	4639      	mov	r1, r7
 8002838:	4630      	mov	r0, r6
 800283a:	47c0      	blx	r8
 800283c:	3001      	adds	r0, #1
 800283e:	d022      	beq.n	8002886 <_printf_common+0xb6>
 8002840:	6823      	ldr	r3, [r4, #0]
 8002842:	68e5      	ldr	r5, [r4, #12]
 8002844:	f003 0306 	and.w	r3, r3, #6
 8002848:	2b04      	cmp	r3, #4
 800284a:	bf18      	it	ne
 800284c:	2500      	movne	r5, #0
 800284e:	f8d9 2000 	ldr.w	r2, [r9]
 8002852:	f04f 0900 	mov.w	r9, #0
 8002856:	bf08      	it	eq
 8002858:	1aad      	subeq	r5, r5, r2
 800285a:	68a3      	ldr	r3, [r4, #8]
 800285c:	6922      	ldr	r2, [r4, #16]
 800285e:	bf08      	it	eq
 8002860:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002864:	4293      	cmp	r3, r2
 8002866:	bfc4      	itt	gt
 8002868:	1a9b      	subgt	r3, r3, r2
 800286a:	18ed      	addgt	r5, r5, r3
 800286c:	341a      	adds	r4, #26
 800286e:	454d      	cmp	r5, r9
 8002870:	d11b      	bne.n	80028aa <_printf_common+0xda>
 8002872:	2000      	movs	r0, #0
 8002874:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002878:	2301      	movs	r3, #1
 800287a:	4652      	mov	r2, sl
 800287c:	4639      	mov	r1, r7
 800287e:	4630      	mov	r0, r6
 8002880:	47c0      	blx	r8
 8002882:	3001      	adds	r0, #1
 8002884:	d103      	bne.n	800288e <_printf_common+0xbe>
 8002886:	f04f 30ff 	mov.w	r0, #4294967295
 800288a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800288e:	3501      	adds	r5, #1
 8002890:	e7c1      	b.n	8002816 <_printf_common+0x46>
 8002892:	2030      	movs	r0, #48	; 0x30
 8002894:	18e1      	adds	r1, r4, r3
 8002896:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800289a:	1c5a      	adds	r2, r3, #1
 800289c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80028a0:	4422      	add	r2, r4
 80028a2:	3302      	adds	r3, #2
 80028a4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80028a8:	e7c3      	b.n	8002832 <_printf_common+0x62>
 80028aa:	2301      	movs	r3, #1
 80028ac:	4622      	mov	r2, r4
 80028ae:	4639      	mov	r1, r7
 80028b0:	4630      	mov	r0, r6
 80028b2:	47c0      	blx	r8
 80028b4:	3001      	adds	r0, #1
 80028b6:	d0e6      	beq.n	8002886 <_printf_common+0xb6>
 80028b8:	f109 0901 	add.w	r9, r9, #1
 80028bc:	e7d7      	b.n	800286e <_printf_common+0x9e>
	...

080028c0 <_printf_i>:
 80028c0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80028c4:	4617      	mov	r7, r2
 80028c6:	7e0a      	ldrb	r2, [r1, #24]
 80028c8:	b085      	sub	sp, #20
 80028ca:	2a6e      	cmp	r2, #110	; 0x6e
 80028cc:	4698      	mov	r8, r3
 80028ce:	4606      	mov	r6, r0
 80028d0:	460c      	mov	r4, r1
 80028d2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80028d4:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 80028d8:	f000 80bc 	beq.w	8002a54 <_printf_i+0x194>
 80028dc:	d81a      	bhi.n	8002914 <_printf_i+0x54>
 80028de:	2a63      	cmp	r2, #99	; 0x63
 80028e0:	d02e      	beq.n	8002940 <_printf_i+0x80>
 80028e2:	d80a      	bhi.n	80028fa <_printf_i+0x3a>
 80028e4:	2a00      	cmp	r2, #0
 80028e6:	f000 80c8 	beq.w	8002a7a <_printf_i+0x1ba>
 80028ea:	2a58      	cmp	r2, #88	; 0x58
 80028ec:	f000 808a 	beq.w	8002a04 <_printf_i+0x144>
 80028f0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80028f4:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 80028f8:	e02a      	b.n	8002950 <_printf_i+0x90>
 80028fa:	2a64      	cmp	r2, #100	; 0x64
 80028fc:	d001      	beq.n	8002902 <_printf_i+0x42>
 80028fe:	2a69      	cmp	r2, #105	; 0x69
 8002900:	d1f6      	bne.n	80028f0 <_printf_i+0x30>
 8002902:	6821      	ldr	r1, [r4, #0]
 8002904:	681a      	ldr	r2, [r3, #0]
 8002906:	f011 0f80 	tst.w	r1, #128	; 0x80
 800290a:	d023      	beq.n	8002954 <_printf_i+0x94>
 800290c:	1d11      	adds	r1, r2, #4
 800290e:	6019      	str	r1, [r3, #0]
 8002910:	6813      	ldr	r3, [r2, #0]
 8002912:	e027      	b.n	8002964 <_printf_i+0xa4>
 8002914:	2a73      	cmp	r2, #115	; 0x73
 8002916:	f000 80b4 	beq.w	8002a82 <_printf_i+0x1c2>
 800291a:	d808      	bhi.n	800292e <_printf_i+0x6e>
 800291c:	2a6f      	cmp	r2, #111	; 0x6f
 800291e:	d02a      	beq.n	8002976 <_printf_i+0xb6>
 8002920:	2a70      	cmp	r2, #112	; 0x70
 8002922:	d1e5      	bne.n	80028f0 <_printf_i+0x30>
 8002924:	680a      	ldr	r2, [r1, #0]
 8002926:	f042 0220 	orr.w	r2, r2, #32
 800292a:	600a      	str	r2, [r1, #0]
 800292c:	e003      	b.n	8002936 <_printf_i+0x76>
 800292e:	2a75      	cmp	r2, #117	; 0x75
 8002930:	d021      	beq.n	8002976 <_printf_i+0xb6>
 8002932:	2a78      	cmp	r2, #120	; 0x78
 8002934:	d1dc      	bne.n	80028f0 <_printf_i+0x30>
 8002936:	2278      	movs	r2, #120	; 0x78
 8002938:	496f      	ldr	r1, [pc, #444]	; (8002af8 <_printf_i+0x238>)
 800293a:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 800293e:	e064      	b.n	8002a0a <_printf_i+0x14a>
 8002940:	681a      	ldr	r2, [r3, #0]
 8002942:	f101 0542 	add.w	r5, r1, #66	; 0x42
 8002946:	1d11      	adds	r1, r2, #4
 8002948:	6019      	str	r1, [r3, #0]
 800294a:	6813      	ldr	r3, [r2, #0]
 800294c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002950:	2301      	movs	r3, #1
 8002952:	e0a3      	b.n	8002a9c <_printf_i+0x1dc>
 8002954:	f011 0f40 	tst.w	r1, #64	; 0x40
 8002958:	f102 0104 	add.w	r1, r2, #4
 800295c:	6019      	str	r1, [r3, #0]
 800295e:	d0d7      	beq.n	8002910 <_printf_i+0x50>
 8002960:	f9b2 3000 	ldrsh.w	r3, [r2]
 8002964:	2b00      	cmp	r3, #0
 8002966:	da03      	bge.n	8002970 <_printf_i+0xb0>
 8002968:	222d      	movs	r2, #45	; 0x2d
 800296a:	425b      	negs	r3, r3
 800296c:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8002970:	4962      	ldr	r1, [pc, #392]	; (8002afc <_printf_i+0x23c>)
 8002972:	220a      	movs	r2, #10
 8002974:	e017      	b.n	80029a6 <_printf_i+0xe6>
 8002976:	6820      	ldr	r0, [r4, #0]
 8002978:	6819      	ldr	r1, [r3, #0]
 800297a:	f010 0f80 	tst.w	r0, #128	; 0x80
 800297e:	d003      	beq.n	8002988 <_printf_i+0xc8>
 8002980:	1d08      	adds	r0, r1, #4
 8002982:	6018      	str	r0, [r3, #0]
 8002984:	680b      	ldr	r3, [r1, #0]
 8002986:	e006      	b.n	8002996 <_printf_i+0xd6>
 8002988:	f010 0f40 	tst.w	r0, #64	; 0x40
 800298c:	f101 0004 	add.w	r0, r1, #4
 8002990:	6018      	str	r0, [r3, #0]
 8002992:	d0f7      	beq.n	8002984 <_printf_i+0xc4>
 8002994:	880b      	ldrh	r3, [r1, #0]
 8002996:	2a6f      	cmp	r2, #111	; 0x6f
 8002998:	bf14      	ite	ne
 800299a:	220a      	movne	r2, #10
 800299c:	2208      	moveq	r2, #8
 800299e:	4957      	ldr	r1, [pc, #348]	; (8002afc <_printf_i+0x23c>)
 80029a0:	2000      	movs	r0, #0
 80029a2:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 80029a6:	6865      	ldr	r5, [r4, #4]
 80029a8:	2d00      	cmp	r5, #0
 80029aa:	60a5      	str	r5, [r4, #8]
 80029ac:	f2c0 809c 	blt.w	8002ae8 <_printf_i+0x228>
 80029b0:	6820      	ldr	r0, [r4, #0]
 80029b2:	f020 0004 	bic.w	r0, r0, #4
 80029b6:	6020      	str	r0, [r4, #0]
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d13f      	bne.n	8002a3c <_printf_i+0x17c>
 80029bc:	2d00      	cmp	r5, #0
 80029be:	f040 8095 	bne.w	8002aec <_printf_i+0x22c>
 80029c2:	4675      	mov	r5, lr
 80029c4:	2a08      	cmp	r2, #8
 80029c6:	d10b      	bne.n	80029e0 <_printf_i+0x120>
 80029c8:	6823      	ldr	r3, [r4, #0]
 80029ca:	07da      	lsls	r2, r3, #31
 80029cc:	d508      	bpl.n	80029e0 <_printf_i+0x120>
 80029ce:	6923      	ldr	r3, [r4, #16]
 80029d0:	6862      	ldr	r2, [r4, #4]
 80029d2:	429a      	cmp	r2, r3
 80029d4:	bfde      	ittt	le
 80029d6:	2330      	movle	r3, #48	; 0x30
 80029d8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80029dc:	f105 35ff 	addle.w	r5, r5, #4294967295
 80029e0:	ebae 0305 	sub.w	r3, lr, r5
 80029e4:	6123      	str	r3, [r4, #16]
 80029e6:	f8cd 8000 	str.w	r8, [sp]
 80029ea:	463b      	mov	r3, r7
 80029ec:	aa03      	add	r2, sp, #12
 80029ee:	4621      	mov	r1, r4
 80029f0:	4630      	mov	r0, r6
 80029f2:	f7ff feed 	bl	80027d0 <_printf_common>
 80029f6:	3001      	adds	r0, #1
 80029f8:	d155      	bne.n	8002aa6 <_printf_i+0x1e6>
 80029fa:	f04f 30ff 	mov.w	r0, #4294967295
 80029fe:	b005      	add	sp, #20
 8002a00:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002a04:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 8002a08:	493c      	ldr	r1, [pc, #240]	; (8002afc <_printf_i+0x23c>)
 8002a0a:	6822      	ldr	r2, [r4, #0]
 8002a0c:	6818      	ldr	r0, [r3, #0]
 8002a0e:	f012 0f80 	tst.w	r2, #128	; 0x80
 8002a12:	f100 0504 	add.w	r5, r0, #4
 8002a16:	601d      	str	r5, [r3, #0]
 8002a18:	d001      	beq.n	8002a1e <_printf_i+0x15e>
 8002a1a:	6803      	ldr	r3, [r0, #0]
 8002a1c:	e002      	b.n	8002a24 <_printf_i+0x164>
 8002a1e:	0655      	lsls	r5, r2, #25
 8002a20:	d5fb      	bpl.n	8002a1a <_printf_i+0x15a>
 8002a22:	8803      	ldrh	r3, [r0, #0]
 8002a24:	07d0      	lsls	r0, r2, #31
 8002a26:	bf44      	itt	mi
 8002a28:	f042 0220 	orrmi.w	r2, r2, #32
 8002a2c:	6022      	strmi	r2, [r4, #0]
 8002a2e:	b91b      	cbnz	r3, 8002a38 <_printf_i+0x178>
 8002a30:	6822      	ldr	r2, [r4, #0]
 8002a32:	f022 0220 	bic.w	r2, r2, #32
 8002a36:	6022      	str	r2, [r4, #0]
 8002a38:	2210      	movs	r2, #16
 8002a3a:	e7b1      	b.n	80029a0 <_printf_i+0xe0>
 8002a3c:	4675      	mov	r5, lr
 8002a3e:	fbb3 f0f2 	udiv	r0, r3, r2
 8002a42:	fb02 3310 	mls	r3, r2, r0, r3
 8002a46:	5ccb      	ldrb	r3, [r1, r3]
 8002a48:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8002a4c:	4603      	mov	r3, r0
 8002a4e:	2800      	cmp	r0, #0
 8002a50:	d1f5      	bne.n	8002a3e <_printf_i+0x17e>
 8002a52:	e7b7      	b.n	80029c4 <_printf_i+0x104>
 8002a54:	6808      	ldr	r0, [r1, #0]
 8002a56:	681a      	ldr	r2, [r3, #0]
 8002a58:	f010 0f80 	tst.w	r0, #128	; 0x80
 8002a5c:	6949      	ldr	r1, [r1, #20]
 8002a5e:	d004      	beq.n	8002a6a <_printf_i+0x1aa>
 8002a60:	1d10      	adds	r0, r2, #4
 8002a62:	6018      	str	r0, [r3, #0]
 8002a64:	6813      	ldr	r3, [r2, #0]
 8002a66:	6019      	str	r1, [r3, #0]
 8002a68:	e007      	b.n	8002a7a <_printf_i+0x1ba>
 8002a6a:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002a6e:	f102 0004 	add.w	r0, r2, #4
 8002a72:	6018      	str	r0, [r3, #0]
 8002a74:	6813      	ldr	r3, [r2, #0]
 8002a76:	d0f6      	beq.n	8002a66 <_printf_i+0x1a6>
 8002a78:	8019      	strh	r1, [r3, #0]
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	4675      	mov	r5, lr
 8002a7e:	6123      	str	r3, [r4, #16]
 8002a80:	e7b1      	b.n	80029e6 <_printf_i+0x126>
 8002a82:	681a      	ldr	r2, [r3, #0]
 8002a84:	1d11      	adds	r1, r2, #4
 8002a86:	6019      	str	r1, [r3, #0]
 8002a88:	6815      	ldr	r5, [r2, #0]
 8002a8a:	2100      	movs	r1, #0
 8002a8c:	6862      	ldr	r2, [r4, #4]
 8002a8e:	4628      	mov	r0, r5
 8002a90:	f000 f836 	bl	8002b00 <memchr>
 8002a94:	b108      	cbz	r0, 8002a9a <_printf_i+0x1da>
 8002a96:	1b40      	subs	r0, r0, r5
 8002a98:	6060      	str	r0, [r4, #4]
 8002a9a:	6863      	ldr	r3, [r4, #4]
 8002a9c:	6123      	str	r3, [r4, #16]
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002aa4:	e79f      	b.n	80029e6 <_printf_i+0x126>
 8002aa6:	6923      	ldr	r3, [r4, #16]
 8002aa8:	462a      	mov	r2, r5
 8002aaa:	4639      	mov	r1, r7
 8002aac:	4630      	mov	r0, r6
 8002aae:	47c0      	blx	r8
 8002ab0:	3001      	adds	r0, #1
 8002ab2:	d0a2      	beq.n	80029fa <_printf_i+0x13a>
 8002ab4:	6823      	ldr	r3, [r4, #0]
 8002ab6:	079b      	lsls	r3, r3, #30
 8002ab8:	d507      	bpl.n	8002aca <_printf_i+0x20a>
 8002aba:	2500      	movs	r5, #0
 8002abc:	f104 0919 	add.w	r9, r4, #25
 8002ac0:	68e3      	ldr	r3, [r4, #12]
 8002ac2:	9a03      	ldr	r2, [sp, #12]
 8002ac4:	1a9b      	subs	r3, r3, r2
 8002ac6:	429d      	cmp	r5, r3
 8002ac8:	db05      	blt.n	8002ad6 <_printf_i+0x216>
 8002aca:	68e0      	ldr	r0, [r4, #12]
 8002acc:	9b03      	ldr	r3, [sp, #12]
 8002ace:	4298      	cmp	r0, r3
 8002ad0:	bfb8      	it	lt
 8002ad2:	4618      	movlt	r0, r3
 8002ad4:	e793      	b.n	80029fe <_printf_i+0x13e>
 8002ad6:	2301      	movs	r3, #1
 8002ad8:	464a      	mov	r2, r9
 8002ada:	4639      	mov	r1, r7
 8002adc:	4630      	mov	r0, r6
 8002ade:	47c0      	blx	r8
 8002ae0:	3001      	adds	r0, #1
 8002ae2:	d08a      	beq.n	80029fa <_printf_i+0x13a>
 8002ae4:	3501      	adds	r5, #1
 8002ae6:	e7eb      	b.n	8002ac0 <_printf_i+0x200>
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d1a7      	bne.n	8002a3c <_printf_i+0x17c>
 8002aec:	780b      	ldrb	r3, [r1, #0]
 8002aee:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002af2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002af6:	e765      	b.n	80029c4 <_printf_i+0x104>
 8002af8:	08002e03 	.word	0x08002e03
 8002afc:	08002df2 	.word	0x08002df2

08002b00 <memchr>:
 8002b00:	b510      	push	{r4, lr}
 8002b02:	b2c9      	uxtb	r1, r1
 8002b04:	4402      	add	r2, r0
 8002b06:	4290      	cmp	r0, r2
 8002b08:	4603      	mov	r3, r0
 8002b0a:	d101      	bne.n	8002b10 <memchr+0x10>
 8002b0c:	2000      	movs	r0, #0
 8002b0e:	bd10      	pop	{r4, pc}
 8002b10:	781c      	ldrb	r4, [r3, #0]
 8002b12:	3001      	adds	r0, #1
 8002b14:	428c      	cmp	r4, r1
 8002b16:	d1f6      	bne.n	8002b06 <memchr+0x6>
 8002b18:	4618      	mov	r0, r3
 8002b1a:	bd10      	pop	{r4, pc}

08002b1c <memcpy>:
 8002b1c:	b510      	push	{r4, lr}
 8002b1e:	1e43      	subs	r3, r0, #1
 8002b20:	440a      	add	r2, r1
 8002b22:	4291      	cmp	r1, r2
 8002b24:	d100      	bne.n	8002b28 <memcpy+0xc>
 8002b26:	bd10      	pop	{r4, pc}
 8002b28:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002b2c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002b30:	e7f7      	b.n	8002b22 <memcpy+0x6>

08002b32 <memmove>:
 8002b32:	4288      	cmp	r0, r1
 8002b34:	b510      	push	{r4, lr}
 8002b36:	eb01 0302 	add.w	r3, r1, r2
 8002b3a:	d803      	bhi.n	8002b44 <memmove+0x12>
 8002b3c:	1e42      	subs	r2, r0, #1
 8002b3e:	4299      	cmp	r1, r3
 8002b40:	d10c      	bne.n	8002b5c <memmove+0x2a>
 8002b42:	bd10      	pop	{r4, pc}
 8002b44:	4298      	cmp	r0, r3
 8002b46:	d2f9      	bcs.n	8002b3c <memmove+0xa>
 8002b48:	1881      	adds	r1, r0, r2
 8002b4a:	1ad2      	subs	r2, r2, r3
 8002b4c:	42d3      	cmn	r3, r2
 8002b4e:	d100      	bne.n	8002b52 <memmove+0x20>
 8002b50:	bd10      	pop	{r4, pc}
 8002b52:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8002b56:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8002b5a:	e7f7      	b.n	8002b4c <memmove+0x1a>
 8002b5c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002b60:	f802 4f01 	strb.w	r4, [r2, #1]!
 8002b64:	e7eb      	b.n	8002b3e <memmove+0xc>
	...

08002b68 <_free_r>:
 8002b68:	b538      	push	{r3, r4, r5, lr}
 8002b6a:	4605      	mov	r5, r0
 8002b6c:	2900      	cmp	r1, #0
 8002b6e:	d043      	beq.n	8002bf8 <_free_r+0x90>
 8002b70:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002b74:	1f0c      	subs	r4, r1, #4
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	bfb8      	it	lt
 8002b7a:	18e4      	addlt	r4, r4, r3
 8002b7c:	f000 f8d4 	bl	8002d28 <__malloc_lock>
 8002b80:	4a1e      	ldr	r2, [pc, #120]	; (8002bfc <_free_r+0x94>)
 8002b82:	6813      	ldr	r3, [r2, #0]
 8002b84:	4610      	mov	r0, r2
 8002b86:	b933      	cbnz	r3, 8002b96 <_free_r+0x2e>
 8002b88:	6063      	str	r3, [r4, #4]
 8002b8a:	6014      	str	r4, [r2, #0]
 8002b8c:	4628      	mov	r0, r5
 8002b8e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002b92:	f000 b8ca 	b.w	8002d2a <__malloc_unlock>
 8002b96:	42a3      	cmp	r3, r4
 8002b98:	d90b      	bls.n	8002bb2 <_free_r+0x4a>
 8002b9a:	6821      	ldr	r1, [r4, #0]
 8002b9c:	1862      	adds	r2, r4, r1
 8002b9e:	4293      	cmp	r3, r2
 8002ba0:	bf01      	itttt	eq
 8002ba2:	681a      	ldreq	r2, [r3, #0]
 8002ba4:	685b      	ldreq	r3, [r3, #4]
 8002ba6:	1852      	addeq	r2, r2, r1
 8002ba8:	6022      	streq	r2, [r4, #0]
 8002baa:	6063      	str	r3, [r4, #4]
 8002bac:	6004      	str	r4, [r0, #0]
 8002bae:	e7ed      	b.n	8002b8c <_free_r+0x24>
 8002bb0:	4613      	mov	r3, r2
 8002bb2:	685a      	ldr	r2, [r3, #4]
 8002bb4:	b10a      	cbz	r2, 8002bba <_free_r+0x52>
 8002bb6:	42a2      	cmp	r2, r4
 8002bb8:	d9fa      	bls.n	8002bb0 <_free_r+0x48>
 8002bba:	6819      	ldr	r1, [r3, #0]
 8002bbc:	1858      	adds	r0, r3, r1
 8002bbe:	42a0      	cmp	r0, r4
 8002bc0:	d10b      	bne.n	8002bda <_free_r+0x72>
 8002bc2:	6820      	ldr	r0, [r4, #0]
 8002bc4:	4401      	add	r1, r0
 8002bc6:	1858      	adds	r0, r3, r1
 8002bc8:	4282      	cmp	r2, r0
 8002bca:	6019      	str	r1, [r3, #0]
 8002bcc:	d1de      	bne.n	8002b8c <_free_r+0x24>
 8002bce:	6810      	ldr	r0, [r2, #0]
 8002bd0:	6852      	ldr	r2, [r2, #4]
 8002bd2:	4401      	add	r1, r0
 8002bd4:	6019      	str	r1, [r3, #0]
 8002bd6:	605a      	str	r2, [r3, #4]
 8002bd8:	e7d8      	b.n	8002b8c <_free_r+0x24>
 8002bda:	d902      	bls.n	8002be2 <_free_r+0x7a>
 8002bdc:	230c      	movs	r3, #12
 8002bde:	602b      	str	r3, [r5, #0]
 8002be0:	e7d4      	b.n	8002b8c <_free_r+0x24>
 8002be2:	6820      	ldr	r0, [r4, #0]
 8002be4:	1821      	adds	r1, r4, r0
 8002be6:	428a      	cmp	r2, r1
 8002be8:	bf01      	itttt	eq
 8002bea:	6811      	ldreq	r1, [r2, #0]
 8002bec:	6852      	ldreq	r2, [r2, #4]
 8002bee:	1809      	addeq	r1, r1, r0
 8002bf0:	6021      	streq	r1, [r4, #0]
 8002bf2:	6062      	str	r2, [r4, #4]
 8002bf4:	605c      	str	r4, [r3, #4]
 8002bf6:	e7c9      	b.n	8002b8c <_free_r+0x24>
 8002bf8:	bd38      	pop	{r3, r4, r5, pc}
 8002bfa:	bf00      	nop
 8002bfc:	20000084 	.word	0x20000084

08002c00 <_malloc_r>:
 8002c00:	b570      	push	{r4, r5, r6, lr}
 8002c02:	1ccd      	adds	r5, r1, #3
 8002c04:	f025 0503 	bic.w	r5, r5, #3
 8002c08:	3508      	adds	r5, #8
 8002c0a:	2d0c      	cmp	r5, #12
 8002c0c:	bf38      	it	cc
 8002c0e:	250c      	movcc	r5, #12
 8002c10:	2d00      	cmp	r5, #0
 8002c12:	4606      	mov	r6, r0
 8002c14:	db01      	blt.n	8002c1a <_malloc_r+0x1a>
 8002c16:	42a9      	cmp	r1, r5
 8002c18:	d903      	bls.n	8002c22 <_malloc_r+0x22>
 8002c1a:	230c      	movs	r3, #12
 8002c1c:	6033      	str	r3, [r6, #0]
 8002c1e:	2000      	movs	r0, #0
 8002c20:	bd70      	pop	{r4, r5, r6, pc}
 8002c22:	f000 f881 	bl	8002d28 <__malloc_lock>
 8002c26:	4a23      	ldr	r2, [pc, #140]	; (8002cb4 <_malloc_r+0xb4>)
 8002c28:	6814      	ldr	r4, [r2, #0]
 8002c2a:	4621      	mov	r1, r4
 8002c2c:	b991      	cbnz	r1, 8002c54 <_malloc_r+0x54>
 8002c2e:	4c22      	ldr	r4, [pc, #136]	; (8002cb8 <_malloc_r+0xb8>)
 8002c30:	6823      	ldr	r3, [r4, #0]
 8002c32:	b91b      	cbnz	r3, 8002c3c <_malloc_r+0x3c>
 8002c34:	4630      	mov	r0, r6
 8002c36:	f000 f867 	bl	8002d08 <_sbrk_r>
 8002c3a:	6020      	str	r0, [r4, #0]
 8002c3c:	4629      	mov	r1, r5
 8002c3e:	4630      	mov	r0, r6
 8002c40:	f000 f862 	bl	8002d08 <_sbrk_r>
 8002c44:	1c43      	adds	r3, r0, #1
 8002c46:	d126      	bne.n	8002c96 <_malloc_r+0x96>
 8002c48:	230c      	movs	r3, #12
 8002c4a:	4630      	mov	r0, r6
 8002c4c:	6033      	str	r3, [r6, #0]
 8002c4e:	f000 f86c 	bl	8002d2a <__malloc_unlock>
 8002c52:	e7e4      	b.n	8002c1e <_malloc_r+0x1e>
 8002c54:	680b      	ldr	r3, [r1, #0]
 8002c56:	1b5b      	subs	r3, r3, r5
 8002c58:	d41a      	bmi.n	8002c90 <_malloc_r+0x90>
 8002c5a:	2b0b      	cmp	r3, #11
 8002c5c:	d90f      	bls.n	8002c7e <_malloc_r+0x7e>
 8002c5e:	600b      	str	r3, [r1, #0]
 8002c60:	18cc      	adds	r4, r1, r3
 8002c62:	50cd      	str	r5, [r1, r3]
 8002c64:	4630      	mov	r0, r6
 8002c66:	f000 f860 	bl	8002d2a <__malloc_unlock>
 8002c6a:	f104 000b 	add.w	r0, r4, #11
 8002c6e:	1d23      	adds	r3, r4, #4
 8002c70:	f020 0007 	bic.w	r0, r0, #7
 8002c74:	1ac3      	subs	r3, r0, r3
 8002c76:	d01b      	beq.n	8002cb0 <_malloc_r+0xb0>
 8002c78:	425a      	negs	r2, r3
 8002c7a:	50e2      	str	r2, [r4, r3]
 8002c7c:	bd70      	pop	{r4, r5, r6, pc}
 8002c7e:	428c      	cmp	r4, r1
 8002c80:	bf0b      	itete	eq
 8002c82:	6863      	ldreq	r3, [r4, #4]
 8002c84:	684b      	ldrne	r3, [r1, #4]
 8002c86:	6013      	streq	r3, [r2, #0]
 8002c88:	6063      	strne	r3, [r4, #4]
 8002c8a:	bf18      	it	ne
 8002c8c:	460c      	movne	r4, r1
 8002c8e:	e7e9      	b.n	8002c64 <_malloc_r+0x64>
 8002c90:	460c      	mov	r4, r1
 8002c92:	6849      	ldr	r1, [r1, #4]
 8002c94:	e7ca      	b.n	8002c2c <_malloc_r+0x2c>
 8002c96:	1cc4      	adds	r4, r0, #3
 8002c98:	f024 0403 	bic.w	r4, r4, #3
 8002c9c:	42a0      	cmp	r0, r4
 8002c9e:	d005      	beq.n	8002cac <_malloc_r+0xac>
 8002ca0:	1a21      	subs	r1, r4, r0
 8002ca2:	4630      	mov	r0, r6
 8002ca4:	f000 f830 	bl	8002d08 <_sbrk_r>
 8002ca8:	3001      	adds	r0, #1
 8002caa:	d0cd      	beq.n	8002c48 <_malloc_r+0x48>
 8002cac:	6025      	str	r5, [r4, #0]
 8002cae:	e7d9      	b.n	8002c64 <_malloc_r+0x64>
 8002cb0:	bd70      	pop	{r4, r5, r6, pc}
 8002cb2:	bf00      	nop
 8002cb4:	20000084 	.word	0x20000084
 8002cb8:	20000088 	.word	0x20000088

08002cbc <_realloc_r>:
 8002cbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002cbe:	4607      	mov	r7, r0
 8002cc0:	4614      	mov	r4, r2
 8002cc2:	460e      	mov	r6, r1
 8002cc4:	b921      	cbnz	r1, 8002cd0 <_realloc_r+0x14>
 8002cc6:	4611      	mov	r1, r2
 8002cc8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8002ccc:	f7ff bf98 	b.w	8002c00 <_malloc_r>
 8002cd0:	b922      	cbnz	r2, 8002cdc <_realloc_r+0x20>
 8002cd2:	f7ff ff49 	bl	8002b68 <_free_r>
 8002cd6:	4625      	mov	r5, r4
 8002cd8:	4628      	mov	r0, r5
 8002cda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002cdc:	f000 f826 	bl	8002d2c <_malloc_usable_size_r>
 8002ce0:	4284      	cmp	r4, r0
 8002ce2:	d90f      	bls.n	8002d04 <_realloc_r+0x48>
 8002ce4:	4621      	mov	r1, r4
 8002ce6:	4638      	mov	r0, r7
 8002ce8:	f7ff ff8a 	bl	8002c00 <_malloc_r>
 8002cec:	4605      	mov	r5, r0
 8002cee:	2800      	cmp	r0, #0
 8002cf0:	d0f2      	beq.n	8002cd8 <_realloc_r+0x1c>
 8002cf2:	4631      	mov	r1, r6
 8002cf4:	4622      	mov	r2, r4
 8002cf6:	f7ff ff11 	bl	8002b1c <memcpy>
 8002cfa:	4631      	mov	r1, r6
 8002cfc:	4638      	mov	r0, r7
 8002cfe:	f7ff ff33 	bl	8002b68 <_free_r>
 8002d02:	e7e9      	b.n	8002cd8 <_realloc_r+0x1c>
 8002d04:	4635      	mov	r5, r6
 8002d06:	e7e7      	b.n	8002cd8 <_realloc_r+0x1c>

08002d08 <_sbrk_r>:
 8002d08:	b538      	push	{r3, r4, r5, lr}
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	4c05      	ldr	r4, [pc, #20]	; (8002d24 <_sbrk_r+0x1c>)
 8002d0e:	4605      	mov	r5, r0
 8002d10:	4608      	mov	r0, r1
 8002d12:	6023      	str	r3, [r4, #0]
 8002d14:	f000 f814 	bl	8002d40 <_sbrk>
 8002d18:	1c43      	adds	r3, r0, #1
 8002d1a:	d102      	bne.n	8002d22 <_sbrk_r+0x1a>
 8002d1c:	6823      	ldr	r3, [r4, #0]
 8002d1e:	b103      	cbz	r3, 8002d22 <_sbrk_r+0x1a>
 8002d20:	602b      	str	r3, [r5, #0]
 8002d22:	bd38      	pop	{r3, r4, r5, pc}
 8002d24:	2000019c 	.word	0x2000019c

08002d28 <__malloc_lock>:
 8002d28:	4770      	bx	lr

08002d2a <__malloc_unlock>:
 8002d2a:	4770      	bx	lr

08002d2c <_malloc_usable_size_r>:
 8002d2c:	f851 0c04 	ldr.w	r0, [r1, #-4]
 8002d30:	2800      	cmp	r0, #0
 8002d32:	f1a0 0004 	sub.w	r0, r0, #4
 8002d36:	bfbc      	itt	lt
 8002d38:	580b      	ldrlt	r3, [r1, r0]
 8002d3a:	18c0      	addlt	r0, r0, r3
 8002d3c:	4770      	bx	lr
	...

08002d40 <_sbrk>:
 8002d40:	4b04      	ldr	r3, [pc, #16]	; (8002d54 <_sbrk+0x14>)
 8002d42:	4602      	mov	r2, r0
 8002d44:	6819      	ldr	r1, [r3, #0]
 8002d46:	b909      	cbnz	r1, 8002d4c <_sbrk+0xc>
 8002d48:	4903      	ldr	r1, [pc, #12]	; (8002d58 <_sbrk+0x18>)
 8002d4a:	6019      	str	r1, [r3, #0]
 8002d4c:	6818      	ldr	r0, [r3, #0]
 8002d4e:	4402      	add	r2, r0
 8002d50:	601a      	str	r2, [r3, #0]
 8002d52:	4770      	bx	lr
 8002d54:	2000008c 	.word	0x2000008c
 8002d58:	200001a0 	.word	0x200001a0

08002d5c <_init>:
 8002d5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d5e:	bf00      	nop
 8002d60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d62:	bc08      	pop	{r3}
 8002d64:	469e      	mov	lr, r3
 8002d66:	4770      	bx	lr

08002d68 <_fini>:
 8002d68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d6a:	bf00      	nop
 8002d6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d6e:	bc08      	pop	{r3}
 8002d70:	469e      	mov	lr, r3
 8002d72:	4770      	bx	lr
