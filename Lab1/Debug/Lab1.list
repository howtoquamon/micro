
Lab1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000027d8  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000044  08002914  08002914  00012914  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08002958  08002958  00012958  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0800295c  0800295c  0001295c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000004  20000000  08002960  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000060  20000004  08002964  00020004  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20000064  08002964  00020064  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000ad1f  00000000  00000000  0002002d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000016be  00000000  00000000  0002ad4c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000500  00000000  00000000  0002c410  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000458  00000000  00000000  0002c910  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00002ff4  00000000  00000000  0002cd68  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00001dd9  00000000  00000000  0002fd5c  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007c  00000000  00000000  00031b35  2**0
                  CONTENTS, READONLY
 16 .debug_frame  00001280  00000000  00000000  00031bb4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	20000004 	.word	0x20000004
 8000158:	00000000 	.word	0x00000000
 800015c:	080028fc 	.word	0x080028fc

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	20000008 	.word	0x20000008
 8000178:	080028fc 	.word	0x080028fc

0800017c <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800017c:	b580      	push	{r7, lr}
 800017e:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000180:	2003      	movs	r0, #3
 8000182:	f000 f901 	bl	8000388 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000186:	2000      	movs	r0, #0
 8000188:	f000 f806 	bl	8000198 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800018c:	f002 faa6 	bl	80026dc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000190:	2300      	movs	r3, #0
}
 8000192:	4618      	mov	r0, r3
 8000194:	bd80      	pop	{r7, pc}
	...

08000198 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000198:	b580      	push	{r7, lr}
 800019a:	b082      	sub	sp, #8
 800019c:	af00      	add	r7, sp, #0
 800019e:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock /1000);
 80001a0:	4b09      	ldr	r3, [pc, #36]	; (80001c8 <HAL_InitTick+0x30>)
 80001a2:	681b      	ldr	r3, [r3, #0]
 80001a4:	4a09      	ldr	r2, [pc, #36]	; (80001cc <HAL_InitTick+0x34>)
 80001a6:	fba2 2303 	umull	r2, r3, r2, r3
 80001aa:	099b      	lsrs	r3, r3, #6
 80001ac:	4618      	mov	r0, r3
 80001ae:	f000 f912 	bl	80003d6 <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0);
 80001b2:	2200      	movs	r2, #0
 80001b4:	6879      	ldr	r1, [r7, #4]
 80001b6:	f04f 30ff 	mov.w	r0, #4294967295
 80001ba:	f000 f8f0 	bl	800039e <HAL_NVIC_SetPriority>

   /* Return function status */
  return HAL_OK;
 80001be:	2300      	movs	r3, #0
}
 80001c0:	4618      	mov	r0, r3
 80001c2:	3708      	adds	r7, #8
 80001c4:	46bd      	mov	sp, r7
 80001c6:	bd80      	pop	{r7, pc}
 80001c8:	20000000 	.word	0x20000000
 80001cc:	10624dd3 	.word	0x10624dd3

080001d0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80001d0:	b480      	push	{r7}
 80001d2:	af00      	add	r7, sp, #0
  uwTick++;
 80001d4:	4b04      	ldr	r3, [pc, #16]	; (80001e8 <HAL_IncTick+0x18>)
 80001d6:	681b      	ldr	r3, [r3, #0]
 80001d8:	3301      	adds	r3, #1
 80001da:	4a03      	ldr	r2, [pc, #12]	; (80001e8 <HAL_IncTick+0x18>)
 80001dc:	6013      	str	r3, [r2, #0]
}
 80001de:	bf00      	nop
 80001e0:	46bd      	mov	sp, r7
 80001e2:	bc80      	pop	{r7}
 80001e4:	4770      	bx	lr
 80001e6:	bf00      	nop
 80001e8:	20000020 	.word	0x20000020

080001ec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80001ec:	b480      	push	{r7}
 80001ee:	af00      	add	r7, sp, #0
  return uwTick;
 80001f0:	4b02      	ldr	r3, [pc, #8]	; (80001fc <HAL_GetTick+0x10>)
 80001f2:	681b      	ldr	r3, [r3, #0]
}
 80001f4:	4618      	mov	r0, r3
 80001f6:	46bd      	mov	sp, r7
 80001f8:	bc80      	pop	{r7}
 80001fa:	4770      	bx	lr
 80001fc:	20000020 	.word	0x20000020

08000200 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 8000200:	b580      	push	{r7, lr}
 8000202:	b084      	sub	sp, #16
 8000204:	af00      	add	r7, sp, #0
 8000206:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8000208:	2300      	movs	r3, #0
 800020a:	60fb      	str	r3, [r7, #12]
  tickstart = HAL_GetTick();
 800020c:	f7ff ffee 	bl	80001ec <HAL_GetTick>
 8000210:	60f8      	str	r0, [r7, #12]
  while((HAL_GetTick() - tickstart) < Delay)
 8000212:	bf00      	nop
 8000214:	f7ff ffea 	bl	80001ec <HAL_GetTick>
 8000218:	4602      	mov	r2, r0
 800021a:	68fb      	ldr	r3, [r7, #12]
 800021c:	1ad2      	subs	r2, r2, r3
 800021e:	687b      	ldr	r3, [r7, #4]
 8000220:	429a      	cmp	r2, r3
 8000222:	d3f7      	bcc.n	8000214 <HAL_Delay+0x14>
  {
  }
}
 8000224:	bf00      	nop
 8000226:	3710      	adds	r7, #16
 8000228:	46bd      	mov	sp, r7
 800022a:	bd80      	pop	{r7, pc}

0800022c <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800022c:	b480      	push	{r7}
 800022e:	b085      	sub	sp, #20
 8000230:	af00      	add	r7, sp, #0
 8000232:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000234:	687b      	ldr	r3, [r7, #4]
 8000236:	f003 0307 	and.w	r3, r3, #7
 800023a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800023c:	4b0c      	ldr	r3, [pc, #48]	; (8000270 <NVIC_SetPriorityGrouping+0x44>)
 800023e:	68db      	ldr	r3, [r3, #12]
 8000240:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000242:	68ba      	ldr	r2, [r7, #8]
 8000244:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000248:	4013      	ands	r3, r2
 800024a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 800024c:	68fb      	ldr	r3, [r7, #12]
 800024e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000250:	68bb      	ldr	r3, [r7, #8]
 8000252:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000254:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000258:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800025c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800025e:	4a04      	ldr	r2, [pc, #16]	; (8000270 <NVIC_SetPriorityGrouping+0x44>)
 8000260:	68bb      	ldr	r3, [r7, #8]
 8000262:	60d3      	str	r3, [r2, #12]
}
 8000264:	bf00      	nop
 8000266:	3714      	adds	r7, #20
 8000268:	46bd      	mov	sp, r7
 800026a:	bc80      	pop	{r7}
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop
 8000270:	e000ed00 	.word	0xe000ed00

08000274 <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 8000274:	b480      	push	{r7}
 8000276:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000278:	4b04      	ldr	r3, [pc, #16]	; (800028c <NVIC_GetPriorityGrouping+0x18>)
 800027a:	68db      	ldr	r3, [r3, #12]
 800027c:	0a1b      	lsrs	r3, r3, #8
 800027e:	f003 0307 	and.w	r3, r3, #7
}
 8000282:	4618      	mov	r0, r3
 8000284:	46bd      	mov	sp, r7
 8000286:	bc80      	pop	{r7}
 8000288:	4770      	bx	lr
 800028a:	bf00      	nop
 800028c:	e000ed00 	.word	0xe000ed00

08000290 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000290:	b480      	push	{r7}
 8000292:	b083      	sub	sp, #12
 8000294:	af00      	add	r7, sp, #0
 8000296:	4603      	mov	r3, r0
 8000298:	6039      	str	r1, [r7, #0]
 800029a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 800029c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002a0:	2b00      	cmp	r3, #0
 80002a2:	da0b      	bge.n	80002bc <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002a4:	490d      	ldr	r1, [pc, #52]	; (80002dc <NVIC_SetPriority+0x4c>)
 80002a6:	79fb      	ldrb	r3, [r7, #7]
 80002a8:	f003 030f 	and.w	r3, r3, #15
 80002ac:	3b04      	subs	r3, #4
 80002ae:	683a      	ldr	r2, [r7, #0]
 80002b0:	b2d2      	uxtb	r2, r2
 80002b2:	0112      	lsls	r2, r2, #4
 80002b4:	b2d2      	uxtb	r2, r2
 80002b6:	440b      	add	r3, r1
 80002b8:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80002ba:	e009      	b.n	80002d0 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002bc:	4908      	ldr	r1, [pc, #32]	; (80002e0 <NVIC_SetPriority+0x50>)
 80002be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002c2:	683a      	ldr	r2, [r7, #0]
 80002c4:	b2d2      	uxtb	r2, r2
 80002c6:	0112      	lsls	r2, r2, #4
 80002c8:	b2d2      	uxtb	r2, r2
 80002ca:	440b      	add	r3, r1
 80002cc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80002d0:	bf00      	nop
 80002d2:	370c      	adds	r7, #12
 80002d4:	46bd      	mov	sp, r7
 80002d6:	bc80      	pop	{r7}
 80002d8:	4770      	bx	lr
 80002da:	bf00      	nop
 80002dc:	e000ed00 	.word	0xe000ed00
 80002e0:	e000e100 	.word	0xe000e100

080002e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80002e4:	b480      	push	{r7}
 80002e6:	b089      	sub	sp, #36	; 0x24
 80002e8:	af00      	add	r7, sp, #0
 80002ea:	60f8      	str	r0, [r7, #12]
 80002ec:	60b9      	str	r1, [r7, #8]
 80002ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80002f0:	68fb      	ldr	r3, [r7, #12]
 80002f2:	f003 0307 	and.w	r3, r3, #7
 80002f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80002f8:	69fb      	ldr	r3, [r7, #28]
 80002fa:	f1c3 0307 	rsb	r3, r3, #7
 80002fe:	2b04      	cmp	r3, #4
 8000300:	bf28      	it	cs
 8000302:	2304      	movcs	r3, #4
 8000304:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000306:	69fb      	ldr	r3, [r7, #28]
 8000308:	3304      	adds	r3, #4
 800030a:	2b06      	cmp	r3, #6
 800030c:	d902      	bls.n	8000314 <NVIC_EncodePriority+0x30>
 800030e:	69fb      	ldr	r3, [r7, #28]
 8000310:	3b03      	subs	r3, #3
 8000312:	e000      	b.n	8000316 <NVIC_EncodePriority+0x32>
 8000314:	2300      	movs	r3, #0
 8000316:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000318:	2201      	movs	r2, #1
 800031a:	69bb      	ldr	r3, [r7, #24]
 800031c:	fa02 f303 	lsl.w	r3, r2, r3
 8000320:	1e5a      	subs	r2, r3, #1
 8000322:	68bb      	ldr	r3, [r7, #8]
 8000324:	401a      	ands	r2, r3
 8000326:	697b      	ldr	r3, [r7, #20]
 8000328:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800032a:	2101      	movs	r1, #1
 800032c:	697b      	ldr	r3, [r7, #20]
 800032e:	fa01 f303 	lsl.w	r3, r1, r3
 8000332:	1e59      	subs	r1, r3, #1
 8000334:	687b      	ldr	r3, [r7, #4]
 8000336:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000338:	4313      	orrs	r3, r2
         );
}
 800033a:	4618      	mov	r0, r3
 800033c:	3724      	adds	r7, #36	; 0x24
 800033e:	46bd      	mov	sp, r7
 8000340:	bc80      	pop	{r7}
 8000342:	4770      	bx	lr

08000344 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000344:	b580      	push	{r7, lr}
 8000346:	b082      	sub	sp, #8
 8000348:	af00      	add	r7, sp, #0
 800034a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800034c:	687b      	ldr	r3, [r7, #4]
 800034e:	3b01      	subs	r3, #1
 8000350:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000354:	d301      	bcc.n	800035a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000356:	2301      	movs	r3, #1
 8000358:	e00f      	b.n	800037a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800035a:	4a0a      	ldr	r2, [pc, #40]	; (8000384 <SysTick_Config+0x40>)
 800035c:	687b      	ldr	r3, [r7, #4]
 800035e:	3b01      	subs	r3, #1
 8000360:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000362:	210f      	movs	r1, #15
 8000364:	f04f 30ff 	mov.w	r0, #4294967295
 8000368:	f7ff ff92 	bl	8000290 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800036c:	4b05      	ldr	r3, [pc, #20]	; (8000384 <SysTick_Config+0x40>)
 800036e:	2200      	movs	r2, #0
 8000370:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000372:	4b04      	ldr	r3, [pc, #16]	; (8000384 <SysTick_Config+0x40>)
 8000374:	2207      	movs	r2, #7
 8000376:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000378:	2300      	movs	r3, #0
}
 800037a:	4618      	mov	r0, r3
 800037c:	3708      	adds	r7, #8
 800037e:	46bd      	mov	sp, r7
 8000380:	bd80      	pop	{r7, pc}
 8000382:	bf00      	nop
 8000384:	e000e010 	.word	0xe000e010

08000388 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000388:	b580      	push	{r7, lr}
 800038a:	b082      	sub	sp, #8
 800038c:	af00      	add	r7, sp, #0
 800038e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000390:	6878      	ldr	r0, [r7, #4]
 8000392:	f7ff ff4b 	bl	800022c <NVIC_SetPriorityGrouping>
}
 8000396:	bf00      	nop
 8000398:	3708      	adds	r7, #8
 800039a:	46bd      	mov	sp, r7
 800039c:	bd80      	pop	{r7, pc}

0800039e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800039e:	b580      	push	{r7, lr}
 80003a0:	b086      	sub	sp, #24
 80003a2:	af00      	add	r7, sp, #0
 80003a4:	4603      	mov	r3, r0
 80003a6:	60b9      	str	r1, [r7, #8]
 80003a8:	607a      	str	r2, [r7, #4]
 80003aa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80003ac:	2300      	movs	r3, #0
 80003ae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80003b0:	f7ff ff60 	bl	8000274 <NVIC_GetPriorityGrouping>
 80003b4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80003b6:	687a      	ldr	r2, [r7, #4]
 80003b8:	68b9      	ldr	r1, [r7, #8]
 80003ba:	6978      	ldr	r0, [r7, #20]
 80003bc:	f7ff ff92 	bl	80002e4 <NVIC_EncodePriority>
 80003c0:	4602      	mov	r2, r0
 80003c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80003c6:	4611      	mov	r1, r2
 80003c8:	4618      	mov	r0, r3
 80003ca:	f7ff ff61 	bl	8000290 <NVIC_SetPriority>
}
 80003ce:	bf00      	nop
 80003d0:	3718      	adds	r7, #24
 80003d2:	46bd      	mov	sp, r7
 80003d4:	bd80      	pop	{r7, pc}

080003d6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80003d6:	b580      	push	{r7, lr}
 80003d8:	b082      	sub	sp, #8
 80003da:	af00      	add	r7, sp, #0
 80003dc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80003de:	6878      	ldr	r0, [r7, #4]
 80003e0:	f7ff ffb0 	bl	8000344 <SysTick_Config>
 80003e4:	4603      	mov	r3, r0
}
 80003e6:	4618      	mov	r0, r3
 80003e8:	3708      	adds	r7, #8
 80003ea:	46bd      	mov	sp, r7
 80003ec:	bd80      	pop	{r7, pc}
	...

080003f0 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 80003f0:	b480      	push	{r7}
 80003f2:	b083      	sub	sp, #12
 80003f4:	af00      	add	r7, sp, #0
 80003f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 80003f8:	687b      	ldr	r3, [r7, #4]
 80003fa:	2b04      	cmp	r3, #4
 80003fc:	d106      	bne.n	800040c <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 80003fe:	4a09      	ldr	r2, [pc, #36]	; (8000424 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000400:	4b08      	ldr	r3, [pc, #32]	; (8000424 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000402:	681b      	ldr	r3, [r3, #0]
 8000404:	f043 0304 	orr.w	r3, r3, #4
 8000408:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 800040a:	e005      	b.n	8000418 <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 800040c:	4a05      	ldr	r2, [pc, #20]	; (8000424 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 800040e:	4b05      	ldr	r3, [pc, #20]	; (8000424 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000410:	681b      	ldr	r3, [r3, #0]
 8000412:	f023 0304 	bic.w	r3, r3, #4
 8000416:	6013      	str	r3, [r2, #0]
}
 8000418:	bf00      	nop
 800041a:	370c      	adds	r7, #12
 800041c:	46bd      	mov	sp, r7
 800041e:	bc80      	pop	{r7}
 8000420:	4770      	bx	lr
 8000422:	bf00      	nop
 8000424:	e000e010 	.word	0xe000e010

08000428 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8000428:	b580      	push	{r7, lr}
 800042a:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 800042c:	f000 f802 	bl	8000434 <HAL_SYSTICK_Callback>
}
 8000430:	bf00      	nop
 8000432:	bd80      	pop	{r7, pc}

08000434 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8000434:	b480      	push	{r7}
 8000436:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8000438:	bf00      	nop
 800043a:	46bd      	mov	sp, r7
 800043c:	bc80      	pop	{r7}
 800043e:	4770      	bx	lr

08000440 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8000440:	b480      	push	{r7}
 8000442:	b087      	sub	sp, #28
 8000444:	af00      	add	r7, sp, #0
 8000446:	6078      	str	r0, [r7, #4]
 8000448:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800044a:	2300      	movs	r3, #0
 800044c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800044e:	2300      	movs	r3, #0
 8000450:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 8000452:	2300      	movs	r3, #0
 8000454:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull)); 

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8000456:	e160      	b.n	800071a <HAL_GPIO_Init+0x2da>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000458:	683b      	ldr	r3, [r7, #0]
 800045a:	681a      	ldr	r2, [r3, #0]
 800045c:	2101      	movs	r1, #1
 800045e:	697b      	ldr	r3, [r7, #20]
 8000460:	fa01 f303 	lsl.w	r3, r1, r3
 8000464:	4013      	ands	r3, r2
 8000466:	60fb      	str	r3, [r7, #12]
    
    if(iocurrent)
 8000468:	68fb      	ldr	r3, [r7, #12]
 800046a:	2b00      	cmp	r3, #0
 800046c:	f000 8152 	beq.w	8000714 <HAL_GPIO_Init+0x2d4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 8000470:	683b      	ldr	r3, [r7, #0]
 8000472:	685b      	ldr	r3, [r3, #4]
 8000474:	2b02      	cmp	r3, #2
 8000476:	d003      	beq.n	8000480 <HAL_GPIO_Init+0x40>
 8000478:	683b      	ldr	r3, [r7, #0]
 800047a:	685b      	ldr	r3, [r3, #4]
 800047c:	2b12      	cmp	r3, #18
 800047e:	d123      	bne.n	80004c8 <HAL_GPIO_Init+0x88>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */ 
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 8000480:	697b      	ldr	r3, [r7, #20]
 8000482:	08da      	lsrs	r2, r3, #3
 8000484:	687b      	ldr	r3, [r7, #4]
 8000486:	3208      	adds	r2, #8
 8000488:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800048c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4)) ;      
 800048e:	697b      	ldr	r3, [r7, #20]
 8000490:	f003 0307 	and.w	r3, r3, #7
 8000494:	009b      	lsls	r3, r3, #2
 8000496:	220f      	movs	r2, #15
 8000498:	fa02 f303 	lsl.w	r3, r2, r3
 800049c:	43db      	mvns	r3, r3
 800049e:	693a      	ldr	r2, [r7, #16]
 80004a0:	4013      	ands	r3, r2
 80004a2:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));       
 80004a4:	683b      	ldr	r3, [r7, #0]
 80004a6:	691a      	ldr	r2, [r3, #16]
 80004a8:	697b      	ldr	r3, [r7, #20]
 80004aa:	f003 0307 	and.w	r3, r3, #7
 80004ae:	009b      	lsls	r3, r3, #2
 80004b0:	fa02 f303 	lsl.w	r3, r2, r3
 80004b4:	693a      	ldr	r2, [r7, #16]
 80004b6:	4313      	orrs	r3, r2
 80004b8:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 80004ba:	697b      	ldr	r3, [r7, #20]
 80004bc:	08da      	lsrs	r2, r3, #3
 80004be:	687b      	ldr	r3, [r7, #4]
 80004c0:	3208      	adds	r2, #8
 80004c2:	6939      	ldr	r1, [r7, #16]
 80004c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80004c8:	687b      	ldr	r3, [r7, #4]
 80004ca:	681b      	ldr	r3, [r3, #0]
 80004cc:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));   
 80004ce:	697b      	ldr	r3, [r7, #20]
 80004d0:	005b      	lsls	r3, r3, #1
 80004d2:	2203      	movs	r2, #3
 80004d4:	fa02 f303 	lsl.w	r3, r2, r3
 80004d8:	43db      	mvns	r3, r3
 80004da:	693a      	ldr	r2, [r7, #16]
 80004dc:	4013      	ands	r3, r2
 80004de:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80004e0:	683b      	ldr	r3, [r7, #0]
 80004e2:	685b      	ldr	r3, [r3, #4]
 80004e4:	f003 0203 	and.w	r2, r3, #3
 80004e8:	697b      	ldr	r3, [r7, #20]
 80004ea:	005b      	lsls	r3, r3, #1
 80004ec:	fa02 f303 	lsl.w	r3, r2, r3
 80004f0:	693a      	ldr	r2, [r7, #16]
 80004f2:	4313      	orrs	r3, r2
 80004f4:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80004f6:	687b      	ldr	r3, [r7, #4]
 80004f8:	693a      	ldr	r2, [r7, #16]
 80004fa:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80004fc:	683b      	ldr	r3, [r7, #0]
 80004fe:	685b      	ldr	r3, [r3, #4]
 8000500:	2b01      	cmp	r3, #1
 8000502:	d00b      	beq.n	800051c <HAL_GPIO_Init+0xdc>
 8000504:	683b      	ldr	r3, [r7, #0]
 8000506:	685b      	ldr	r3, [r3, #4]
 8000508:	2b02      	cmp	r3, #2
 800050a:	d007      	beq.n	800051c <HAL_GPIO_Init+0xdc>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800050c:	683b      	ldr	r3, [r7, #0]
 800050e:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000510:	2b11      	cmp	r3, #17
 8000512:	d003      	beq.n	800051c <HAL_GPIO_Init+0xdc>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000514:	683b      	ldr	r3, [r7, #0]
 8000516:	685b      	ldr	r3, [r3, #4]
 8000518:	2b12      	cmp	r3, #18
 800051a:	d130      	bne.n	800057e <HAL_GPIO_Init+0x13e>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800051c:	687b      	ldr	r3, [r7, #4]
 800051e:	689b      	ldr	r3, [r3, #8]
 8000520:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000522:	697b      	ldr	r3, [r7, #20]
 8000524:	005b      	lsls	r3, r3, #1
 8000526:	2203      	movs	r2, #3
 8000528:	fa02 f303 	lsl.w	r3, r2, r3
 800052c:	43db      	mvns	r3, r3
 800052e:	693a      	ldr	r2, [r7, #16]
 8000530:	4013      	ands	r3, r2
 8000532:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 8000534:	683b      	ldr	r3, [r7, #0]
 8000536:	68da      	ldr	r2, [r3, #12]
 8000538:	697b      	ldr	r3, [r7, #20]
 800053a:	005b      	lsls	r3, r3, #1
 800053c:	fa02 f303 	lsl.w	r3, r2, r3
 8000540:	693a      	ldr	r2, [r7, #16]
 8000542:	4313      	orrs	r3, r2
 8000544:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000546:	687b      	ldr	r3, [r7, #4]
 8000548:	693a      	ldr	r2, [r7, #16]
 800054a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800054c:	687b      	ldr	r3, [r7, #4]
 800054e:	685b      	ldr	r3, [r3, #4]
 8000550:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8000552:	2201      	movs	r2, #1
 8000554:	697b      	ldr	r3, [r7, #20]
 8000556:	fa02 f303 	lsl.w	r3, r2, r3
 800055a:	43db      	mvns	r3, r3
 800055c:	693a      	ldr	r2, [r7, #16]
 800055e:	4013      	ands	r3, r2
 8000560:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8000562:	683b      	ldr	r3, [r7, #0]
 8000564:	685b      	ldr	r3, [r3, #4]
 8000566:	091b      	lsrs	r3, r3, #4
 8000568:	f003 0201 	and.w	r2, r3, #1
 800056c:	697b      	ldr	r3, [r7, #20]
 800056e:	fa02 f303 	lsl.w	r3, r2, r3
 8000572:	693a      	ldr	r2, [r7, #16]
 8000574:	4313      	orrs	r3, r2
 8000576:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	693a      	ldr	r2, [r7, #16]
 800057c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800057e:	687b      	ldr	r3, [r7, #4]
 8000580:	68db      	ldr	r3, [r3, #12]
 8000582:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 8000584:	697b      	ldr	r3, [r7, #20]
 8000586:	005b      	lsls	r3, r3, #1
 8000588:	2203      	movs	r2, #3
 800058a:	fa02 f303 	lsl.w	r3, r2, r3
 800058e:	43db      	mvns	r3, r3
 8000590:	693a      	ldr	r2, [r7, #16]
 8000592:	4013      	ands	r3, r2
 8000594:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 8000596:	683b      	ldr	r3, [r7, #0]
 8000598:	689a      	ldr	r2, [r3, #8]
 800059a:	697b      	ldr	r3, [r7, #20]
 800059c:	005b      	lsls	r3, r3, #1
 800059e:	fa02 f303 	lsl.w	r3, r2, r3
 80005a2:	693a      	ldr	r2, [r7, #16]
 80005a4:	4313      	orrs	r3, r2
 80005a6:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	693a      	ldr	r2, [r7, #16]
 80005ac:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 80005ae:	683b      	ldr	r3, [r7, #0]
 80005b0:	685b      	ldr	r3, [r3, #4]
 80005b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005b6:	2b00      	cmp	r3, #0
 80005b8:	f000 80ac 	beq.w	8000714 <HAL_GPIO_Init+0x2d4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80005bc:	4a5d      	ldr	r2, [pc, #372]	; (8000734 <HAL_GPIO_Init+0x2f4>)
 80005be:	4b5d      	ldr	r3, [pc, #372]	; (8000734 <HAL_GPIO_Init+0x2f4>)
 80005c0:	6a1b      	ldr	r3, [r3, #32]
 80005c2:	f043 0301 	orr.w	r3, r3, #1
 80005c6:	6213      	str	r3, [r2, #32]
 80005c8:	4b5a      	ldr	r3, [pc, #360]	; (8000734 <HAL_GPIO_Init+0x2f4>)
 80005ca:	6a1b      	ldr	r3, [r3, #32]
 80005cc:	f003 0301 	and.w	r3, r3, #1
 80005d0:	60bb      	str	r3, [r7, #8]
 80005d2:	68bb      	ldr	r3, [r7, #8]
        
        temp = SYSCFG->EXTICR[position >> 2];
 80005d4:	4a58      	ldr	r2, [pc, #352]	; (8000738 <HAL_GPIO_Init+0x2f8>)
 80005d6:	697b      	ldr	r3, [r7, #20]
 80005d8:	089b      	lsrs	r3, r3, #2
 80005da:	3302      	adds	r3, #2
 80005dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80005e0:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 80005e2:	697b      	ldr	r3, [r7, #20]
 80005e4:	f003 0303 	and.w	r3, r3, #3
 80005e8:	009b      	lsls	r3, r3, #2
 80005ea:	220f      	movs	r2, #15
 80005ec:	fa02 f303 	lsl.w	r3, r2, r3
 80005f0:	43db      	mvns	r3, r3
 80005f2:	693a      	ldr	r2, [r7, #16]
 80005f4:	4013      	ands	r3, r2
 80005f6:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	4a50      	ldr	r2, [pc, #320]	; (800073c <HAL_GPIO_Init+0x2fc>)
 80005fc:	4293      	cmp	r3, r2
 80005fe:	d025      	beq.n	800064c <HAL_GPIO_Init+0x20c>
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	4a4f      	ldr	r2, [pc, #316]	; (8000740 <HAL_GPIO_Init+0x300>)
 8000604:	4293      	cmp	r3, r2
 8000606:	d01f      	beq.n	8000648 <HAL_GPIO_Init+0x208>
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	4a4e      	ldr	r2, [pc, #312]	; (8000744 <HAL_GPIO_Init+0x304>)
 800060c:	4293      	cmp	r3, r2
 800060e:	d019      	beq.n	8000644 <HAL_GPIO_Init+0x204>
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	4a4d      	ldr	r2, [pc, #308]	; (8000748 <HAL_GPIO_Init+0x308>)
 8000614:	4293      	cmp	r3, r2
 8000616:	d013      	beq.n	8000640 <HAL_GPIO_Init+0x200>
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	4a4c      	ldr	r2, [pc, #304]	; (800074c <HAL_GPIO_Init+0x30c>)
 800061c:	4293      	cmp	r3, r2
 800061e:	d00d      	beq.n	800063c <HAL_GPIO_Init+0x1fc>
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	4a4b      	ldr	r2, [pc, #300]	; (8000750 <HAL_GPIO_Init+0x310>)
 8000624:	4293      	cmp	r3, r2
 8000626:	d007      	beq.n	8000638 <HAL_GPIO_Init+0x1f8>
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	4a4a      	ldr	r2, [pc, #296]	; (8000754 <HAL_GPIO_Init+0x314>)
 800062c:	4293      	cmp	r3, r2
 800062e:	d101      	bne.n	8000634 <HAL_GPIO_Init+0x1f4>
 8000630:	2306      	movs	r3, #6
 8000632:	e00c      	b.n	800064e <HAL_GPIO_Init+0x20e>
 8000634:	2307      	movs	r3, #7
 8000636:	e00a      	b.n	800064e <HAL_GPIO_Init+0x20e>
 8000638:	2305      	movs	r3, #5
 800063a:	e008      	b.n	800064e <HAL_GPIO_Init+0x20e>
 800063c:	2304      	movs	r3, #4
 800063e:	e006      	b.n	800064e <HAL_GPIO_Init+0x20e>
 8000640:	2303      	movs	r3, #3
 8000642:	e004      	b.n	800064e <HAL_GPIO_Init+0x20e>
 8000644:	2302      	movs	r3, #2
 8000646:	e002      	b.n	800064e <HAL_GPIO_Init+0x20e>
 8000648:	2301      	movs	r3, #1
 800064a:	e000      	b.n	800064e <HAL_GPIO_Init+0x20e>
 800064c:	2300      	movs	r3, #0
 800064e:	697a      	ldr	r2, [r7, #20]
 8000650:	f002 0203 	and.w	r2, r2, #3
 8000654:	0092      	lsls	r2, r2, #2
 8000656:	4093      	lsls	r3, r2
 8000658:	693a      	ldr	r2, [r7, #16]
 800065a:	4313      	orrs	r3, r2
 800065c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 800065e:	4936      	ldr	r1, [pc, #216]	; (8000738 <HAL_GPIO_Init+0x2f8>)
 8000660:	697b      	ldr	r3, [r7, #20]
 8000662:	089b      	lsrs	r3, r3, #2
 8000664:	3302      	adds	r3, #2
 8000666:	693a      	ldr	r2, [r7, #16]
 8000668:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800066c:	4b3a      	ldr	r3, [pc, #232]	; (8000758 <HAL_GPIO_Init+0x318>)
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8000672:	68fb      	ldr	r3, [r7, #12]
 8000674:	43db      	mvns	r3, r3
 8000676:	693a      	ldr	r2, [r7, #16]
 8000678:	4013      	ands	r3, r2
 800067a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800067c:	683b      	ldr	r3, [r7, #0]
 800067e:	685b      	ldr	r3, [r3, #4]
 8000680:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000684:	2b00      	cmp	r3, #0
 8000686:	d003      	beq.n	8000690 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(temp, iocurrent); 
 8000688:	693a      	ldr	r2, [r7, #16]
 800068a:	68fb      	ldr	r3, [r7, #12]
 800068c:	4313      	orrs	r3, r2
 800068e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000690:	4a31      	ldr	r2, [pc, #196]	; (8000758 <HAL_GPIO_Init+0x318>)
 8000692:	693b      	ldr	r3, [r7, #16]
 8000694:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000696:	4b30      	ldr	r3, [pc, #192]	; (8000758 <HAL_GPIO_Init+0x318>)
 8000698:	685b      	ldr	r3, [r3, #4]
 800069a:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);      
 800069c:	68fb      	ldr	r3, [r7, #12]
 800069e:	43db      	mvns	r3, r3
 80006a0:	693a      	ldr	r2, [r7, #16]
 80006a2:	4013      	ands	r3, r2
 80006a4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80006a6:	683b      	ldr	r3, [r7, #0]
 80006a8:	685b      	ldr	r3, [r3, #4]
 80006aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	d003      	beq.n	80006ba <HAL_GPIO_Init+0x27a>
        {
          SET_BIT(temp, iocurrent); 
 80006b2:	693a      	ldr	r2, [r7, #16]
 80006b4:	68fb      	ldr	r3, [r7, #12]
 80006b6:	4313      	orrs	r3, r2
 80006b8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80006ba:	4a27      	ldr	r2, [pc, #156]	; (8000758 <HAL_GPIO_Init+0x318>)
 80006bc:	693b      	ldr	r3, [r7, #16]
 80006be:	6053      	str	r3, [r2, #4]
  
        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80006c0:	4b25      	ldr	r3, [pc, #148]	; (8000758 <HAL_GPIO_Init+0x318>)
 80006c2:	689b      	ldr	r3, [r3, #8]
 80006c4:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 80006c6:	68fb      	ldr	r3, [r7, #12]
 80006c8:	43db      	mvns	r3, r3
 80006ca:	693a      	ldr	r2, [r7, #16]
 80006cc:	4013      	ands	r3, r2
 80006ce:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80006d0:	683b      	ldr	r3, [r7, #0]
 80006d2:	685b      	ldr	r3, [r3, #4]
 80006d4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d003      	beq.n	80006e4 <HAL_GPIO_Init+0x2a4>
        {
          SET_BIT(temp, iocurrent); 
 80006dc:	693a      	ldr	r2, [r7, #16]
 80006de:	68fb      	ldr	r3, [r7, #12]
 80006e0:	4313      	orrs	r3, r2
 80006e2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80006e4:	4a1c      	ldr	r2, [pc, #112]	; (8000758 <HAL_GPIO_Init+0x318>)
 80006e6:	693b      	ldr	r3, [r7, #16]
 80006e8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80006ea:	4b1b      	ldr	r3, [pc, #108]	; (8000758 <HAL_GPIO_Init+0x318>)
 80006ec:	68db      	ldr	r3, [r3, #12]
 80006ee:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 80006f0:	68fb      	ldr	r3, [r7, #12]
 80006f2:	43db      	mvns	r3, r3
 80006f4:	693a      	ldr	r2, [r7, #16]
 80006f6:	4013      	ands	r3, r2
 80006f8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80006fa:	683b      	ldr	r3, [r7, #0]
 80006fc:	685b      	ldr	r3, [r3, #4]
 80006fe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000702:	2b00      	cmp	r3, #0
 8000704:	d003      	beq.n	800070e <HAL_GPIO_Init+0x2ce>
        {
          SET_BIT(temp, iocurrent); 
 8000706:	693a      	ldr	r2, [r7, #16]
 8000708:	68fb      	ldr	r3, [r7, #12]
 800070a:	4313      	orrs	r3, r2
 800070c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800070e:	4a12      	ldr	r2, [pc, #72]	; (8000758 <HAL_GPIO_Init+0x318>)
 8000710:	693b      	ldr	r3, [r7, #16]
 8000712:	60d3      	str	r3, [r2, #12]
      }
    }
    
    position++;
 8000714:	697b      	ldr	r3, [r7, #20]
 8000716:	3301      	adds	r3, #1
 8000718:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 800071a:	683b      	ldr	r3, [r7, #0]
 800071c:	681a      	ldr	r2, [r3, #0]
 800071e:	697b      	ldr	r3, [r7, #20]
 8000720:	fa22 f303 	lsr.w	r3, r2, r3
 8000724:	2b00      	cmp	r3, #0
 8000726:	f47f ae97 	bne.w	8000458 <HAL_GPIO_Init+0x18>
  } 
}
 800072a:	bf00      	nop
 800072c:	371c      	adds	r7, #28
 800072e:	46bd      	mov	sp, r7
 8000730:	bc80      	pop	{r7}
 8000732:	4770      	bx	lr
 8000734:	40023800 	.word	0x40023800
 8000738:	40010000 	.word	0x40010000
 800073c:	40020000 	.word	0x40020000
 8000740:	40020400 	.word	0x40020400
 8000744:	40020800 	.word	0x40020800
 8000748:	40020c00 	.word	0x40020c00
 800074c:	40021000 	.word	0x40021000
 8000750:	40021400 	.word	0x40021400
 8000754:	40021800 	.word	0x40021800
 8000758:	40010400 	.word	0x40010400

0800075c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800075c:	b480      	push	{r7}
 800075e:	b085      	sub	sp, #20
 8000760:	af00      	add	r7, sp, #0
 8000762:	6078      	str	r0, [r7, #4]
 8000764:	460b      	mov	r3, r1
 8000766:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	691a      	ldr	r2, [r3, #16]
 800076c:	887b      	ldrh	r3, [r7, #2]
 800076e:	4013      	ands	r3, r2
 8000770:	2b00      	cmp	r3, #0
 8000772:	d002      	beq.n	800077a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000774:	2301      	movs	r3, #1
 8000776:	73fb      	strb	r3, [r7, #15]
 8000778:	e001      	b.n	800077e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800077a:	2300      	movs	r3, #0
 800077c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800077e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000780:	4618      	mov	r0, r3
 8000782:	3714      	adds	r7, #20
 8000784:	46bd      	mov	sp, r7
 8000786:	bc80      	pop	{r7}
 8000788:	4770      	bx	lr

0800078a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800078a:	b480      	push	{r7}
 800078c:	b083      	sub	sp, #12
 800078e:	af00      	add	r7, sp, #0
 8000790:	6078      	str	r0, [r7, #4]
 8000792:	460b      	mov	r3, r1
 8000794:	807b      	strh	r3, [r7, #2]
 8000796:	4613      	mov	r3, r2
 8000798:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800079a:	787b      	ldrb	r3, [r7, #1]
 800079c:	2b00      	cmp	r3, #0
 800079e:	d003      	beq.n	80007a8 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80007a0:	887a      	ldrh	r2, [r7, #2]
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
  }
}
 80007a6:	e003      	b.n	80007b0 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 80007a8:	887b      	ldrh	r3, [r7, #2]
 80007aa:	041a      	lsls	r2, r3, #16
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	619a      	str	r2, [r3, #24]
}
 80007b0:	bf00      	nop
 80007b2:	370c      	adds	r7, #12
 80007b4:	46bd      	mov	sp, r7
 80007b6:	bc80      	pop	{r7}
 80007b8:	4770      	bx	lr
	...

080007bc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b0e6      	sub	sp, #408	; 0x198
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	1d3b      	adds	r3, r7, #4
 80007c4:	6018      	str	r0, [r3, #0]
   uint32_t tickstart = 0U;
 80007c6:	2300      	movs	r3, #0
 80007c8:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80007cc:	1d3b      	adds	r3, r7, #4
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	681b      	ldr	r3, [r3, #0]
 80007d2:	f003 0301 	and.w	r3, r3, #1
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	f000 8123 	beq.w	8000a22 <HAL_RCC_OscConfig+0x266>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80007dc:	4bbc      	ldr	r3, [pc, #752]	; (8000ad0 <HAL_RCC_OscConfig+0x314>)
 80007de:	689b      	ldr	r3, [r3, #8]
 80007e0:	f003 030c 	and.w	r3, r3, #12
 80007e4:	2b08      	cmp	r3, #8
 80007e6:	d00c      	beq.n	8000802 <HAL_RCC_OscConfig+0x46>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80007e8:	4bb9      	ldr	r3, [pc, #740]	; (8000ad0 <HAL_RCC_OscConfig+0x314>)
 80007ea:	689b      	ldr	r3, [r3, #8]
 80007ec:	f003 030c 	and.w	r3, r3, #12
 80007f0:	2b0c      	cmp	r3, #12
 80007f2:	d146      	bne.n	8000882 <HAL_RCC_OscConfig+0xc6>
 80007f4:	4bb6      	ldr	r3, [pc, #728]	; (8000ad0 <HAL_RCC_OscConfig+0x314>)
 80007f6:	689b      	ldr	r3, [r3, #8]
 80007f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80007fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000800:	d13f      	bne.n	8000882 <HAL_RCC_OscConfig+0xc6>
 8000802:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000806:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800080a:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 800080e:	fa93 f3a3 	rbit	r3, r3
 8000812:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8000816:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800081a:	fab3 f383 	clz	r3, r3
 800081e:	b2db      	uxtb	r3, r3
 8000820:	095b      	lsrs	r3, r3, #5
 8000822:	b2db      	uxtb	r3, r3
 8000824:	f043 0301 	orr.w	r3, r3, #1
 8000828:	b2db      	uxtb	r3, r3
 800082a:	2b01      	cmp	r3, #1
 800082c:	d102      	bne.n	8000834 <HAL_RCC_OscConfig+0x78>
 800082e:	4ba8      	ldr	r3, [pc, #672]	; (8000ad0 <HAL_RCC_OscConfig+0x314>)
 8000830:	681b      	ldr	r3, [r3, #0]
 8000832:	e001      	b.n	8000838 <HAL_RCC_OscConfig+0x7c>
 8000834:	4ba6      	ldr	r3, [pc, #664]	; (8000ad0 <HAL_RCC_OscConfig+0x314>)
 8000836:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000838:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800083c:	f8c7 2184 	str.w	r2, [r7, #388]	; 0x184
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000840:	f8d7 2184 	ldr.w	r2, [r7, #388]	; 0x184
 8000844:	fa92 f2a2 	rbit	r2, r2
 8000848:	f8c7 2180 	str.w	r2, [r7, #384]	; 0x180
  return(result);
 800084c:	f8d7 2180 	ldr.w	r2, [r7, #384]	; 0x180
 8000850:	fab2 f282 	clz	r2, r2
 8000854:	b252      	sxtb	r2, r2
 8000856:	f042 0220 	orr.w	r2, r2, #32
 800085a:	b252      	sxtb	r2, r2
 800085c:	b2d2      	uxtb	r2, r2
 800085e:	f002 021f 	and.w	r2, r2, #31
 8000862:	2101      	movs	r1, #1
 8000864:	fa01 f202 	lsl.w	r2, r1, r2
 8000868:	4013      	ands	r3, r2
 800086a:	2b00      	cmp	r3, #0
 800086c:	f000 80d8 	beq.w	8000a20 <HAL_RCC_OscConfig+0x264>
 8000870:	1d3b      	adds	r3, r7, #4
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	685b      	ldr	r3, [r3, #4]
 8000876:	2b00      	cmp	r3, #0
 8000878:	f040 80d2 	bne.w	8000a20 <HAL_RCC_OscConfig+0x264>
      {
        return HAL_ERROR;
 800087c:	2301      	movs	r3, #1
 800087e:	f000 bf10 	b.w	80016a2 <HAL_RCC_OscConfig+0xee6>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000882:	1d3b      	adds	r3, r7, #4
 8000884:	681b      	ldr	r3, [r3, #0]
 8000886:	685b      	ldr	r3, [r3, #4]
 8000888:	2b01      	cmp	r3, #1
 800088a:	d106      	bne.n	800089a <HAL_RCC_OscConfig+0xde>
 800088c:	4a90      	ldr	r2, [pc, #576]	; (8000ad0 <HAL_RCC_OscConfig+0x314>)
 800088e:	4b90      	ldr	r3, [pc, #576]	; (8000ad0 <HAL_RCC_OscConfig+0x314>)
 8000890:	681b      	ldr	r3, [r3, #0]
 8000892:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000896:	6013      	str	r3, [r2, #0]
 8000898:	e02f      	b.n	80008fa <HAL_RCC_OscConfig+0x13e>
 800089a:	1d3b      	adds	r3, r7, #4
 800089c:	681b      	ldr	r3, [r3, #0]
 800089e:	685b      	ldr	r3, [r3, #4]
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d10c      	bne.n	80008be <HAL_RCC_OscConfig+0x102>
 80008a4:	4a8a      	ldr	r2, [pc, #552]	; (8000ad0 <HAL_RCC_OscConfig+0x314>)
 80008a6:	4b8a      	ldr	r3, [pc, #552]	; (8000ad0 <HAL_RCC_OscConfig+0x314>)
 80008a8:	681b      	ldr	r3, [r3, #0]
 80008aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80008ae:	6013      	str	r3, [r2, #0]
 80008b0:	4a87      	ldr	r2, [pc, #540]	; (8000ad0 <HAL_RCC_OscConfig+0x314>)
 80008b2:	4b87      	ldr	r3, [pc, #540]	; (8000ad0 <HAL_RCC_OscConfig+0x314>)
 80008b4:	681b      	ldr	r3, [r3, #0]
 80008b6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80008ba:	6013      	str	r3, [r2, #0]
 80008bc:	e01d      	b.n	80008fa <HAL_RCC_OscConfig+0x13e>
 80008be:	1d3b      	adds	r3, r7, #4
 80008c0:	681b      	ldr	r3, [r3, #0]
 80008c2:	685b      	ldr	r3, [r3, #4]
 80008c4:	2b05      	cmp	r3, #5
 80008c6:	d10c      	bne.n	80008e2 <HAL_RCC_OscConfig+0x126>
 80008c8:	4a81      	ldr	r2, [pc, #516]	; (8000ad0 <HAL_RCC_OscConfig+0x314>)
 80008ca:	4b81      	ldr	r3, [pc, #516]	; (8000ad0 <HAL_RCC_OscConfig+0x314>)
 80008cc:	681b      	ldr	r3, [r3, #0]
 80008ce:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80008d2:	6013      	str	r3, [r2, #0]
 80008d4:	4a7e      	ldr	r2, [pc, #504]	; (8000ad0 <HAL_RCC_OscConfig+0x314>)
 80008d6:	4b7e      	ldr	r3, [pc, #504]	; (8000ad0 <HAL_RCC_OscConfig+0x314>)
 80008d8:	681b      	ldr	r3, [r3, #0]
 80008da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80008de:	6013      	str	r3, [r2, #0]
 80008e0:	e00b      	b.n	80008fa <HAL_RCC_OscConfig+0x13e>
 80008e2:	4a7b      	ldr	r2, [pc, #492]	; (8000ad0 <HAL_RCC_OscConfig+0x314>)
 80008e4:	4b7a      	ldr	r3, [pc, #488]	; (8000ad0 <HAL_RCC_OscConfig+0x314>)
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80008ec:	6013      	str	r3, [r2, #0]
 80008ee:	4a78      	ldr	r2, [pc, #480]	; (8000ad0 <HAL_RCC_OscConfig+0x314>)
 80008f0:	4b77      	ldr	r3, [pc, #476]	; (8000ad0 <HAL_RCC_OscConfig+0x314>)
 80008f2:	681b      	ldr	r3, [r3, #0]
 80008f4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80008f8:	6013      	str	r3, [r2, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80008fa:	1d3b      	adds	r3, r7, #4
 80008fc:	681b      	ldr	r3, [r3, #0]
 80008fe:	685b      	ldr	r3, [r3, #4]
 8000900:	2b00      	cmp	r3, #0
 8000902:	d046      	beq.n	8000992 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000904:	f7ff fc72 	bl	80001ec <HAL_GetTick>
 8000908:	f8c7 0190 	str.w	r0, [r7, #400]	; 0x190
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800090c:	e00a      	b.n	8000924 <HAL_RCC_OscConfig+0x168>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800090e:	f7ff fc6d 	bl	80001ec <HAL_GetTick>
 8000912:	4602      	mov	r2, r0
 8000914:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8000918:	1ad3      	subs	r3, r2, r3
 800091a:	2b64      	cmp	r3, #100	; 0x64
 800091c:	d902      	bls.n	8000924 <HAL_RCC_OscConfig+0x168>
          {
            return HAL_TIMEOUT;
 800091e:	2303      	movs	r3, #3
 8000920:	f000 bebf 	b.w	80016a2 <HAL_RCC_OscConfig+0xee6>
 8000924:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000928:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800092c:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 8000930:	fa93 f3a3 	rbit	r3, r3
 8000934:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
  return(result);
 8000938:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800093c:	fab3 f383 	clz	r3, r3
 8000940:	b2db      	uxtb	r3, r3
 8000942:	095b      	lsrs	r3, r3, #5
 8000944:	b2db      	uxtb	r3, r3
 8000946:	f043 0301 	orr.w	r3, r3, #1
 800094a:	b2db      	uxtb	r3, r3
 800094c:	2b01      	cmp	r3, #1
 800094e:	d102      	bne.n	8000956 <HAL_RCC_OscConfig+0x19a>
 8000950:	4b5f      	ldr	r3, [pc, #380]	; (8000ad0 <HAL_RCC_OscConfig+0x314>)
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	e001      	b.n	800095a <HAL_RCC_OscConfig+0x19e>
 8000956:	4b5e      	ldr	r3, [pc, #376]	; (8000ad0 <HAL_RCC_OscConfig+0x314>)
 8000958:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800095a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800095e:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000962:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8000966:	fa92 f2a2 	rbit	r2, r2
 800096a:	f8c7 2170 	str.w	r2, [r7, #368]	; 0x170
  return(result);
 800096e:	f8d7 2170 	ldr.w	r2, [r7, #368]	; 0x170
 8000972:	fab2 f282 	clz	r2, r2
 8000976:	b252      	sxtb	r2, r2
 8000978:	f042 0220 	orr.w	r2, r2, #32
 800097c:	b252      	sxtb	r2, r2
 800097e:	b2d2      	uxtb	r2, r2
 8000980:	f002 021f 	and.w	r2, r2, #31
 8000984:	2101      	movs	r1, #1
 8000986:	fa01 f202 	lsl.w	r2, r1, r2
 800098a:	4013      	ands	r3, r2
 800098c:	2b00      	cmp	r3, #0
 800098e:	d0be      	beq.n	800090e <HAL_RCC_OscConfig+0x152>
 8000990:	e047      	b.n	8000a22 <HAL_RCC_OscConfig+0x266>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000992:	f7ff fc2b 	bl	80001ec <HAL_GetTick>
 8000996:	f8c7 0190 	str.w	r0, [r7, #400]	; 0x190
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800099a:	e00a      	b.n	80009b2 <HAL_RCC_OscConfig+0x1f6>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800099c:	f7ff fc26 	bl	80001ec <HAL_GetTick>
 80009a0:	4602      	mov	r2, r0
 80009a2:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80009a6:	1ad3      	subs	r3, r2, r3
 80009a8:	2b64      	cmp	r3, #100	; 0x64
 80009aa:	d902      	bls.n	80009b2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80009ac:	2303      	movs	r3, #3
 80009ae:	f000 be78 	b.w	80016a2 <HAL_RCC_OscConfig+0xee6>
 80009b2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80009b6:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80009ba:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 80009be:	fa93 f3a3 	rbit	r3, r3
 80009c2:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return(result);
 80009c6:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80009ca:	fab3 f383 	clz	r3, r3
 80009ce:	b2db      	uxtb	r3, r3
 80009d0:	095b      	lsrs	r3, r3, #5
 80009d2:	b2db      	uxtb	r3, r3
 80009d4:	f043 0301 	orr.w	r3, r3, #1
 80009d8:	b2db      	uxtb	r3, r3
 80009da:	2b01      	cmp	r3, #1
 80009dc:	d102      	bne.n	80009e4 <HAL_RCC_OscConfig+0x228>
 80009de:	4b3c      	ldr	r3, [pc, #240]	; (8000ad0 <HAL_RCC_OscConfig+0x314>)
 80009e0:	681b      	ldr	r3, [r3, #0]
 80009e2:	e001      	b.n	80009e8 <HAL_RCC_OscConfig+0x22c>
 80009e4:	4b3a      	ldr	r3, [pc, #232]	; (8000ad0 <HAL_RCC_OscConfig+0x314>)
 80009e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80009e8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80009ec:	f8c7 2164 	str.w	r2, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80009f0:	f8d7 2164 	ldr.w	r2, [r7, #356]	; 0x164
 80009f4:	fa92 f2a2 	rbit	r2, r2
 80009f8:	f8c7 2160 	str.w	r2, [r7, #352]	; 0x160
  return(result);
 80009fc:	f8d7 2160 	ldr.w	r2, [r7, #352]	; 0x160
 8000a00:	fab2 f282 	clz	r2, r2
 8000a04:	b252      	sxtb	r2, r2
 8000a06:	f042 0220 	orr.w	r2, r2, #32
 8000a0a:	b252      	sxtb	r2, r2
 8000a0c:	b2d2      	uxtb	r2, r2
 8000a0e:	f002 021f 	and.w	r2, r2, #31
 8000a12:	2101      	movs	r1, #1
 8000a14:	fa01 f202 	lsl.w	r2, r1, r2
 8000a18:	4013      	ands	r3, r2
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d1be      	bne.n	800099c <HAL_RCC_OscConfig+0x1e0>
 8000a1e:	e000      	b.n	8000a22 <HAL_RCC_OscConfig+0x266>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000a20:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000a22:	1d3b      	adds	r3, r7, #4
 8000a24:	681b      	ldr	r3, [r3, #0]
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	f003 0302 	and.w	r3, r3, #2
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	f000 813e 	beq.w	8000cae <HAL_RCC_OscConfig+0x4f2>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000a32:	4b27      	ldr	r3, [pc, #156]	; (8000ad0 <HAL_RCC_OscConfig+0x314>)
 8000a34:	689b      	ldr	r3, [r3, #8]
 8000a36:	f003 030c 	and.w	r3, r3, #12
 8000a3a:	2b04      	cmp	r3, #4
 8000a3c:	d00b      	beq.n	8000a56 <HAL_RCC_OscConfig+0x29a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000a3e:	4b24      	ldr	r3, [pc, #144]	; (8000ad0 <HAL_RCC_OscConfig+0x314>)
 8000a40:	689b      	ldr	r3, [r3, #8]
 8000a42:	f003 030c 	and.w	r3, r3, #12
 8000a46:	2b0c      	cmp	r3, #12
 8000a48:	d15f      	bne.n	8000b0a <HAL_RCC_OscConfig+0x34e>
 8000a4a:	4b21      	ldr	r3, [pc, #132]	; (8000ad0 <HAL_RCC_OscConfig+0x314>)
 8000a4c:	689b      	ldr	r3, [r3, #8]
 8000a4e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d159      	bne.n	8000b0a <HAL_RCC_OscConfig+0x34e>
 8000a56:	2302      	movs	r3, #2
 8000a58:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000a5c:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8000a60:	fa93 f3a3 	rbit	r3, r3
 8000a64:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
  return(result);
 8000a68:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000a6c:	fab3 f383 	clz	r3, r3
 8000a70:	b2db      	uxtb	r3, r3
 8000a72:	095b      	lsrs	r3, r3, #5
 8000a74:	b2db      	uxtb	r3, r3
 8000a76:	f043 0301 	orr.w	r3, r3, #1
 8000a7a:	b2db      	uxtb	r3, r3
 8000a7c:	2b01      	cmp	r3, #1
 8000a7e:	d102      	bne.n	8000a86 <HAL_RCC_OscConfig+0x2ca>
 8000a80:	4b13      	ldr	r3, [pc, #76]	; (8000ad0 <HAL_RCC_OscConfig+0x314>)
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	e001      	b.n	8000a8a <HAL_RCC_OscConfig+0x2ce>
 8000a86:	4b12      	ldr	r3, [pc, #72]	; (8000ad0 <HAL_RCC_OscConfig+0x314>)
 8000a88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000a8a:	2202      	movs	r2, #2
 8000a8c:	f8c7 2154 	str.w	r2, [r7, #340]	; 0x154
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000a90:	f8d7 2154 	ldr.w	r2, [r7, #340]	; 0x154
 8000a94:	fa92 f2a2 	rbit	r2, r2
 8000a98:	f8c7 2150 	str.w	r2, [r7, #336]	; 0x150
  return(result);
 8000a9c:	f8d7 2150 	ldr.w	r2, [r7, #336]	; 0x150
 8000aa0:	fab2 f282 	clz	r2, r2
 8000aa4:	b252      	sxtb	r2, r2
 8000aa6:	f042 0220 	orr.w	r2, r2, #32
 8000aaa:	b252      	sxtb	r2, r2
 8000aac:	b2d2      	uxtb	r2, r2
 8000aae:	f002 021f 	and.w	r2, r2, #31
 8000ab2:	2101      	movs	r1, #1
 8000ab4:	fa01 f202 	lsl.w	r2, r1, r2
 8000ab8:	4013      	ands	r3, r2
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d00a      	beq.n	8000ad4 <HAL_RCC_OscConfig+0x318>
 8000abe:	1d3b      	adds	r3, r7, #4
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	68db      	ldr	r3, [r3, #12]
 8000ac4:	2b01      	cmp	r3, #1
 8000ac6:	d005      	beq.n	8000ad4 <HAL_RCC_OscConfig+0x318>
      {
        return HAL_ERROR;
 8000ac8:	2301      	movs	r3, #1
 8000aca:	f000 bdea 	b.w	80016a2 <HAL_RCC_OscConfig+0xee6>
 8000ace:	bf00      	nop
 8000ad0:	40023800 	.word	0x40023800
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000ad4:	48b9      	ldr	r0, [pc, #740]	; (8000dbc <HAL_RCC_OscConfig+0x600>)
 8000ad6:	4bb9      	ldr	r3, [pc, #740]	; (8000dbc <HAL_RCC_OscConfig+0x600>)
 8000ad8:	685b      	ldr	r3, [r3, #4]
 8000ada:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8000ade:	1d3b      	adds	r3, r7, #4
 8000ae0:	681b      	ldr	r3, [r3, #0]
 8000ae2:	6919      	ldr	r1, [r3, #16]
 8000ae4:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8000ae8:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000aec:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8000af0:	fa93 f3a3 	rbit	r3, r3
 8000af4:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
  return(result);
 8000af8:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8000afc:	fab3 f383 	clz	r3, r3
 8000b00:	fa01 f303 	lsl.w	r3, r1, r3
 8000b04:	4313      	orrs	r3, r2
 8000b06:	6043      	str	r3, [r0, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000b08:	e0d1      	b.n	8000cae <HAL_RCC_OscConfig+0x4f2>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000b0a:	1d3b      	adds	r3, r7, #4
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	68db      	ldr	r3, [r3, #12]
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d073      	beq.n	8000bfc <HAL_RCC_OscConfig+0x440>
 8000b14:	2301      	movs	r3, #1
 8000b16:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000b1a:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8000b1e:	fa93 f3a3 	rbit	r3, r3
 8000b22:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
  return(result);
 8000b26:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000b2a:	fab3 f383 	clz	r3, r3
 8000b2e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000b32:	f503 138e 	add.w	r3, r3, #1163264	; 0x11c000
 8000b36:	009b      	lsls	r3, r3, #2
 8000b38:	461a      	mov	r2, r3
 8000b3a:	2301      	movs	r3, #1
 8000b3c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000b3e:	f7ff fb55 	bl	80001ec <HAL_GetTick>
 8000b42:	f8c7 0190 	str.w	r0, [r7, #400]	; 0x190
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000b46:	e00a      	b.n	8000b5e <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000b48:	f7ff fb50 	bl	80001ec <HAL_GetTick>
 8000b4c:	4602      	mov	r2, r0
 8000b4e:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8000b52:	1ad3      	subs	r3, r2, r3
 8000b54:	2b02      	cmp	r3, #2
 8000b56:	d902      	bls.n	8000b5e <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8000b58:	2303      	movs	r3, #3
 8000b5a:	f000 bda2 	b.w	80016a2 <HAL_RCC_OscConfig+0xee6>
 8000b5e:	2302      	movs	r3, #2
 8000b60:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000b64:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8000b68:	fa93 f3a3 	rbit	r3, r3
 8000b6c:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return(result);
 8000b70:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000b74:	fab3 f383 	clz	r3, r3
 8000b78:	b2db      	uxtb	r3, r3
 8000b7a:	095b      	lsrs	r3, r3, #5
 8000b7c:	b2db      	uxtb	r3, r3
 8000b7e:	f043 0301 	orr.w	r3, r3, #1
 8000b82:	b2db      	uxtb	r3, r3
 8000b84:	2b01      	cmp	r3, #1
 8000b86:	d102      	bne.n	8000b8e <HAL_RCC_OscConfig+0x3d2>
 8000b88:	4b8c      	ldr	r3, [pc, #560]	; (8000dbc <HAL_RCC_OscConfig+0x600>)
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	e001      	b.n	8000b92 <HAL_RCC_OscConfig+0x3d6>
 8000b8e:	4b8b      	ldr	r3, [pc, #556]	; (8000dbc <HAL_RCC_OscConfig+0x600>)
 8000b90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000b92:	2202      	movs	r2, #2
 8000b94:	f8c7 2134 	str.w	r2, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000b98:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 8000b9c:	fa92 f2a2 	rbit	r2, r2
 8000ba0:	f8c7 2130 	str.w	r2, [r7, #304]	; 0x130
  return(result);
 8000ba4:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 8000ba8:	fab2 f282 	clz	r2, r2
 8000bac:	b252      	sxtb	r2, r2
 8000bae:	f042 0220 	orr.w	r2, r2, #32
 8000bb2:	b252      	sxtb	r2, r2
 8000bb4:	b2d2      	uxtb	r2, r2
 8000bb6:	f002 021f 	and.w	r2, r2, #31
 8000bba:	2101      	movs	r1, #1
 8000bbc:	fa01 f202 	lsl.w	r2, r1, r2
 8000bc0:	4013      	ands	r3, r2
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d0c0      	beq.n	8000b48 <HAL_RCC_OscConfig+0x38c>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000bc6:	487d      	ldr	r0, [pc, #500]	; (8000dbc <HAL_RCC_OscConfig+0x600>)
 8000bc8:	4b7c      	ldr	r3, [pc, #496]	; (8000dbc <HAL_RCC_OscConfig+0x600>)
 8000bca:	685b      	ldr	r3, [r3, #4]
 8000bcc:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8000bd0:	1d3b      	adds	r3, r7, #4
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	6919      	ldr	r1, [r3, #16]
 8000bd6:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8000bda:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000bde:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8000be2:	fa93 f3a3 	rbit	r3, r3
 8000be6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  return(result);
 8000bea:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8000bee:	fab3 f383 	clz	r3, r3
 8000bf2:	fa01 f303 	lsl.w	r3, r1, r3
 8000bf6:	4313      	orrs	r3, r2
 8000bf8:	6043      	str	r3, [r0, #4]
 8000bfa:	e058      	b.n	8000cae <HAL_RCC_OscConfig+0x4f2>
 8000bfc:	2301      	movs	r3, #1
 8000bfe:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000c02:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8000c06:	fa93 f3a3 	rbit	r3, r3
 8000c0a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  return(result);
 8000c0e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000c12:	fab3 f383 	clz	r3, r3
 8000c16:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000c1a:	f503 138e 	add.w	r3, r3, #1163264	; 0x11c000
 8000c1e:	009b      	lsls	r3, r3, #2
 8000c20:	461a      	mov	r2, r3
 8000c22:	2300      	movs	r3, #0
 8000c24:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c26:	f7ff fae1 	bl	80001ec <HAL_GetTick>
 8000c2a:	f8c7 0190 	str.w	r0, [r7, #400]	; 0x190
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000c2e:	e00a      	b.n	8000c46 <HAL_RCC_OscConfig+0x48a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000c30:	f7ff fadc 	bl	80001ec <HAL_GetTick>
 8000c34:	4602      	mov	r2, r0
 8000c36:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8000c3a:	1ad3      	subs	r3, r2, r3
 8000c3c:	2b02      	cmp	r3, #2
 8000c3e:	d902      	bls.n	8000c46 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8000c40:	2303      	movs	r3, #3
 8000c42:	f000 bd2e 	b.w	80016a2 <HAL_RCC_OscConfig+0xee6>
 8000c46:	2302      	movs	r3, #2
 8000c48:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000c4c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8000c50:	fa93 f3a3 	rbit	r3, r3
 8000c54:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  return(result);
 8000c58:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000c5c:	fab3 f383 	clz	r3, r3
 8000c60:	b2db      	uxtb	r3, r3
 8000c62:	095b      	lsrs	r3, r3, #5
 8000c64:	b2db      	uxtb	r3, r3
 8000c66:	f043 0301 	orr.w	r3, r3, #1
 8000c6a:	b2db      	uxtb	r3, r3
 8000c6c:	2b01      	cmp	r3, #1
 8000c6e:	d102      	bne.n	8000c76 <HAL_RCC_OscConfig+0x4ba>
 8000c70:	4b52      	ldr	r3, [pc, #328]	; (8000dbc <HAL_RCC_OscConfig+0x600>)
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	e001      	b.n	8000c7a <HAL_RCC_OscConfig+0x4be>
 8000c76:	4b51      	ldr	r3, [pc, #324]	; (8000dbc <HAL_RCC_OscConfig+0x600>)
 8000c78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c7a:	2202      	movs	r2, #2
 8000c7c:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000c80:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8000c84:	fa92 f2a2 	rbit	r2, r2
 8000c88:	f8c7 2110 	str.w	r2, [r7, #272]	; 0x110
  return(result);
 8000c8c:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 8000c90:	fab2 f282 	clz	r2, r2
 8000c94:	b252      	sxtb	r2, r2
 8000c96:	f042 0220 	orr.w	r2, r2, #32
 8000c9a:	b252      	sxtb	r2, r2
 8000c9c:	b2d2      	uxtb	r2, r2
 8000c9e:	f002 021f 	and.w	r2, r2, #31
 8000ca2:	2101      	movs	r1, #1
 8000ca4:	fa01 f202 	lsl.w	r2, r1, r2
 8000ca8:	4013      	ands	r3, r2
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d1c0      	bne.n	8000c30 <HAL_RCC_OscConfig+0x474>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000cae:	1d3b      	adds	r3, r7, #4
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	f003 0310 	and.w	r3, r3, #16
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	f000 81c5 	beq.w	8001048 <HAL_RCC_OscConfig+0x88c>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI) )
 8000cbe:	4b3f      	ldr	r3, [pc, #252]	; (8000dbc <HAL_RCC_OscConfig+0x600>)
 8000cc0:	689b      	ldr	r3, [r3, #8]
 8000cc2:	f003 030c 	and.w	r3, r3, #12
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	f040 80de 	bne.w	8000e88 <HAL_RCC_OscConfig+0x6cc>
 8000ccc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000cd0:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000cd4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8000cd8:	fa93 f3a3 	rbit	r3, r3
 8000cdc:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
  return(result);
 8000ce0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != RESET) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000ce4:	fab3 f383 	clz	r3, r3
 8000ce8:	b2db      	uxtb	r3, r3
 8000cea:	095b      	lsrs	r3, r3, #5
 8000cec:	b2db      	uxtb	r3, r3
 8000cee:	f043 0301 	orr.w	r3, r3, #1
 8000cf2:	b2db      	uxtb	r3, r3
 8000cf4:	2b01      	cmp	r3, #1
 8000cf6:	d102      	bne.n	8000cfe <HAL_RCC_OscConfig+0x542>
 8000cf8:	4b30      	ldr	r3, [pc, #192]	; (8000dbc <HAL_RCC_OscConfig+0x600>)
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	e001      	b.n	8000d02 <HAL_RCC_OscConfig+0x546>
 8000cfe:	4b2f      	ldr	r3, [pc, #188]	; (8000dbc <HAL_RCC_OscConfig+0x600>)
 8000d00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d02:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d06:	f8c7 2104 	str.w	r2, [r7, #260]	; 0x104
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d0a:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 8000d0e:	fa92 f2a2 	rbit	r2, r2
 8000d12:	f8c7 2100 	str.w	r2, [r7, #256]	; 0x100
  return(result);
 8000d16:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
 8000d1a:	fab2 f282 	clz	r2, r2
 8000d1e:	b252      	sxtb	r2, r2
 8000d20:	f042 0220 	orr.w	r2, r2, #32
 8000d24:	b252      	sxtb	r2, r2
 8000d26:	b2d2      	uxtb	r2, r2
 8000d28:	f002 021f 	and.w	r2, r2, #31
 8000d2c:	2101      	movs	r1, #1
 8000d2e:	fa01 f202 	lsl.w	r2, r1, r2
 8000d32:	4013      	ands	r3, r2
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d007      	beq.n	8000d48 <HAL_RCC_OscConfig+0x58c>
 8000d38:	1d3b      	adds	r3, r7, #4
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	699b      	ldr	r3, [r3, #24]
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d102      	bne.n	8000d48 <HAL_RCC_OscConfig+0x58c>
      {
        return HAL_ERROR;
 8000d42:	2301      	movs	r3, #1
 8000d44:	f000 bcad 	b.w	80016a2 <HAL_RCC_OscConfig+0xee6>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8000d48:	1d3b      	adds	r3, r7, #4
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	6a1a      	ldr	r2, [r3, #32]
 8000d4e:	4b1b      	ldr	r3, [pc, #108]	; (8000dbc <HAL_RCC_OscConfig+0x600>)
 8000d50:	685b      	ldr	r3, [r3, #4]
 8000d52:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8000d56:	429a      	cmp	r2, r3
 8000d58:	d932      	bls.n	8000dc0 <HAL_RCC_OscConfig+0x604>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000d5a:	1d3b      	adds	r3, r7, #4
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	6a1b      	ldr	r3, [r3, #32]
 8000d60:	4618      	mov	r0, r3
 8000d62:	f000 ff51 	bl	8001c08 <RCC_SetFlashLatencyFromMSIRange>
 8000d66:	4603      	mov	r3, r0
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d002      	beq.n	8000d72 <HAL_RCC_OscConfig+0x5b6>
          {
            return HAL_ERROR;
 8000d6c:	2301      	movs	r3, #1
 8000d6e:	f000 bc98 	b.w	80016a2 <HAL_RCC_OscConfig+0xee6>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000d72:	4912      	ldr	r1, [pc, #72]	; (8000dbc <HAL_RCC_OscConfig+0x600>)
 8000d74:	4b11      	ldr	r3, [pc, #68]	; (8000dbc <HAL_RCC_OscConfig+0x600>)
 8000d76:	685b      	ldr	r3, [r3, #4]
 8000d78:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8000d7c:	1d3b      	adds	r3, r7, #4
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	6a1b      	ldr	r3, [r3, #32]
 8000d82:	4313      	orrs	r3, r2
 8000d84:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000d86:	480d      	ldr	r0, [pc, #52]	; (8000dbc <HAL_RCC_OscConfig+0x600>)
 8000d88:	4b0c      	ldr	r3, [pc, #48]	; (8000dbc <HAL_RCC_OscConfig+0x600>)
 8000d8a:	685b      	ldr	r3, [r3, #4]
 8000d8c:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8000d90:	1d3b      	adds	r3, r7, #4
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	69d9      	ldr	r1, [r3, #28]
 8000d96:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 8000d9a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d9e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8000da2:	fa93 f3a3 	rbit	r3, r3
 8000da6:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  return(result);
 8000daa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8000dae:	fab3 f383 	clz	r3, r3
 8000db2:	fa01 f303 	lsl.w	r3, r1, r3
 8000db6:	4313      	orrs	r3, r2
 8000db8:	6043      	str	r3, [r0, #4]
 8000dba:	e031      	b.n	8000e20 <HAL_RCC_OscConfig+0x664>
 8000dbc:	40023800 	.word	0x40023800
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000dc0:	49b9      	ldr	r1, [pc, #740]	; (80010a8 <HAL_RCC_OscConfig+0x8ec>)
 8000dc2:	4bb9      	ldr	r3, [pc, #740]	; (80010a8 <HAL_RCC_OscConfig+0x8ec>)
 8000dc4:	685b      	ldr	r3, [r3, #4]
 8000dc6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8000dca:	1d3b      	adds	r3, r7, #4
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	6a1b      	ldr	r3, [r3, #32]
 8000dd0:	4313      	orrs	r3, r2
 8000dd2:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000dd4:	48b4      	ldr	r0, [pc, #720]	; (80010a8 <HAL_RCC_OscConfig+0x8ec>)
 8000dd6:	4bb4      	ldr	r3, [pc, #720]	; (80010a8 <HAL_RCC_OscConfig+0x8ec>)
 8000dd8:	685b      	ldr	r3, [r3, #4]
 8000dda:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8000dde:	1d3b      	adds	r3, r7, #4
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	69d9      	ldr	r1, [r3, #28]
 8000de4:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 8000de8:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000dec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8000df0:	fa93 f3a3 	rbit	r3, r3
 8000df4:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
  return(result);
 8000df8:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8000dfc:	fab3 f383 	clz	r3, r3
 8000e00:	fa01 f303 	lsl.w	r3, r1, r3
 8000e04:	4313      	orrs	r3, r2
 8000e06:	6043      	str	r3, [r0, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000e08:	1d3b      	adds	r3, r7, #4
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	6a1b      	ldr	r3, [r3, #32]
 8000e0e:	4618      	mov	r0, r3
 8000e10:	f000 fefa 	bl	8001c08 <RCC_SetFlashLatencyFromMSIRange>
 8000e14:	4603      	mov	r3, r0
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d002      	beq.n	8000e20 <HAL_RCC_OscConfig+0x664>
          {
            return HAL_ERROR;
 8000e1a:	2301      	movs	r3, #1
 8000e1c:	f000 bc41 	b.w	80016a2 <HAL_RCC_OscConfig+0xee6>
          }          
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1U << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_BITNUMBER) + 1U))) 
 8000e20:	1d3b      	adds	r3, r7, #4
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	6a1a      	ldr	r2, [r3, #32]
 8000e26:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8000e2a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8000e32:	fa93 f3a3 	rbit	r3, r3
 8000e36:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  return(result);
 8000e3a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8000e3e:	fab3 f383 	clz	r3, r3
 8000e42:	fa22 f303 	lsr.w	r3, r2, r3
 8000e46:	3301      	adds	r3, #1
 8000e48:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000e4c:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_BITNUMBER)];
 8000e50:	4a95      	ldr	r2, [pc, #596]	; (80010a8 <HAL_RCC_OscConfig+0x8ec>)
 8000e52:	6892      	ldr	r2, [r2, #8]
 8000e54:	f002 01f0 	and.w	r1, r2, #240	; 0xf0
 8000e58:	22f0      	movs	r2, #240	; 0xf0
 8000e5a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e5e:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8000e62:	fa92 f2a2 	rbit	r2, r2
 8000e66:	f8c7 20e8 	str.w	r2, [r7, #232]	; 0xe8
  return(result);
 8000e6a:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8000e6e:	fab2 f282 	clz	r2, r2
 8000e72:	fa21 f202 	lsr.w	r2, r1, r2
 8000e76:	498d      	ldr	r1, [pc, #564]	; (80010ac <HAL_RCC_OscConfig+0x8f0>)
 8000e78:	5c8a      	ldrb	r2, [r1, r2]
 8000e7a:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1U << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_BITNUMBER) + 1U))) 
 8000e7c:	4a8c      	ldr	r2, [pc, #560]	; (80010b0 <HAL_RCC_OscConfig+0x8f4>)
 8000e7e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        HAL_InitTick (TICK_INT_PRIORITY);
 8000e80:	2000      	movs	r0, #0
 8000e82:	f7ff f989 	bl	8000198 <HAL_InitTick>
 8000e86:	e0df      	b.n	8001048 <HAL_RCC_OscConfig+0x88c>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8000e88:	1d3b      	adds	r3, r7, #4
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	699b      	ldr	r3, [r3, #24]
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d07f      	beq.n	8000f92 <HAL_RCC_OscConfig+0x7d6>
 8000e92:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000e96:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e9a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8000e9e:	fa93 f3a3 	rbit	r3, r3
 8000ea2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  return(result);
 8000ea6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8000eaa:	fab3 f383 	clz	r3, r3
 8000eae:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000eb2:	f503 138e 	add.w	r3, r3, #1163264	; 0x11c000
 8000eb6:	009b      	lsls	r3, r3, #2
 8000eb8:	461a      	mov	r2, r3
 8000eba:	2301      	movs	r3, #1
 8000ebc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ebe:	f7ff f995 	bl	80001ec <HAL_GetTick>
 8000ec2:	f8c7 0190 	str.w	r0, [r7, #400]	; 0x190

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == RESET)
 8000ec6:	e009      	b.n	8000edc <HAL_RCC_OscConfig+0x720>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000ec8:	f7ff f990 	bl	80001ec <HAL_GetTick>
 8000ecc:	4602      	mov	r2, r0
 8000ece:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8000ed2:	1ad3      	subs	r3, r2, r3
 8000ed4:	2b02      	cmp	r3, #2
 8000ed6:	d901      	bls.n	8000edc <HAL_RCC_OscConfig+0x720>
          {
            return HAL_TIMEOUT;
 8000ed8:	2303      	movs	r3, #3
 8000eda:	e3e2      	b.n	80016a2 <HAL_RCC_OscConfig+0xee6>
 8000edc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000ee0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ee4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8000ee8:	fa93 f3a3 	rbit	r3, r3
 8000eec:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  return(result);
 8000ef0:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == RESET)
 8000ef4:	fab3 f383 	clz	r3, r3
 8000ef8:	b2db      	uxtb	r3, r3
 8000efa:	095b      	lsrs	r3, r3, #5
 8000efc:	b2db      	uxtb	r3, r3
 8000efe:	f043 0301 	orr.w	r3, r3, #1
 8000f02:	b2db      	uxtb	r3, r3
 8000f04:	2b01      	cmp	r3, #1
 8000f06:	d102      	bne.n	8000f0e <HAL_RCC_OscConfig+0x752>
 8000f08:	4b67      	ldr	r3, [pc, #412]	; (80010a8 <HAL_RCC_OscConfig+0x8ec>)
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	e001      	b.n	8000f12 <HAL_RCC_OscConfig+0x756>
 8000f0e:	4b66      	ldr	r3, [pc, #408]	; (80010a8 <HAL_RCC_OscConfig+0x8ec>)
 8000f10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f12:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f16:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f1a:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8000f1e:	fa92 f2a2 	rbit	r2, r2
 8000f22:	f8c7 20c8 	str.w	r2, [r7, #200]	; 0xc8
  return(result);
 8000f26:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8000f2a:	fab2 f282 	clz	r2, r2
 8000f2e:	b252      	sxtb	r2, r2
 8000f30:	f042 0220 	orr.w	r2, r2, #32
 8000f34:	b252      	sxtb	r2, r2
 8000f36:	b2d2      	uxtb	r2, r2
 8000f38:	f002 021f 	and.w	r2, r2, #31
 8000f3c:	2101      	movs	r1, #1
 8000f3e:	fa01 f202 	lsl.w	r2, r1, r2
 8000f42:	4013      	ands	r3, r2
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d0bf      	beq.n	8000ec8 <HAL_RCC_OscConfig+0x70c>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000f48:	4957      	ldr	r1, [pc, #348]	; (80010a8 <HAL_RCC_OscConfig+0x8ec>)
 8000f4a:	4b57      	ldr	r3, [pc, #348]	; (80010a8 <HAL_RCC_OscConfig+0x8ec>)
 8000f4c:	685b      	ldr	r3, [r3, #4]
 8000f4e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8000f52:	1d3b      	adds	r3, r7, #4
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	6a1b      	ldr	r3, [r3, #32]
 8000f58:	4313      	orrs	r3, r2
 8000f5a:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000f5c:	4852      	ldr	r0, [pc, #328]	; (80010a8 <HAL_RCC_OscConfig+0x8ec>)
 8000f5e:	4b52      	ldr	r3, [pc, #328]	; (80010a8 <HAL_RCC_OscConfig+0x8ec>)
 8000f60:	685b      	ldr	r3, [r3, #4]
 8000f62:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8000f66:	1d3b      	adds	r3, r7, #4
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	69d9      	ldr	r1, [r3, #28]
 8000f6c:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 8000f70:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f74:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8000f78:	fa93 f3a3 	rbit	r3, r3
 8000f7c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  return(result);
 8000f80:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8000f84:	fab3 f383 	clz	r3, r3
 8000f88:	fa01 f303 	lsl.w	r3, r1, r3
 8000f8c:	4313      	orrs	r3, r2
 8000f8e:	6043      	str	r3, [r0, #4]
 8000f90:	e05a      	b.n	8001048 <HAL_RCC_OscConfig+0x88c>
 8000f92:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f96:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f9a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8000f9e:	fa93 f3a3 	rbit	r3, r3
 8000fa2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  return(result);
 8000fa6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8000faa:	fab3 f383 	clz	r3, r3
 8000fae:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000fb2:	f503 138e 	add.w	r3, r3, #1163264	; 0x11c000
 8000fb6:	009b      	lsls	r3, r3, #2
 8000fb8:	461a      	mov	r2, r3
 8000fba:	2300      	movs	r3, #0
 8000fbc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fbe:	f7ff f915 	bl	80001ec <HAL_GetTick>
 8000fc2:	f8c7 0190 	str.w	r0, [r7, #400]	; 0x190

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != RESET)
 8000fc6:	e009      	b.n	8000fdc <HAL_RCC_OscConfig+0x820>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000fc8:	f7ff f910 	bl	80001ec <HAL_GetTick>
 8000fcc:	4602      	mov	r2, r0
 8000fce:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8000fd2:	1ad3      	subs	r3, r2, r3
 8000fd4:	2b02      	cmp	r3, #2
 8000fd6:	d901      	bls.n	8000fdc <HAL_RCC_OscConfig+0x820>
          {
            return HAL_TIMEOUT;
 8000fd8:	2303      	movs	r3, #3
 8000fda:	e362      	b.n	80016a2 <HAL_RCC_OscConfig+0xee6>
 8000fdc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000fe0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000fe4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8000fe8:	fa93 f3a3 	rbit	r3, r3
 8000fec:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  return(result);
 8000ff0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != RESET)
 8000ff4:	fab3 f383 	clz	r3, r3
 8000ff8:	b2db      	uxtb	r3, r3
 8000ffa:	095b      	lsrs	r3, r3, #5
 8000ffc:	b2db      	uxtb	r3, r3
 8000ffe:	f043 0301 	orr.w	r3, r3, #1
 8001002:	b2db      	uxtb	r3, r3
 8001004:	2b01      	cmp	r3, #1
 8001006:	d102      	bne.n	800100e <HAL_RCC_OscConfig+0x852>
 8001008:	4b27      	ldr	r3, [pc, #156]	; (80010a8 <HAL_RCC_OscConfig+0x8ec>)
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	e001      	b.n	8001012 <HAL_RCC_OscConfig+0x856>
 800100e:	4b26      	ldr	r3, [pc, #152]	; (80010a8 <HAL_RCC_OscConfig+0x8ec>)
 8001010:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001012:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001016:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800101a:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800101e:	fa92 f2a2 	rbit	r2, r2
 8001022:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
  return(result);
 8001026:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800102a:	fab2 f282 	clz	r2, r2
 800102e:	b252      	sxtb	r2, r2
 8001030:	f042 0220 	orr.w	r2, r2, #32
 8001034:	b252      	sxtb	r2, r2
 8001036:	b2d2      	uxtb	r2, r2
 8001038:	f002 021f 	and.w	r2, r2, #31
 800103c:	2101      	movs	r1, #1
 800103e:	fa01 f202 	lsl.w	r2, r1, r2
 8001042:	4013      	ands	r3, r2
 8001044:	2b00      	cmp	r3, #0
 8001046:	d1bf      	bne.n	8000fc8 <HAL_RCC_OscConfig+0x80c>
        }
      }
    }
  }  
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001048:	1d3b      	adds	r3, r7, #4
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	f003 0308 	and.w	r3, r3, #8
 8001052:	2b00      	cmp	r3, #0
 8001054:	f000 80ae 	beq.w	80011b4 <HAL_RCC_OscConfig+0x9f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001058:	1d3b      	adds	r3, r7, #4
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	695b      	ldr	r3, [r3, #20]
 800105e:	2b00      	cmp	r3, #0
 8001060:	d055      	beq.n	800110e <HAL_RCC_OscConfig+0x952>
 8001062:	2301      	movs	r3, #1
 8001064:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001068:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800106c:	fa93 f3a3 	rbit	r3, r3
 8001070:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return(result);
 8001074:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001078:	fab3 f383 	clz	r3, r3
 800107c:	461a      	mov	r2, r3
 800107e:	4b0d      	ldr	r3, [pc, #52]	; (80010b4 <HAL_RCC_OscConfig+0x8f8>)
 8001080:	4413      	add	r3, r2
 8001082:	009b      	lsls	r3, r3, #2
 8001084:	461a      	mov	r2, r3
 8001086:	2301      	movs	r3, #1
 8001088:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800108a:	f7ff f8af 	bl	80001ec <HAL_GetTick>
 800108e:	f8c7 0190 	str.w	r0, [r7, #400]	; 0x190
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001092:	e011      	b.n	80010b8 <HAL_RCC_OscConfig+0x8fc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001094:	f7ff f8aa 	bl	80001ec <HAL_GetTick>
 8001098:	4602      	mov	r2, r0
 800109a:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800109e:	1ad3      	subs	r3, r2, r3
 80010a0:	2b02      	cmp	r3, #2
 80010a2:	d909      	bls.n	80010b8 <HAL_RCC_OscConfig+0x8fc>
        {
          return HAL_TIMEOUT;
 80010a4:	2303      	movs	r3, #3
 80010a6:	e2fc      	b.n	80016a2 <HAL_RCC_OscConfig+0xee6>
 80010a8:	40023800 	.word	0x40023800
 80010ac:	08002940 	.word	0x08002940
 80010b0:	20000000 	.word	0x20000000
 80010b4:	1091c1a0 	.word	0x1091c1a0
 80010b8:	2302      	movs	r3, #2
 80010ba:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010be:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80010c2:	fa93 f2a3 	rbit	r2, r3
 80010c6:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80010ca:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80010cc:	4ba5      	ldr	r3, [pc, #660]	; (8001364 <HAL_RCC_OscConfig+0xba8>)
 80010ce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80010d0:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80010d4:	2102      	movs	r1, #2
 80010d6:	6019      	str	r1, [r3, #0]
 80010d8:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	fa93 f1a3 	rbit	r1, r3
 80010e2:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80010e6:	6019      	str	r1, [r3, #0]
  return(result);
 80010e8:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	fab3 f383 	clz	r3, r3
 80010f2:	b25b      	sxtb	r3, r3
 80010f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80010f8:	b25b      	sxtb	r3, r3
 80010fa:	b2db      	uxtb	r3, r3
 80010fc:	f003 031f 	and.w	r3, r3, #31
 8001100:	2101      	movs	r1, #1
 8001102:	fa01 f303 	lsl.w	r3, r1, r3
 8001106:	4013      	ands	r3, r2
 8001108:	2b00      	cmp	r3, #0
 800110a:	d0c3      	beq.n	8001094 <HAL_RCC_OscConfig+0x8d8>
 800110c:	e052      	b.n	80011b4 <HAL_RCC_OscConfig+0x9f8>
 800110e:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8001112:	2201      	movs	r2, #1
 8001114:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001116:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	fa93 f2a3 	rbit	r2, r3
 8001120:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8001124:	601a      	str	r2, [r3, #0]
  return(result);
 8001126:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800112a:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800112c:	fab3 f383 	clz	r3, r3
 8001130:	461a      	mov	r2, r3
 8001132:	4b8d      	ldr	r3, [pc, #564]	; (8001368 <HAL_RCC_OscConfig+0xbac>)
 8001134:	4413      	add	r3, r2
 8001136:	009b      	lsls	r3, r3, #2
 8001138:	461a      	mov	r2, r3
 800113a:	2300      	movs	r3, #0
 800113c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800113e:	f7ff f855 	bl	80001ec <HAL_GetTick>
 8001142:	f8c7 0190 	str.w	r0, [r7, #400]	; 0x190
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001146:	e009      	b.n	800115c <HAL_RCC_OscConfig+0x9a0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001148:	f7ff f850 	bl	80001ec <HAL_GetTick>
 800114c:	4602      	mov	r2, r0
 800114e:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8001152:	1ad3      	subs	r3, r2, r3
 8001154:	2b02      	cmp	r3, #2
 8001156:	d901      	bls.n	800115c <HAL_RCC_OscConfig+0x9a0>
        {
          return HAL_TIMEOUT;
 8001158:	2303      	movs	r3, #3
 800115a:	e2a2      	b.n	80016a2 <HAL_RCC_OscConfig+0xee6>
 800115c:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001160:	2202      	movs	r2, #2
 8001162:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001164:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	fa93 f2a3 	rbit	r2, r3
 800116e:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001172:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001174:	4b7b      	ldr	r3, [pc, #492]	; (8001364 <HAL_RCC_OscConfig+0xba8>)
 8001176:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001178:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800117c:	2102      	movs	r1, #2
 800117e:	6019      	str	r1, [r3, #0]
 8001180:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	fa93 f1a3 	rbit	r1, r3
 800118a:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800118e:	6019      	str	r1, [r3, #0]
  return(result);
 8001190:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	fab3 f383 	clz	r3, r3
 800119a:	b25b      	sxtb	r3, r3
 800119c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80011a0:	b25b      	sxtb	r3, r3
 80011a2:	b2db      	uxtb	r3, r3
 80011a4:	f003 031f 	and.w	r3, r3, #31
 80011a8:	2101      	movs	r1, #1
 80011aa:	fa01 f303 	lsl.w	r3, r1, r3
 80011ae:	4013      	ands	r3, r2
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d1c9      	bne.n	8001148 <HAL_RCC_OscConfig+0x98c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80011b4:	1d3b      	adds	r3, r7, #4
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	f003 0304 	and.w	r3, r3, #4
 80011be:	2b00      	cmp	r3, #0
 80011c0:	f000 810e 	beq.w	80013e0 <HAL_RCC_OscConfig+0xc24>
  {
    FlagStatus       pwrclkchanged = RESET;
 80011c4:	2300      	movs	r3, #0
 80011c6:	f887 3197 	strb.w	r3, [r7, #407]	; 0x197
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80011ca:	4b66      	ldr	r3, [pc, #408]	; (8001364 <HAL_RCC_OscConfig+0xba8>)
 80011cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d112      	bne.n	80011fc <HAL_RCC_OscConfig+0xa40>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80011d6:	4a63      	ldr	r2, [pc, #396]	; (8001364 <HAL_RCC_OscConfig+0xba8>)
 80011d8:	4b62      	ldr	r3, [pc, #392]	; (8001364 <HAL_RCC_OscConfig+0xba8>)
 80011da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011e0:	6253      	str	r3, [r2, #36]	; 0x24
 80011e2:	4b60      	ldr	r3, [pc, #384]	; (8001364 <HAL_RCC_OscConfig+0xba8>)
 80011e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011e6:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80011ea:	f107 030c 	add.w	r3, r7, #12
 80011ee:	601a      	str	r2, [r3, #0]
 80011f0:	f107 030c 	add.w	r3, r7, #12
 80011f4:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80011f6:	2301      	movs	r3, #1
 80011f8:	f887 3197 	strb.w	r3, [r7, #407]	; 0x197
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011fc:	4b5b      	ldr	r3, [pc, #364]	; (800136c <HAL_RCC_OscConfig+0xbb0>)
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001204:	2b00      	cmp	r3, #0
 8001206:	d11a      	bne.n	800123e <HAL_RCC_OscConfig+0xa82>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001208:	4a58      	ldr	r2, [pc, #352]	; (800136c <HAL_RCC_OscConfig+0xbb0>)
 800120a:	4b58      	ldr	r3, [pc, #352]	; (800136c <HAL_RCC_OscConfig+0xbb0>)
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001212:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001214:	f7fe ffea 	bl	80001ec <HAL_GetTick>
 8001218:	f8c7 0190 	str.w	r0, [r7, #400]	; 0x190

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800121c:	e009      	b.n	8001232 <HAL_RCC_OscConfig+0xa76>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800121e:	f7fe ffe5 	bl	80001ec <HAL_GetTick>
 8001222:	4602      	mov	r2, r0
 8001224:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8001228:	1ad3      	subs	r3, r2, r3
 800122a:	2b64      	cmp	r3, #100	; 0x64
 800122c:	d901      	bls.n	8001232 <HAL_RCC_OscConfig+0xa76>
        {
          return HAL_TIMEOUT;
 800122e:	2303      	movs	r3, #3
 8001230:	e237      	b.n	80016a2 <HAL_RCC_OscConfig+0xee6>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001232:	4b4e      	ldr	r3, [pc, #312]	; (800136c <HAL_RCC_OscConfig+0xbb0>)
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800123a:	2b00      	cmp	r3, #0
 800123c:	d0ef      	beq.n	800121e <HAL_RCC_OscConfig+0xa62>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800123e:	1d3b      	adds	r3, r7, #4
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	689b      	ldr	r3, [r3, #8]
 8001244:	2b01      	cmp	r3, #1
 8001246:	d106      	bne.n	8001256 <HAL_RCC_OscConfig+0xa9a>
 8001248:	4a46      	ldr	r2, [pc, #280]	; (8001364 <HAL_RCC_OscConfig+0xba8>)
 800124a:	4b46      	ldr	r3, [pc, #280]	; (8001364 <HAL_RCC_OscConfig+0xba8>)
 800124c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800124e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001252:	6353      	str	r3, [r2, #52]	; 0x34
 8001254:	e02f      	b.n	80012b6 <HAL_RCC_OscConfig+0xafa>
 8001256:	1d3b      	adds	r3, r7, #4
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	689b      	ldr	r3, [r3, #8]
 800125c:	2b00      	cmp	r3, #0
 800125e:	d10c      	bne.n	800127a <HAL_RCC_OscConfig+0xabe>
 8001260:	4a40      	ldr	r2, [pc, #256]	; (8001364 <HAL_RCC_OscConfig+0xba8>)
 8001262:	4b40      	ldr	r3, [pc, #256]	; (8001364 <HAL_RCC_OscConfig+0xba8>)
 8001264:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001266:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800126a:	6353      	str	r3, [r2, #52]	; 0x34
 800126c:	4a3d      	ldr	r2, [pc, #244]	; (8001364 <HAL_RCC_OscConfig+0xba8>)
 800126e:	4b3d      	ldr	r3, [pc, #244]	; (8001364 <HAL_RCC_OscConfig+0xba8>)
 8001270:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001272:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001276:	6353      	str	r3, [r2, #52]	; 0x34
 8001278:	e01d      	b.n	80012b6 <HAL_RCC_OscConfig+0xafa>
 800127a:	1d3b      	adds	r3, r7, #4
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	689b      	ldr	r3, [r3, #8]
 8001280:	2b05      	cmp	r3, #5
 8001282:	d10c      	bne.n	800129e <HAL_RCC_OscConfig+0xae2>
 8001284:	4a37      	ldr	r2, [pc, #220]	; (8001364 <HAL_RCC_OscConfig+0xba8>)
 8001286:	4b37      	ldr	r3, [pc, #220]	; (8001364 <HAL_RCC_OscConfig+0xba8>)
 8001288:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800128a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800128e:	6353      	str	r3, [r2, #52]	; 0x34
 8001290:	4a34      	ldr	r2, [pc, #208]	; (8001364 <HAL_RCC_OscConfig+0xba8>)
 8001292:	4b34      	ldr	r3, [pc, #208]	; (8001364 <HAL_RCC_OscConfig+0xba8>)
 8001294:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001296:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800129a:	6353      	str	r3, [r2, #52]	; 0x34
 800129c:	e00b      	b.n	80012b6 <HAL_RCC_OscConfig+0xafa>
 800129e:	4a31      	ldr	r2, [pc, #196]	; (8001364 <HAL_RCC_OscConfig+0xba8>)
 80012a0:	4b30      	ldr	r3, [pc, #192]	; (8001364 <HAL_RCC_OscConfig+0xba8>)
 80012a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80012a4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80012a8:	6353      	str	r3, [r2, #52]	; 0x34
 80012aa:	4a2e      	ldr	r2, [pc, #184]	; (8001364 <HAL_RCC_OscConfig+0xba8>)
 80012ac:	4b2d      	ldr	r3, [pc, #180]	; (8001364 <HAL_RCC_OscConfig+0xba8>)
 80012ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80012b0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80012b4:	6353      	str	r3, [r2, #52]	; 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80012b6:	1d3b      	adds	r3, r7, #4
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	689b      	ldr	r3, [r3, #8]
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d03f      	beq.n	8001340 <HAL_RCC_OscConfig+0xb84>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012c0:	f7fe ff94 	bl	80001ec <HAL_GetTick>
 80012c4:	f8c7 0190 	str.w	r0, [r7, #400]	; 0x190
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80012c8:	e00b      	b.n	80012e2 <HAL_RCC_OscConfig+0xb26>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80012ca:	f7fe ff8f 	bl	80001ec <HAL_GetTick>
 80012ce:	4602      	mov	r2, r0
 80012d0:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80012d4:	1ad3      	subs	r3, r2, r3
 80012d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80012da:	4293      	cmp	r3, r2
 80012dc:	d901      	bls.n	80012e2 <HAL_RCC_OscConfig+0xb26>
        {
          return HAL_TIMEOUT;
 80012de:	2303      	movs	r3, #3
 80012e0:	e1df      	b.n	80016a2 <HAL_RCC_OscConfig+0xee6>
 80012e2:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80012e6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80012ea:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012ec:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	fa93 f2a3 	rbit	r2, r3
 80012f6:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80012fa:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80012fc:	4b19      	ldr	r3, [pc, #100]	; (8001364 <HAL_RCC_OscConfig+0xba8>)
 80012fe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001300:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001304:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001308:	6019      	str	r1, [r3, #0]
 800130a:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	fa93 f1a3 	rbit	r1, r3
 8001314:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001318:	6019      	str	r1, [r3, #0]
  return(result);
 800131a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	fab3 f383 	clz	r3, r3
 8001324:	b25b      	sxtb	r3, r3
 8001326:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800132a:	b25b      	sxtb	r3, r3
 800132c:	b2db      	uxtb	r3, r3
 800132e:	f003 031f 	and.w	r3, r3, #31
 8001332:	2101      	movs	r1, #1
 8001334:	fa01 f303 	lsl.w	r3, r1, r3
 8001338:	4013      	ands	r3, r2
 800133a:	2b00      	cmp	r3, #0
 800133c:	d0c5      	beq.n	80012ca <HAL_RCC_OscConfig+0xb0e>
 800133e:	e045      	b.n	80013cc <HAL_RCC_OscConfig+0xc10>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001340:	f7fe ff54 	bl	80001ec <HAL_GetTick>
 8001344:	f8c7 0190 	str.w	r0, [r7, #400]	; 0x190
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001348:	e012      	b.n	8001370 <HAL_RCC_OscConfig+0xbb4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800134a:	f7fe ff4f 	bl	80001ec <HAL_GetTick>
 800134e:	4602      	mov	r2, r0
 8001350:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8001354:	1ad3      	subs	r3, r2, r3
 8001356:	f241 3288 	movw	r2, #5000	; 0x1388
 800135a:	4293      	cmp	r3, r2
 800135c:	d908      	bls.n	8001370 <HAL_RCC_OscConfig+0xbb4>
        {
          return HAL_TIMEOUT;
 800135e:	2303      	movs	r3, #3
 8001360:	e19f      	b.n	80016a2 <HAL_RCC_OscConfig+0xee6>
 8001362:	bf00      	nop
 8001364:	40023800 	.word	0x40023800
 8001368:	1091c1a0 	.word	0x1091c1a0
 800136c:	40007000 	.word	0x40007000
 8001370:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001374:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001378:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800137a:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	fa93 f2a3 	rbit	r2, r3
 8001384:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001388:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800138a:	4bb2      	ldr	r3, [pc, #712]	; (8001654 <HAL_RCC_OscConfig+0xe98>)
 800138c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800138e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001392:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001396:	6019      	str	r1, [r3, #0]
 8001398:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	fa93 f1a3 	rbit	r1, r3
 80013a2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80013a6:	6019      	str	r1, [r3, #0]
  return(result);
 80013a8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	fab3 f383 	clz	r3, r3
 80013b2:	b25b      	sxtb	r3, r3
 80013b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80013b8:	b25b      	sxtb	r3, r3
 80013ba:	b2db      	uxtb	r3, r3
 80013bc:	f003 031f 	and.w	r3, r3, #31
 80013c0:	2101      	movs	r1, #1
 80013c2:	fa01 f303 	lsl.w	r3, r1, r3
 80013c6:	4013      	ands	r3, r2
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d1be      	bne.n	800134a <HAL_RCC_OscConfig+0xb8e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80013cc:	f897 3197 	ldrb.w	r3, [r7, #407]	; 0x197
 80013d0:	2b01      	cmp	r3, #1
 80013d2:	d105      	bne.n	80013e0 <HAL_RCC_OscConfig+0xc24>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80013d4:	4a9f      	ldr	r2, [pc, #636]	; (8001654 <HAL_RCC_OscConfig+0xe98>)
 80013d6:	4b9f      	ldr	r3, [pc, #636]	; (8001654 <HAL_RCC_OscConfig+0xe98>)
 80013d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013da:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80013de:	6253      	str	r3, [r2, #36]	; 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80013e0:	1d3b      	adds	r3, r7, #4
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	f000 815a 	beq.w	80016a0 <HAL_RCC_OscConfig+0xee4>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80013ec:	4b99      	ldr	r3, [pc, #612]	; (8001654 <HAL_RCC_OscConfig+0xe98>)
 80013ee:	689b      	ldr	r3, [r3, #8]
 80013f0:	f003 030c 	and.w	r3, r3, #12
 80013f4:	2b0c      	cmp	r3, #12
 80013f6:	f000 8151 	beq.w	800169c <HAL_RCC_OscConfig+0xee0>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80013fa:	1d3b      	adds	r3, r7, #4
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001400:	2b02      	cmp	r3, #2
 8001402:	f040 80e1 	bne.w	80015c8 <HAL_RCC_OscConfig+0xe0c>
 8001406:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800140a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800140e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001410:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	fa93 f2a3 	rbit	r2, r3
 800141a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800141e:	601a      	str	r2, [r3, #0]
  return(result);
 8001420:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001424:	681b      	ldr	r3, [r3, #0]
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001426:	fab3 f383 	clz	r3, r3
 800142a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800142e:	f503 138e 	add.w	r3, r3, #1163264	; 0x11c000
 8001432:	009b      	lsls	r3, r3, #2
 8001434:	461a      	mov	r2, r3
 8001436:	2300      	movs	r3, #0
 8001438:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800143a:	f7fe fed7 	bl	80001ec <HAL_GetTick>
 800143e:	f8c7 0190 	str.w	r0, [r7, #400]	; 0x190
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001442:	e009      	b.n	8001458 <HAL_RCC_OscConfig+0xc9c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001444:	f7fe fed2 	bl	80001ec <HAL_GetTick>
 8001448:	4602      	mov	r2, r0
 800144a:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800144e:	1ad3      	subs	r3, r2, r3
 8001450:	2b02      	cmp	r3, #2
 8001452:	d901      	bls.n	8001458 <HAL_RCC_OscConfig+0xc9c>
          {
            return HAL_TIMEOUT;
 8001454:	2303      	movs	r3, #3
 8001456:	e124      	b.n	80016a2 <HAL_RCC_OscConfig+0xee6>
 8001458:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800145c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001460:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001462:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	fa93 f2a3 	rbit	r2, r3
 800146c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001470:	601a      	str	r2, [r3, #0]
  return(result);
 8001472:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001476:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001478:	fab3 f383 	clz	r3, r3
 800147c:	b2db      	uxtb	r3, r3
 800147e:	095b      	lsrs	r3, r3, #5
 8001480:	b2db      	uxtb	r3, r3
 8001482:	f043 0301 	orr.w	r3, r3, #1
 8001486:	b2db      	uxtb	r3, r3
 8001488:	2b01      	cmp	r3, #1
 800148a:	d102      	bne.n	8001492 <HAL_RCC_OscConfig+0xcd6>
 800148c:	4b71      	ldr	r3, [pc, #452]	; (8001654 <HAL_RCC_OscConfig+0xe98>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	e001      	b.n	8001496 <HAL_RCC_OscConfig+0xcda>
 8001492:	4b70      	ldr	r3, [pc, #448]	; (8001654 <HAL_RCC_OscConfig+0xe98>)
 8001494:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001496:	f107 0244 	add.w	r2, r7, #68	; 0x44
 800149a:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800149e:	6011      	str	r1, [r2, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014a0:	f107 0244 	add.w	r2, r7, #68	; 0x44
 80014a4:	6812      	ldr	r2, [r2, #0]
 80014a6:	fa92 f1a2 	rbit	r1, r2
 80014aa:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80014ae:	6011      	str	r1, [r2, #0]
  return(result);
 80014b0:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80014b4:	6812      	ldr	r2, [r2, #0]
 80014b6:	fab2 f282 	clz	r2, r2
 80014ba:	b252      	sxtb	r2, r2
 80014bc:	f042 0220 	orr.w	r2, r2, #32
 80014c0:	b252      	sxtb	r2, r2
 80014c2:	b2d2      	uxtb	r2, r2
 80014c4:	f002 021f 	and.w	r2, r2, #31
 80014c8:	2101      	movs	r1, #1
 80014ca:	fa01 f202 	lsl.w	r2, r1, r2
 80014ce:	4013      	ands	r3, r2
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d1b7      	bne.n	8001444 <HAL_RCC_OscConfig+0xc88>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80014d4:	485f      	ldr	r0, [pc, #380]	; (8001654 <HAL_RCC_OscConfig+0xe98>)
 80014d6:	4b5f      	ldr	r3, [pc, #380]	; (8001654 <HAL_RCC_OscConfig+0xe98>)
 80014d8:	689b      	ldr	r3, [r3, #8]
 80014da:	f423 027d 	bic.w	r2, r3, #16580608	; 0xfd0000
 80014de:	1d3b      	adds	r3, r7, #4
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80014e4:	1d3b      	adds	r3, r7, #4
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014ea:	4319      	orrs	r1, r3
 80014ec:	1d3b      	adds	r3, r7, #4
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014f2:	430b      	orrs	r3, r1
 80014f4:	4313      	orrs	r3, r2
 80014f6:	6083      	str	r3, [r0, #8]
 80014f8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80014fc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001500:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001502:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	fa93 f2a3 	rbit	r2, r3
 800150c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001510:	601a      	str	r2, [r3, #0]
  return(result);
 8001512:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001516:	681b      	ldr	r3, [r3, #0]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001518:	fab3 f383 	clz	r3, r3
 800151c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001520:	f503 138e 	add.w	r3, r3, #1163264	; 0x11c000
 8001524:	009b      	lsls	r3, r3, #2
 8001526:	461a      	mov	r2, r3
 8001528:	2301      	movs	r3, #1
 800152a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800152c:	f7fe fe5e 	bl	80001ec <HAL_GetTick>
 8001530:	f8c7 0190 	str.w	r0, [r7, #400]	; 0x190
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001534:	e009      	b.n	800154a <HAL_RCC_OscConfig+0xd8e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001536:	f7fe fe59 	bl	80001ec <HAL_GetTick>
 800153a:	4602      	mov	r2, r0
 800153c:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8001540:	1ad3      	subs	r3, r2, r3
 8001542:	2b02      	cmp	r3, #2
 8001544:	d901      	bls.n	800154a <HAL_RCC_OscConfig+0xd8e>
          {
            return HAL_TIMEOUT;
 8001546:	2303      	movs	r3, #3
 8001548:	e0ab      	b.n	80016a2 <HAL_RCC_OscConfig+0xee6>
 800154a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800154e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001552:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001554:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	fa93 f2a3 	rbit	r2, r3
 800155e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001562:	601a      	str	r2, [r3, #0]
  return(result);
 8001564:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001568:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800156a:	fab3 f383 	clz	r3, r3
 800156e:	b2db      	uxtb	r3, r3
 8001570:	095b      	lsrs	r3, r3, #5
 8001572:	b2db      	uxtb	r3, r3
 8001574:	f043 0301 	orr.w	r3, r3, #1
 8001578:	b2db      	uxtb	r3, r3
 800157a:	2b01      	cmp	r3, #1
 800157c:	d102      	bne.n	8001584 <HAL_RCC_OscConfig+0xdc8>
 800157e:	4b35      	ldr	r3, [pc, #212]	; (8001654 <HAL_RCC_OscConfig+0xe98>)
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	e001      	b.n	8001588 <HAL_RCC_OscConfig+0xdcc>
 8001584:	4b33      	ldr	r3, [pc, #204]	; (8001654 <HAL_RCC_OscConfig+0xe98>)
 8001586:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001588:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 800158c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001590:	6011      	str	r1, [r2, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001592:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8001596:	6812      	ldr	r2, [r2, #0]
 8001598:	fa92 f1a2 	rbit	r1, r2
 800159c:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80015a0:	6011      	str	r1, [r2, #0]
  return(result);
 80015a2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80015a6:	6812      	ldr	r2, [r2, #0]
 80015a8:	fab2 f282 	clz	r2, r2
 80015ac:	b252      	sxtb	r2, r2
 80015ae:	f042 0220 	orr.w	r2, r2, #32
 80015b2:	b252      	sxtb	r2, r2
 80015b4:	b2d2      	uxtb	r2, r2
 80015b6:	f002 021f 	and.w	r2, r2, #31
 80015ba:	2101      	movs	r1, #1
 80015bc:	fa01 f202 	lsl.w	r2, r1, r2
 80015c0:	4013      	ands	r3, r2
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d0b7      	beq.n	8001536 <HAL_RCC_OscConfig+0xd7a>
 80015c6:	e06b      	b.n	80016a0 <HAL_RCC_OscConfig+0xee4>
 80015c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015cc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80015d0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	fa93 f2a3 	rbit	r2, r3
 80015dc:	f107 0320 	add.w	r3, r7, #32
 80015e0:	601a      	str	r2, [r3, #0]
  return(result);
 80015e2:	f107 0320 	add.w	r3, r7, #32
 80015e6:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015e8:	fab3 f383 	clz	r3, r3
 80015ec:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80015f0:	f503 138e 	add.w	r3, r3, #1163264	; 0x11c000
 80015f4:	009b      	lsls	r3, r3, #2
 80015f6:	461a      	mov	r2, r3
 80015f8:	2300      	movs	r3, #0
 80015fa:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015fc:	f7fe fdf6 	bl	80001ec <HAL_GetTick>
 8001600:	f8c7 0190 	str.w	r0, [r7, #400]	; 0x190
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001604:	e009      	b.n	800161a <HAL_RCC_OscConfig+0xe5e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001606:	f7fe fdf1 	bl	80001ec <HAL_GetTick>
 800160a:	4602      	mov	r2, r0
 800160c:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8001610:	1ad3      	subs	r3, r2, r3
 8001612:	2b02      	cmp	r3, #2
 8001614:	d901      	bls.n	800161a <HAL_RCC_OscConfig+0xe5e>
          {
            return HAL_TIMEOUT;
 8001616:	2303      	movs	r3, #3
 8001618:	e043      	b.n	80016a2 <HAL_RCC_OscConfig+0xee6>
 800161a:	f107 031c 	add.w	r3, r7, #28
 800161e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001622:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001624:	f107 031c 	add.w	r3, r7, #28
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	fa93 f2a3 	rbit	r2, r3
 800162e:	f107 0318 	add.w	r3, r7, #24
 8001632:	601a      	str	r2, [r3, #0]
  return(result);
 8001634:	f107 0318 	add.w	r3, r7, #24
 8001638:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800163a:	fab3 f383 	clz	r3, r3
 800163e:	b2db      	uxtb	r3, r3
 8001640:	095b      	lsrs	r3, r3, #5
 8001642:	b2db      	uxtb	r3, r3
 8001644:	f043 0301 	orr.w	r3, r3, #1
 8001648:	b2db      	uxtb	r3, r3
 800164a:	2b01      	cmp	r3, #1
 800164c:	d104      	bne.n	8001658 <HAL_RCC_OscConfig+0xe9c>
 800164e:	4b01      	ldr	r3, [pc, #4]	; (8001654 <HAL_RCC_OscConfig+0xe98>)
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	e003      	b.n	800165c <HAL_RCC_OscConfig+0xea0>
 8001654:	40023800 	.word	0x40023800
 8001658:	4b14      	ldr	r3, [pc, #80]	; (80016ac <HAL_RCC_OscConfig+0xef0>)
 800165a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800165c:	f107 0214 	add.w	r2, r7, #20
 8001660:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001664:	6011      	str	r1, [r2, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001666:	f107 0214 	add.w	r2, r7, #20
 800166a:	6812      	ldr	r2, [r2, #0]
 800166c:	fa92 f1a2 	rbit	r1, r2
 8001670:	f107 0210 	add.w	r2, r7, #16
 8001674:	6011      	str	r1, [r2, #0]
  return(result);
 8001676:	f107 0210 	add.w	r2, r7, #16
 800167a:	6812      	ldr	r2, [r2, #0]
 800167c:	fab2 f282 	clz	r2, r2
 8001680:	b252      	sxtb	r2, r2
 8001682:	f042 0220 	orr.w	r2, r2, #32
 8001686:	b252      	sxtb	r2, r2
 8001688:	b2d2      	uxtb	r2, r2
 800168a:	f002 021f 	and.w	r2, r2, #31
 800168e:	2101      	movs	r1, #1
 8001690:	fa01 f202 	lsl.w	r2, r1, r2
 8001694:	4013      	ands	r3, r2
 8001696:	2b00      	cmp	r3, #0
 8001698:	d1b5      	bne.n	8001606 <HAL_RCC_OscConfig+0xe4a>
 800169a:	e001      	b.n	80016a0 <HAL_RCC_OscConfig+0xee4>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 800169c:	2301      	movs	r3, #1
 800169e:	e000      	b.n	80016a2 <HAL_RCC_OscConfig+0xee6>
    }
  }
  
  return HAL_OK;
 80016a0:	2300      	movs	r3, #0
}
 80016a2:	4618      	mov	r0, r3
 80016a4:	f507 77cc 	add.w	r7, r7, #408	; 0x198
 80016a8:	46bd      	mov	sp, r7
 80016aa:	bd80      	pop	{r7, pc}
 80016ac:	40023800 	.word	0x40023800

080016b0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b096      	sub	sp, #88	; 0x58
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
 80016b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80016ba:	2300      	movs	r3, #0
 80016bc:	657b      	str	r3, [r7, #84]	; 0x54
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80016be:	4ba9      	ldr	r3, [pc, #676]	; (8001964 <HAL_RCC_ClockConfig+0x2b4>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f003 0201 	and.w	r2, r3, #1
 80016c6:	683b      	ldr	r3, [r7, #0]
 80016c8:	429a      	cmp	r2, r3
 80016ca:	d219      	bcs.n	8001700 <HAL_RCC_ClockConfig+0x50>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016cc:	683b      	ldr	r3, [r7, #0]
 80016ce:	2b01      	cmp	r3, #1
 80016d0:	d105      	bne.n	80016de <HAL_RCC_ClockConfig+0x2e>
 80016d2:	4aa4      	ldr	r2, [pc, #656]	; (8001964 <HAL_RCC_ClockConfig+0x2b4>)
 80016d4:	4ba3      	ldr	r3, [pc, #652]	; (8001964 <HAL_RCC_ClockConfig+0x2b4>)
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	f043 0304 	orr.w	r3, r3, #4
 80016dc:	6013      	str	r3, [r2, #0]
 80016de:	49a1      	ldr	r1, [pc, #644]	; (8001964 <HAL_RCC_ClockConfig+0x2b4>)
 80016e0:	4ba0      	ldr	r3, [pc, #640]	; (8001964 <HAL_RCC_ClockConfig+0x2b4>)
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	f023 0201 	bic.w	r2, r3, #1
 80016e8:	683b      	ldr	r3, [r7, #0]
 80016ea:	4313      	orrs	r3, r2
 80016ec:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80016ee:	4b9d      	ldr	r3, [pc, #628]	; (8001964 <HAL_RCC_ClockConfig+0x2b4>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	f003 0201 	and.w	r2, r3, #1
 80016f6:	683b      	ldr	r3, [r7, #0]
 80016f8:	429a      	cmp	r2, r3
 80016fa:	d001      	beq.n	8001700 <HAL_RCC_ClockConfig+0x50>
    {
      return HAL_ERROR;
 80016fc:	2301      	movs	r3, #1
 80016fe:	e1a2      	b.n	8001a46 <HAL_RCC_ClockConfig+0x396>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	f003 0302 	and.w	r3, r3, #2
 8001708:	2b00      	cmp	r3, #0
 800170a:	d008      	beq.n	800171e <HAL_RCC_ClockConfig+0x6e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800170c:	4996      	ldr	r1, [pc, #600]	; (8001968 <HAL_RCC_ClockConfig+0x2b8>)
 800170e:	4b96      	ldr	r3, [pc, #600]	; (8001968 <HAL_RCC_ClockConfig+0x2b8>)
 8001710:	689b      	ldr	r3, [r3, #8]
 8001712:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	689b      	ldr	r3, [r3, #8]
 800171a:	4313      	orrs	r3, r2
 800171c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f003 0301 	and.w	r3, r3, #1
 8001726:	2b00      	cmp	r3, #0
 8001728:	f000 8131 	beq.w	800198e <HAL_RCC_ClockConfig+0x2de>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	685b      	ldr	r3, [r3, #4]
 8001730:	2b02      	cmp	r3, #2
 8001732:	d130      	bne.n	8001796 <HAL_RCC_ClockConfig+0xe6>
 8001734:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001738:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800173a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800173c:	fa93 f3a3 	rbit	r3, r3
 8001740:	64fb      	str	r3, [r7, #76]	; 0x4c
  return(result);
 8001742:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001744:	fab3 f383 	clz	r3, r3
 8001748:	b2db      	uxtb	r3, r3
 800174a:	095b      	lsrs	r3, r3, #5
 800174c:	b2db      	uxtb	r3, r3
 800174e:	f043 0301 	orr.w	r3, r3, #1
 8001752:	b2db      	uxtb	r3, r3
 8001754:	2b01      	cmp	r3, #1
 8001756:	d102      	bne.n	800175e <HAL_RCC_ClockConfig+0xae>
 8001758:	4b83      	ldr	r3, [pc, #524]	; (8001968 <HAL_RCC_ClockConfig+0x2b8>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	e001      	b.n	8001762 <HAL_RCC_ClockConfig+0xb2>
 800175e:	4b82      	ldr	r3, [pc, #520]	; (8001968 <HAL_RCC_ClockConfig+0x2b8>)
 8001760:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001762:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001766:	64ba      	str	r2, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001768:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800176a:	fa92 f2a2 	rbit	r2, r2
 800176e:	647a      	str	r2, [r7, #68]	; 0x44
  return(result);
 8001770:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001772:	fab2 f282 	clz	r2, r2
 8001776:	b252      	sxtb	r2, r2
 8001778:	f042 0220 	orr.w	r2, r2, #32
 800177c:	b252      	sxtb	r2, r2
 800177e:	b2d2      	uxtb	r2, r2
 8001780:	f002 021f 	and.w	r2, r2, #31
 8001784:	2101      	movs	r1, #1
 8001786:	fa01 f202 	lsl.w	r2, r1, r2
 800178a:	4013      	ands	r3, r2
 800178c:	2b00      	cmp	r3, #0
 800178e:	f040 8098 	bne.w	80018c2 <HAL_RCC_ClockConfig+0x212>
      {
        return HAL_ERROR;
 8001792:	2301      	movs	r3, #1
 8001794:	e157      	b.n	8001a46 <HAL_RCC_ClockConfig+0x396>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	685b      	ldr	r3, [r3, #4]
 800179a:	2b03      	cmp	r3, #3
 800179c:	d12f      	bne.n	80017fe <HAL_RCC_ClockConfig+0x14e>
 800179e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80017a2:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80017a6:	fa93 f3a3 	rbit	r3, r3
 80017aa:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 80017ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017ae:	fab3 f383 	clz	r3, r3
 80017b2:	b2db      	uxtb	r3, r3
 80017b4:	095b      	lsrs	r3, r3, #5
 80017b6:	b2db      	uxtb	r3, r3
 80017b8:	f043 0301 	orr.w	r3, r3, #1
 80017bc:	b2db      	uxtb	r3, r3
 80017be:	2b01      	cmp	r3, #1
 80017c0:	d102      	bne.n	80017c8 <HAL_RCC_ClockConfig+0x118>
 80017c2:	4b69      	ldr	r3, [pc, #420]	; (8001968 <HAL_RCC_ClockConfig+0x2b8>)
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	e001      	b.n	80017cc <HAL_RCC_ClockConfig+0x11c>
 80017c8:	4b67      	ldr	r3, [pc, #412]	; (8001968 <HAL_RCC_ClockConfig+0x2b8>)
 80017ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80017cc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80017d0:	63ba      	str	r2, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017d2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80017d4:	fa92 f2a2 	rbit	r2, r2
 80017d8:	637a      	str	r2, [r7, #52]	; 0x34
  return(result);
 80017da:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80017dc:	fab2 f282 	clz	r2, r2
 80017e0:	b252      	sxtb	r2, r2
 80017e2:	f042 0220 	orr.w	r2, r2, #32
 80017e6:	b252      	sxtb	r2, r2
 80017e8:	b2d2      	uxtb	r2, r2
 80017ea:	f002 021f 	and.w	r2, r2, #31
 80017ee:	2101      	movs	r1, #1
 80017f0:	fa01 f202 	lsl.w	r2, r1, r2
 80017f4:	4013      	ands	r3, r2
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d163      	bne.n	80018c2 <HAL_RCC_ClockConfig+0x212>
      {
        return HAL_ERROR;
 80017fa:	2301      	movs	r3, #1
 80017fc:	e123      	b.n	8001a46 <HAL_RCC_ClockConfig+0x396>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	685b      	ldr	r3, [r3, #4]
 8001802:	2b01      	cmp	r3, #1
 8001804:	d12d      	bne.n	8001862 <HAL_RCC_ClockConfig+0x1b2>
 8001806:	2302      	movs	r3, #2
 8001808:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800180a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800180c:	fa93 f3a3 	rbit	r3, r3
 8001810:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 8001812:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001814:	fab3 f383 	clz	r3, r3
 8001818:	b2db      	uxtb	r3, r3
 800181a:	095b      	lsrs	r3, r3, #5
 800181c:	b2db      	uxtb	r3, r3
 800181e:	f043 0301 	orr.w	r3, r3, #1
 8001822:	b2db      	uxtb	r3, r3
 8001824:	2b01      	cmp	r3, #1
 8001826:	d102      	bne.n	800182e <HAL_RCC_ClockConfig+0x17e>
 8001828:	4b4f      	ldr	r3, [pc, #316]	; (8001968 <HAL_RCC_ClockConfig+0x2b8>)
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	e001      	b.n	8001832 <HAL_RCC_ClockConfig+0x182>
 800182e:	4b4e      	ldr	r3, [pc, #312]	; (8001968 <HAL_RCC_ClockConfig+0x2b8>)
 8001830:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001832:	2202      	movs	r2, #2
 8001834:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001836:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001838:	fa92 f2a2 	rbit	r2, r2
 800183c:	627a      	str	r2, [r7, #36]	; 0x24
  return(result);
 800183e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001840:	fab2 f282 	clz	r2, r2
 8001844:	b252      	sxtb	r2, r2
 8001846:	f042 0220 	orr.w	r2, r2, #32
 800184a:	b252      	sxtb	r2, r2
 800184c:	b2d2      	uxtb	r2, r2
 800184e:	f002 021f 	and.w	r2, r2, #31
 8001852:	2101      	movs	r1, #1
 8001854:	fa01 f202 	lsl.w	r2, r1, r2
 8001858:	4013      	ands	r3, r2
 800185a:	2b00      	cmp	r3, #0
 800185c:	d131      	bne.n	80018c2 <HAL_RCC_ClockConfig+0x212>
      {
        return HAL_ERROR;
 800185e:	2301      	movs	r3, #1
 8001860:	e0f1      	b.n	8001a46 <HAL_RCC_ClockConfig+0x396>
 8001862:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001866:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001868:	6a3b      	ldr	r3, [r7, #32]
 800186a:	fa93 f3a3 	rbit	r3, r3
 800186e:	61fb      	str	r3, [r7, #28]
  return(result);
 8001870:	69fb      	ldr	r3, [r7, #28]
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == RESET)
 8001872:	fab3 f383 	clz	r3, r3
 8001876:	b2db      	uxtb	r3, r3
 8001878:	095b      	lsrs	r3, r3, #5
 800187a:	b2db      	uxtb	r3, r3
 800187c:	f043 0301 	orr.w	r3, r3, #1
 8001880:	b2db      	uxtb	r3, r3
 8001882:	2b01      	cmp	r3, #1
 8001884:	d102      	bne.n	800188c <HAL_RCC_ClockConfig+0x1dc>
 8001886:	4b38      	ldr	r3, [pc, #224]	; (8001968 <HAL_RCC_ClockConfig+0x2b8>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	e001      	b.n	8001890 <HAL_RCC_ClockConfig+0x1e0>
 800188c:	4b36      	ldr	r3, [pc, #216]	; (8001968 <HAL_RCC_ClockConfig+0x2b8>)
 800188e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001890:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001894:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001896:	69ba      	ldr	r2, [r7, #24]
 8001898:	fa92 f2a2 	rbit	r2, r2
 800189c:	617a      	str	r2, [r7, #20]
  return(result);
 800189e:	697a      	ldr	r2, [r7, #20]
 80018a0:	fab2 f282 	clz	r2, r2
 80018a4:	b252      	sxtb	r2, r2
 80018a6:	f042 0220 	orr.w	r2, r2, #32
 80018aa:	b252      	sxtb	r2, r2
 80018ac:	b2d2      	uxtb	r2, r2
 80018ae:	f002 021f 	and.w	r2, r2, #31
 80018b2:	2101      	movs	r1, #1
 80018b4:	fa01 f202 	lsl.w	r2, r1, r2
 80018b8:	4013      	ands	r3, r2
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d101      	bne.n	80018c2 <HAL_RCC_ClockConfig+0x212>
      {
        return HAL_ERROR;
 80018be:	2301      	movs	r3, #1
 80018c0:	e0c1      	b.n	8001a46 <HAL_RCC_ClockConfig+0x396>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80018c2:	4929      	ldr	r1, [pc, #164]	; (8001968 <HAL_RCC_ClockConfig+0x2b8>)
 80018c4:	4b28      	ldr	r3, [pc, #160]	; (8001968 <HAL_RCC_ClockConfig+0x2b8>)
 80018c6:	689b      	ldr	r3, [r3, #8]
 80018c8:	f023 0203 	bic.w	r2, r3, #3
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	685b      	ldr	r3, [r3, #4]
 80018d0:	4313      	orrs	r3, r2
 80018d2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80018d4:	f7fe fc8a 	bl	80001ec <HAL_GetTick>
 80018d8:	6578      	str	r0, [r7, #84]	; 0x54
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	685b      	ldr	r3, [r3, #4]
 80018de:	2b02      	cmp	r3, #2
 80018e0:	d112      	bne.n	8001908 <HAL_RCC_ClockConfig+0x258>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80018e2:	e00a      	b.n	80018fa <HAL_RCC_ClockConfig+0x24a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80018e4:	f7fe fc82 	bl	80001ec <HAL_GetTick>
 80018e8:	4602      	mov	r2, r0
 80018ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80018ec:	1ad3      	subs	r3, r2, r3
 80018ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80018f2:	4293      	cmp	r3, r2
 80018f4:	d901      	bls.n	80018fa <HAL_RCC_ClockConfig+0x24a>
        {
          return HAL_TIMEOUT;
 80018f6:	2303      	movs	r3, #3
 80018f8:	e0a5      	b.n	8001a46 <HAL_RCC_ClockConfig+0x396>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80018fa:	4b1b      	ldr	r3, [pc, #108]	; (8001968 <HAL_RCC_ClockConfig+0x2b8>)
 80018fc:	689b      	ldr	r3, [r3, #8]
 80018fe:	f003 030c 	and.w	r3, r3, #12
 8001902:	2b08      	cmp	r3, #8
 8001904:	d1ee      	bne.n	80018e4 <HAL_RCC_ClockConfig+0x234>
 8001906:	e042      	b.n	800198e <HAL_RCC_ClockConfig+0x2de>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	685b      	ldr	r3, [r3, #4]
 800190c:	2b03      	cmp	r3, #3
 800190e:	d112      	bne.n	8001936 <HAL_RCC_ClockConfig+0x286>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001910:	e00a      	b.n	8001928 <HAL_RCC_ClockConfig+0x278>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001912:	f7fe fc6b 	bl	80001ec <HAL_GetTick>
 8001916:	4602      	mov	r2, r0
 8001918:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800191a:	1ad3      	subs	r3, r2, r3
 800191c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001920:	4293      	cmp	r3, r2
 8001922:	d901      	bls.n	8001928 <HAL_RCC_ClockConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001924:	2303      	movs	r3, #3
 8001926:	e08e      	b.n	8001a46 <HAL_RCC_ClockConfig+0x396>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001928:	4b0f      	ldr	r3, [pc, #60]	; (8001968 <HAL_RCC_ClockConfig+0x2b8>)
 800192a:	689b      	ldr	r3, [r3, #8]
 800192c:	f003 030c 	and.w	r3, r3, #12
 8001930:	2b0c      	cmp	r3, #12
 8001932:	d1ee      	bne.n	8001912 <HAL_RCC_ClockConfig+0x262>
 8001934:	e02b      	b.n	800198e <HAL_RCC_ClockConfig+0x2de>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	685b      	ldr	r3, [r3, #4]
 800193a:	2b01      	cmp	r3, #1
 800193c:	d121      	bne.n	8001982 <HAL_RCC_ClockConfig+0x2d2>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800193e:	e00a      	b.n	8001956 <HAL_RCC_ClockConfig+0x2a6>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001940:	f7fe fc54 	bl	80001ec <HAL_GetTick>
 8001944:	4602      	mov	r2, r0
 8001946:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001948:	1ad3      	subs	r3, r2, r3
 800194a:	f241 3288 	movw	r2, #5000	; 0x1388
 800194e:	4293      	cmp	r3, r2
 8001950:	d901      	bls.n	8001956 <HAL_RCC_ClockConfig+0x2a6>
        {
          return HAL_TIMEOUT;
 8001952:	2303      	movs	r3, #3
 8001954:	e077      	b.n	8001a46 <HAL_RCC_ClockConfig+0x396>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001956:	4b04      	ldr	r3, [pc, #16]	; (8001968 <HAL_RCC_ClockConfig+0x2b8>)
 8001958:	689b      	ldr	r3, [r3, #8]
 800195a:	f003 030c 	and.w	r3, r3, #12
 800195e:	2b04      	cmp	r3, #4
 8001960:	d1ee      	bne.n	8001940 <HAL_RCC_ClockConfig+0x290>
 8001962:	e014      	b.n	800198e <HAL_RCC_ClockConfig+0x2de>
 8001964:	40023c00 	.word	0x40023c00
 8001968:	40023800 	.word	0x40023800
    }      
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800196c:	f7fe fc3e 	bl	80001ec <HAL_GetTick>
 8001970:	4602      	mov	r2, r0
 8001972:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001974:	1ad3      	subs	r3, r2, r3
 8001976:	f241 3288 	movw	r2, #5000	; 0x1388
 800197a:	4293      	cmp	r3, r2
 800197c:	d901      	bls.n	8001982 <HAL_RCC_ClockConfig+0x2d2>
        {
          return HAL_TIMEOUT;
 800197e:	2303      	movs	r3, #3
 8001980:	e061      	b.n	8001a46 <HAL_RCC_ClockConfig+0x396>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8001982:	4b33      	ldr	r3, [pc, #204]	; (8001a50 <HAL_RCC_ClockConfig+0x3a0>)
 8001984:	689b      	ldr	r3, [r3, #8]
 8001986:	f003 030c 	and.w	r3, r3, #12
 800198a:	2b00      	cmp	r3, #0
 800198c:	d1ee      	bne.n	800196c <HAL_RCC_ClockConfig+0x2bc>
        }
      }
    }
  }    
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 800198e:	4b31      	ldr	r3, [pc, #196]	; (8001a54 <HAL_RCC_ClockConfig+0x3a4>)
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	f003 0201 	and.w	r2, r3, #1
 8001996:	683b      	ldr	r3, [r7, #0]
 8001998:	429a      	cmp	r2, r3
 800199a:	d919      	bls.n	80019d0 <HAL_RCC_ClockConfig+0x320>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800199c:	683b      	ldr	r3, [r7, #0]
 800199e:	2b01      	cmp	r3, #1
 80019a0:	d105      	bne.n	80019ae <HAL_RCC_ClockConfig+0x2fe>
 80019a2:	4a2c      	ldr	r2, [pc, #176]	; (8001a54 <HAL_RCC_ClockConfig+0x3a4>)
 80019a4:	4b2b      	ldr	r3, [pc, #172]	; (8001a54 <HAL_RCC_ClockConfig+0x3a4>)
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	f043 0304 	orr.w	r3, r3, #4
 80019ac:	6013      	str	r3, [r2, #0]
 80019ae:	4929      	ldr	r1, [pc, #164]	; (8001a54 <HAL_RCC_ClockConfig+0x3a4>)
 80019b0:	4b28      	ldr	r3, [pc, #160]	; (8001a54 <HAL_RCC_ClockConfig+0x3a4>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	f023 0201 	bic.w	r2, r3, #1
 80019b8:	683b      	ldr	r3, [r7, #0]
 80019ba:	4313      	orrs	r3, r2
 80019bc:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80019be:	4b25      	ldr	r3, [pc, #148]	; (8001a54 <HAL_RCC_ClockConfig+0x3a4>)
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f003 0201 	and.w	r2, r3, #1
 80019c6:	683b      	ldr	r3, [r7, #0]
 80019c8:	429a      	cmp	r2, r3
 80019ca:	d001      	beq.n	80019d0 <HAL_RCC_ClockConfig+0x320>
    {
      return HAL_ERROR;
 80019cc:	2301      	movs	r3, #1
 80019ce:	e03a      	b.n	8001a46 <HAL_RCC_ClockConfig+0x396>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	f003 0304 	and.w	r3, r3, #4
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d008      	beq.n	80019ee <HAL_RCC_ClockConfig+0x33e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80019dc:	491c      	ldr	r1, [pc, #112]	; (8001a50 <HAL_RCC_ClockConfig+0x3a0>)
 80019de:	4b1c      	ldr	r3, [pc, #112]	; (8001a50 <HAL_RCC_ClockConfig+0x3a0>)
 80019e0:	689b      	ldr	r3, [r3, #8]
 80019e2:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	68db      	ldr	r3, [r3, #12]
 80019ea:	4313      	orrs	r3, r2
 80019ec:	608b      	str	r3, [r1, #8]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	f003 0308 	and.w	r3, r3, #8
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d009      	beq.n	8001a0e <HAL_RCC_ClockConfig+0x35e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80019fa:	4915      	ldr	r1, [pc, #84]	; (8001a50 <HAL_RCC_ClockConfig+0x3a0>)
 80019fc:	4b14      	ldr	r3, [pc, #80]	; (8001a50 <HAL_RCC_ClockConfig+0x3a0>)
 80019fe:	689b      	ldr	r3, [r3, #8]
 8001a00:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	691b      	ldr	r3, [r3, #16]
 8001a08:	00db      	lsls	r3, r3, #3
 8001a0a:	4313      	orrs	r3, r2
 8001a0c:	608b      	str	r3, [r1, #8]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001a0e:	f000 f827 	bl	8001a60 <HAL_RCC_GetSysClockFreq>
 8001a12:	4601      	mov	r1, r0
 8001a14:	4b0e      	ldr	r3, [pc, #56]	; (8001a50 <HAL_RCC_ClockConfig+0x3a0>)
 8001a16:	689b      	ldr	r3, [r3, #8]
 8001a18:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001a1c:	23f0      	movs	r3, #240	; 0xf0
 8001a1e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a20:	693b      	ldr	r3, [r7, #16]
 8001a22:	fa93 f3a3 	rbit	r3, r3
 8001a26:	60fb      	str	r3, [r7, #12]
  return(result);
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	fab3 f383 	clz	r3, r3
 8001a2e:	fa22 f303 	lsr.w	r3, r2, r3
 8001a32:	4a09      	ldr	r2, [pc, #36]	; (8001a58 <HAL_RCC_ClockConfig+0x3a8>)
 8001a34:	5cd3      	ldrb	r3, [r2, r3]
 8001a36:	fa21 f303 	lsr.w	r3, r1, r3
 8001a3a:	4a08      	ldr	r2, [pc, #32]	; (8001a5c <HAL_RCC_ClockConfig+0x3ac>)
 8001a3c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001a3e:	2000      	movs	r0, #0
 8001a40:	f7fe fbaa 	bl	8000198 <HAL_InitTick>
  
  return HAL_OK;
 8001a44:	2300      	movs	r3, #0
}
 8001a46:	4618      	mov	r0, r3
 8001a48:	3758      	adds	r7, #88	; 0x58
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	bd80      	pop	{r7, pc}
 8001a4e:	bf00      	nop
 8001a50:	40023800 	.word	0x40023800
 8001a54:	40023c00 	.word	0x40023c00
 8001a58:	08002940 	.word	0x08002940
 8001a5c:	20000000 	.word	0x20000000

08001a60 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a60:	b480      	push	{r7}
 8001a62:	b08d      	sub	sp, #52	; 0x34
 8001a64:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, pllm = 0U, plld = 0U, pllvco = 0U, msiclkrange = 0U;
 8001a66:	2300      	movs	r3, #0
 8001a68:	627b      	str	r3, [r7, #36]	; 0x24
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	623b      	str	r3, [r7, #32]
 8001a6e:	2300      	movs	r3, #0
 8001a70:	61fb      	str	r3, [r7, #28]
 8001a72:	2300      	movs	r3, #0
 8001a74:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001a76:	2300      	movs	r3, #0
 8001a78:	61bb      	str	r3, [r7, #24]
  uint32_t sysclockfreq = 0U;
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	62bb      	str	r3, [r7, #40]	; 0x28
  
  tmpreg = RCC->CFGR;
 8001a7e:	4b37      	ldr	r3, [pc, #220]	; (8001b5c <HAL_RCC_GetSysClockFreq+0xfc>)
 8001a80:	689b      	ldr	r3, [r3, #8]
 8001a82:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001a84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a86:	f003 030c 	and.w	r3, r3, #12
 8001a8a:	2b08      	cmp	r3, #8
 8001a8c:	d006      	beq.n	8001a9c <HAL_RCC_GetSysClockFreq+0x3c>
 8001a8e:	2b0c      	cmp	r3, #12
 8001a90:	d007      	beq.n	8001aa2 <HAL_RCC_GetSysClockFreq+0x42>
 8001a92:	2b04      	cmp	r3, #4
 8001a94:	d142      	bne.n	8001b1c <HAL_RCC_GetSysClockFreq+0xbc>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001a96:	4b32      	ldr	r3, [pc, #200]	; (8001b60 <HAL_RCC_GetSysClockFreq+0x100>)
 8001a98:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8001a9a:	e058      	b.n	8001b4e <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001a9c:	4b31      	ldr	r3, [pc, #196]	; (8001b64 <HAL_RCC_GetSysClockFreq+0x104>)
 8001a9e:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8001aa0:	e055      	b.n	8001b4e <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8001aa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aa4:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001aa8:	f44f 1370 	mov.w	r3, #3932160	; 0x3c0000
 8001aac:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	fa93 f3a3 	rbit	r3, r3
 8001ab4:	60bb      	str	r3, [r7, #8]
  return(result);
 8001ab6:	68bb      	ldr	r3, [r7, #8]
 8001ab8:	fab3 f383 	clz	r3, r3
 8001abc:	fa22 f303 	lsr.w	r3, r2, r3
 8001ac0:	4a29      	ldr	r2, [pc, #164]	; (8001b68 <HAL_RCC_GetSysClockFreq+0x108>)
 8001ac2:	5cd3      	ldrb	r3, [r2, r3]
 8001ac4:	623b      	str	r3, [r7, #32]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_BITNUMBER) + 1U;
 8001ac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ac8:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 8001acc:	f44f 0340 	mov.w	r3, #12582912	; 0xc00000
 8001ad0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ad2:	697b      	ldr	r3, [r7, #20]
 8001ad4:	fa93 f3a3 	rbit	r3, r3
 8001ad8:	613b      	str	r3, [r7, #16]
  return(result);
 8001ada:	693b      	ldr	r3, [r7, #16]
 8001adc:	fab3 f383 	clz	r3, r3
 8001ae0:	fa22 f303 	lsr.w	r3, r2, r3
 8001ae4:	3301      	adds	r3, #1
 8001ae6:	61fb      	str	r3, [r7, #28]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001ae8:	4b1c      	ldr	r3, [pc, #112]	; (8001b5c <HAL_RCC_GetSysClockFreq+0xfc>)
 8001aea:	689b      	ldr	r3, [r3, #8]
 8001aec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d008      	beq.n	8001b06 <HAL_RCC_GetSysClockFreq+0xa6>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE * pllm) / plld;
 8001af4:	6a3b      	ldr	r3, [r7, #32]
 8001af6:	4a1b      	ldr	r2, [pc, #108]	; (8001b64 <HAL_RCC_GetSysClockFreq+0x104>)
 8001af8:	fb02 f203 	mul.w	r2, r2, r3
 8001afc:	69fb      	ldr	r3, [r7, #28]
 8001afe:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b02:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001b04:	e007      	b.n	8001b16 <HAL_RCC_GetSysClockFreq+0xb6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE * pllm) / plld;
 8001b06:	6a3b      	ldr	r3, [r7, #32]
 8001b08:	4a15      	ldr	r2, [pc, #84]	; (8001b60 <HAL_RCC_GetSysClockFreq+0x100>)
 8001b0a:	fb02 f203 	mul.w	r2, r2, r3
 8001b0e:	69fb      	ldr	r3, [r7, #28]
 8001b10:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b14:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      sysclockfreq = pllvco;
 8001b16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b18:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8001b1a:	e018      	b.n	8001b4e <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_BITNUMBER;
 8001b1c:	4b0f      	ldr	r3, [pc, #60]	; (8001b5c <HAL_RCC_GetSysClockFreq+0xfc>)
 8001b1e:	685b      	ldr	r3, [r3, #4]
 8001b20:	f403 4260 	and.w	r2, r3, #57344	; 0xe000
 8001b24:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8001b28:	607b      	str	r3, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	fa93 f3a3 	rbit	r3, r3
 8001b30:	603b      	str	r3, [r7, #0]
  return(result);
 8001b32:	683b      	ldr	r3, [r7, #0]
 8001b34:	fab3 f383 	clz	r3, r3
 8001b38:	fa22 f303 	lsr.w	r3, r2, r3
 8001b3c:	61bb      	str	r3, [r7, #24]
      sysclockfreq = (32768U * (1U << (msiclkrange + 1U)));
 8001b3e:	69bb      	ldr	r3, [r7, #24]
 8001b40:	3301      	adds	r3, #1
 8001b42:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001b46:	fa02 f303 	lsl.w	r3, r2, r3
 8001b4a:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8001b4c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001b4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8001b50:	4618      	mov	r0, r3
 8001b52:	3734      	adds	r7, #52	; 0x34
 8001b54:	46bd      	mov	sp, r7
 8001b56:	bc80      	pop	{r7}
 8001b58:	4770      	bx	lr
 8001b5a:	bf00      	nop
 8001b5c:	40023800 	.word	0x40023800
 8001b60:	00f42400 	.word	0x00f42400
 8001b64:	007a1200 	.word	0x007a1200
 8001b68:	08002934 	.word	0x08002934

08001b6c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001b6c:	b480      	push	{r7}
 8001b6e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001b70:	4b02      	ldr	r3, [pc, #8]	; (8001b7c <HAL_RCC_GetHCLKFreq+0x10>)
 8001b72:	681b      	ldr	r3, [r3, #0]
}
 8001b74:	4618      	mov	r0, r3
 8001b76:	46bd      	mov	sp, r7
 8001b78:	bc80      	pop	{r7}
 8001b7a:	4770      	bx	lr
 8001b7c:	20000000 	.word	0x20000000

08001b80 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b082      	sub	sp, #8
 8001b84:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8001b86:	f7ff fff1 	bl	8001b6c <HAL_RCC_GetHCLKFreq>
 8001b8a:	4601      	mov	r1, r0
 8001b8c:	4b0b      	ldr	r3, [pc, #44]	; (8001bbc <HAL_RCC_GetPCLK1Freq+0x3c>)
 8001b8e:	689b      	ldr	r3, [r3, #8]
 8001b90:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001b94:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8001b98:	607b      	str	r3, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	fa93 f3a3 	rbit	r3, r3
 8001ba0:	603b      	str	r3, [r7, #0]
  return(result);
 8001ba2:	683b      	ldr	r3, [r7, #0]
 8001ba4:	fab3 f383 	clz	r3, r3
 8001ba8:	fa22 f303 	lsr.w	r3, r2, r3
 8001bac:	4a04      	ldr	r2, [pc, #16]	; (8001bc0 <HAL_RCC_GetPCLK1Freq+0x40>)
 8001bae:	5cd3      	ldrb	r3, [r2, r3]
 8001bb0:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	3708      	adds	r7, #8
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	bd80      	pop	{r7, pc}
 8001bbc:	40023800 	.word	0x40023800
 8001bc0:	08002950 	.word	0x08002950

08001bc4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b082      	sub	sp, #8
 8001bc8:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8001bca:	f7ff ffcf 	bl	8001b6c <HAL_RCC_GetHCLKFreq>
 8001bce:	4601      	mov	r1, r0
 8001bd0:	4b0b      	ldr	r3, [pc, #44]	; (8001c00 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8001bd2:	689b      	ldr	r3, [r3, #8]
 8001bd4:	f403 5260 	and.w	r2, r3, #14336	; 0x3800
 8001bd8:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001bdc:	607b      	str	r3, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	fa93 f3a3 	rbit	r3, r3
 8001be4:	603b      	str	r3, [r7, #0]
  return(result);
 8001be6:	683b      	ldr	r3, [r7, #0]
 8001be8:	fab3 f383 	clz	r3, r3
 8001bec:	fa22 f303 	lsr.w	r3, r2, r3
 8001bf0:	4a04      	ldr	r2, [pc, #16]	; (8001c04 <HAL_RCC_GetPCLK2Freq+0x40>)
 8001bf2:	5cd3      	ldrb	r3, [r2, r3]
 8001bf4:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	3708      	adds	r7, #8
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	bd80      	pop	{r7, pc}
 8001c00:	40023800 	.word	0x40023800
 8001c04:	08002950 	.word	0x08002950

08001c08 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 8001c08:	b480      	push	{r7}
 8001c0a:	b087      	sub	sp, #28
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
  uint32_t vos = 0U;
 8001c10:	2300      	movs	r3, #0
 8001c12:	617b      	str	r3, [r7, #20]
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001c14:	2300      	movs	r3, #0
 8001c16:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8001c18:	4b29      	ldr	r3, [pc, #164]	; (8001cc0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001c1a:	689b      	ldr	r3, [r3, #8]
 8001c1c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d12c      	bne.n	8001c7e <RCC_SetFlashLatencyFromMSIRange+0x76>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001c24:	4b26      	ldr	r3, [pc, #152]	; (8001cc0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001c26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d005      	beq.n	8001c3c <RCC_SetFlashLatencyFromMSIRange+0x34>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8001c30:	4b24      	ldr	r3, [pc, #144]	; (8001cc4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8001c38:	617b      	str	r3, [r7, #20]
 8001c3a:	e016      	b.n	8001c6a <RCC_SetFlashLatencyFromMSIRange+0x62>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c3c:	4a20      	ldr	r2, [pc, #128]	; (8001cc0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001c3e:	4b20      	ldr	r3, [pc, #128]	; (8001cc0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001c40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c42:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c46:	6253      	str	r3, [r2, #36]	; 0x24
 8001c48:	4b1d      	ldr	r3, [pc, #116]	; (8001cc0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001c4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c4c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c50:	60fb      	str	r3, [r7, #12]
 8001c52:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8001c54:	4b1b      	ldr	r3, [pc, #108]	; (8001cc4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8001c5c:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c5e:	4a18      	ldr	r2, [pc, #96]	; (8001cc0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001c60:	4b17      	ldr	r3, [pc, #92]	; (8001cc0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001c62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c64:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001c68:	6253      	str	r3, [r2, #36]	; 0x24
    }
    
    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 8001c6a:	697b      	ldr	r3, [r7, #20]
 8001c6c:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8001c70:	d105      	bne.n	8001c7e <RCC_SetFlashLatencyFromMSIRange+0x76>
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8001c78:	d101      	bne.n	8001c7e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 8001c7a:	2301      	movs	r3, #1
 8001c7c:	613b      	str	r3, [r7, #16]
    }
  }
  
  __HAL_FLASH_SET_LATENCY(latency);
 8001c7e:	693b      	ldr	r3, [r7, #16]
 8001c80:	2b01      	cmp	r3, #1
 8001c82:	d105      	bne.n	8001c90 <RCC_SetFlashLatencyFromMSIRange+0x88>
 8001c84:	4a10      	ldr	r2, [pc, #64]	; (8001cc8 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8001c86:	4b10      	ldr	r3, [pc, #64]	; (8001cc8 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	f043 0304 	orr.w	r3, r3, #4
 8001c8e:	6013      	str	r3, [r2, #0]
 8001c90:	490d      	ldr	r1, [pc, #52]	; (8001cc8 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8001c92:	4b0d      	ldr	r3, [pc, #52]	; (8001cc8 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f023 0201 	bic.w	r2, r3, #1
 8001c9a:	693b      	ldr	r3, [r7, #16]
 8001c9c:	4313      	orrs	r3, r2
 8001c9e:	600b      	str	r3, [r1, #0]
  
  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 8001ca0:	4b09      	ldr	r3, [pc, #36]	; (8001cc8 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	f003 0201 	and.w	r2, r3, #1
 8001ca8:	693b      	ldr	r3, [r7, #16]
 8001caa:	429a      	cmp	r2, r3
 8001cac:	d001      	beq.n	8001cb2 <RCC_SetFlashLatencyFromMSIRange+0xaa>
  {
    return HAL_ERROR;
 8001cae:	2301      	movs	r3, #1
 8001cb0:	e000      	b.n	8001cb4 <RCC_SetFlashLatencyFromMSIRange+0xac>
  }
  
  return HAL_OK;
 8001cb2:	2300      	movs	r3, #0
}
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	371c      	adds	r7, #28
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	bc80      	pop	{r7}
 8001cbc:	4770      	bx	lr
 8001cbe:	bf00      	nop
 8001cc0:	40023800 	.word	0x40023800
 8001cc4:	40007000 	.word	0x40007000
 8001cc8:	40023c00 	.word	0x40023c00

08001ccc <HAL_UART_Init>:
  * @param  huart: Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b082      	sub	sp, #8
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if(huart == NULL)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d101      	bne.n	8001cde <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001cda:	2301      	movs	r3, #1
 8001cdc:	e03b      	b.n	8001d56 <HAL_UART_Init+0x8a>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
  
  if(huart->State == HAL_UART_STATE_RESET)
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001ce4:	b2db      	uxtb	r3, r3
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d106      	bne.n	8001cf8 <HAL_UART_Init+0x2c>
  {  
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	2200      	movs	r2, #0
 8001cee:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    HAL_UART_MspInit(huart);
 8001cf2:	6878      	ldr	r0, [r7, #4]
 8001cf4:	f000 fd4c 	bl	8002790 <HAL_UART_MspInit>
  }

  huart->State = HAL_UART_STATE_BUSY;
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	2202      	movs	r2, #2
 8001cfc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	687a      	ldr	r2, [r7, #4]
 8001d06:	6812      	ldr	r2, [r2, #0]
 8001d08:	68d2      	ldr	r2, [r2, #12]
 8001d0a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001d0e:	60da      	str	r2, [r3, #12]
  
  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001d10:	6878      	ldr	r0, [r7, #4]
 8001d12:	f000 f965 	bl	8001fe0 <UART_SetConfig>
  
  /* In asynchronous mode, the following bits must be kept cleared: 
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	687a      	ldr	r2, [r7, #4]
 8001d1c:	6812      	ldr	r2, [r2, #0]
 8001d1e:	6912      	ldr	r2, [r2, #16]
 8001d20:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001d24:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	687a      	ldr	r2, [r7, #4]
 8001d2c:	6812      	ldr	r2, [r2, #0]
 8001d2e:	6952      	ldr	r2, [r2, #20]
 8001d30:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001d34:	615a      	str	r2, [r3, #20]
  
  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	687a      	ldr	r2, [r7, #4]
 8001d3c:	6812      	ldr	r2, [r2, #0]
 8001d3e:	68d2      	ldr	r2, [r2, #12]
 8001d40:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001d44:	60da      	str	r2, [r3, #12]
  
  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	2200      	movs	r2, #0
 8001d4a:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->State= HAL_UART_STATE_READY;
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	2201      	movs	r2, #1
 8001d50:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  return HAL_OK;
 8001d54:	2300      	movs	r3, #0
}
 8001d56:	4618      	mov	r0, r3
 8001d58:	3708      	adds	r7, #8
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	bd80      	pop	{r7, pc}

08001d5e <HAL_UART_Transmit>:
  * @param  Size: Amount of data to be sent
  * @param  Timeout: Timeout duration  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001d5e:	b580      	push	{r7, lr}
 8001d60:	b086      	sub	sp, #24
 8001d62:	af00      	add	r7, sp, #0
 8001d64:	60f8      	str	r0, [r7, #12]
 8001d66:	60b9      	str	r1, [r7, #8]
 8001d68:	603b      	str	r3, [r7, #0]
 8001d6a:	4613      	mov	r3, r2
 8001d6c:	80fb      	strh	r3, [r7, #6]
  uint16_t* tmp;
  uint32_t tmp_state = 0;
 8001d6e:	2300      	movs	r3, #0
 8001d70:	617b      	str	r3, [r7, #20]
  
  tmp_state = huart->State;
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001d78:	b2db      	uxtb	r3, r3
 8001d7a:	617b      	str	r3, [r7, #20]
  if((tmp_state == HAL_UART_STATE_READY) || (tmp_state == HAL_UART_STATE_BUSY_RX))
 8001d7c:	697b      	ldr	r3, [r7, #20]
 8001d7e:	2b01      	cmp	r3, #1
 8001d80:	d003      	beq.n	8001d8a <HAL_UART_Transmit+0x2c>
 8001d82:	697b      	ldr	r3, [r7, #20]
 8001d84:	2b22      	cmp	r3, #34	; 0x22
 8001d86:	f040 808d 	bne.w	8001ea4 <HAL_UART_Transmit+0x146>
  {
    if((pData == NULL) || (Size == 0))
 8001d8a:	68bb      	ldr	r3, [r7, #8]
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d002      	beq.n	8001d96 <HAL_UART_Transmit+0x38>
 8001d90:	88fb      	ldrh	r3, [r7, #6]
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d101      	bne.n	8001d9a <HAL_UART_Transmit+0x3c>
    {
      return  HAL_ERROR;
 8001d96:	2301      	movs	r3, #1
 8001d98:	e085      	b.n	8001ea6 <HAL_UART_Transmit+0x148>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001da0:	2b01      	cmp	r3, #1
 8001da2:	d101      	bne.n	8001da8 <HAL_UART_Transmit+0x4a>
 8001da4:	2302      	movs	r3, #2
 8001da6:	e07e      	b.n	8001ea6 <HAL_UART_Transmit+0x148>
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	2201      	movs	r2, #1
 8001dac:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	2200      	movs	r2, #0
 8001db4:	63da      	str	r2, [r3, #60]	; 0x3c
    /* Check if a non-blocking receive process is ongoing or not */
    if(huart->State == HAL_UART_STATE_BUSY_RX) 
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001dbc:	b2db      	uxtb	r3, r3
 8001dbe:	2b22      	cmp	r3, #34	; 0x22
 8001dc0:	d104      	bne.n	8001dcc <HAL_UART_Transmit+0x6e>
    {
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	2232      	movs	r2, #50	; 0x32
 8001dc6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8001dca:	e003      	b.n	8001dd4 <HAL_UART_Transmit+0x76>
    }
    else
    {
      huart->State = HAL_UART_STATE_BUSY_TX;
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	2212      	movs	r2, #18
 8001dd0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    }

    huart->TxXferSize = Size;
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	88fa      	ldrh	r2, [r7, #6]
 8001dd8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	88fa      	ldrh	r2, [r7, #6]
 8001dde:	84da      	strh	r2, [r3, #38]	; 0x26
    while(huart->TxXferCount > 0)
 8001de0:	e03c      	b.n	8001e5c <HAL_UART_Transmit+0xfe>
    {
      huart->TxXferCount--;
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001de6:	3b01      	subs	r3, #1
 8001de8:	b29a      	uxth	r2, r3
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	84da      	strh	r2, [r3, #38]	; 0x26
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	689b      	ldr	r3, [r3, #8]
 8001df2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001df6:	d11f      	bne.n	8001e38 <HAL_UART_Transmit+0xda>
      {
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, Timeout) != HAL_OK)
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	2180      	movs	r1, #128	; 0x80
 8001dfe:	68f8      	ldr	r0, [r7, #12]
 8001e00:	f000 f855 	bl	8001eae <UART_WaitOnFlagUntilTimeout>
 8001e04:	4603      	mov	r3, r0
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d001      	beq.n	8001e0e <HAL_UART_Transmit+0xb0>
        {
          return HAL_TIMEOUT;
 8001e0a:	2303      	movs	r3, #3
 8001e0c:	e04b      	b.n	8001ea6 <HAL_UART_Transmit+0x148>
        }
        tmp = (uint16_t*) pData;
 8001e0e:	68bb      	ldr	r3, [r7, #8]
 8001e10:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	693a      	ldr	r2, [r7, #16]
 8001e18:	8812      	ldrh	r2, [r2, #0]
 8001e1a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001e1e:	605a      	str	r2, [r3, #4]
        if(huart->Init.Parity == UART_PARITY_NONE)
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	691b      	ldr	r3, [r3, #16]
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d103      	bne.n	8001e30 <HAL_UART_Transmit+0xd2>
        {
          pData +=2;
 8001e28:	68bb      	ldr	r3, [r7, #8]
 8001e2a:	3302      	adds	r3, #2
 8001e2c:	60bb      	str	r3, [r7, #8]
 8001e2e:	e015      	b.n	8001e5c <HAL_UART_Transmit+0xfe>
        }
        else
        { 
          pData +=1;
 8001e30:	68bb      	ldr	r3, [r7, #8]
 8001e32:	3301      	adds	r3, #1
 8001e34:	60bb      	str	r3, [r7, #8]
 8001e36:	e011      	b.n	8001e5c <HAL_UART_Transmit+0xfe>
        }
      } 
      else
      {
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, Timeout) != HAL_OK)
 8001e38:	683b      	ldr	r3, [r7, #0]
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	2180      	movs	r1, #128	; 0x80
 8001e3e:	68f8      	ldr	r0, [r7, #12]
 8001e40:	f000 f835 	bl	8001eae <UART_WaitOnFlagUntilTimeout>
 8001e44:	4603      	mov	r3, r0
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d001      	beq.n	8001e4e <HAL_UART_Transmit+0xf0>
        {
          return HAL_TIMEOUT;
 8001e4a:	2303      	movs	r3, #3
 8001e4c:	e02b      	b.n	8001ea6 <HAL_UART_Transmit+0x148>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	681a      	ldr	r2, [r3, #0]
 8001e52:	68bb      	ldr	r3, [r7, #8]
 8001e54:	1c59      	adds	r1, r3, #1
 8001e56:	60b9      	str	r1, [r7, #8]
 8001e58:	781b      	ldrb	r3, [r3, #0]
 8001e5a:	6053      	str	r3, [r2, #4]
    while(huart->TxXferCount > 0)
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d1be      	bne.n	8001de2 <HAL_UART_Transmit+0x84>
      }
    }

    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, Timeout) != HAL_OK)
 8001e64:	683b      	ldr	r3, [r7, #0]
 8001e66:	2200      	movs	r2, #0
 8001e68:	2140      	movs	r1, #64	; 0x40
 8001e6a:	68f8      	ldr	r0, [r7, #12]
 8001e6c:	f000 f81f 	bl	8001eae <UART_WaitOnFlagUntilTimeout>
 8001e70:	4603      	mov	r3, r0
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d001      	beq.n	8001e7a <HAL_UART_Transmit+0x11c>
    { 
      return HAL_TIMEOUT;
 8001e76:	2303      	movs	r3, #3
 8001e78:	e015      	b.n	8001ea6 <HAL_UART_Transmit+0x148>
    }

    /* Check if a non-blocking receive process is ongoing or not */
    if(huart->State == HAL_UART_STATE_BUSY_TX_RX) 
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001e80:	b2db      	uxtb	r3, r3
 8001e82:	2b32      	cmp	r3, #50	; 0x32
 8001e84:	d104      	bne.n	8001e90 <HAL_UART_Transmit+0x132>
    {
      huart->State = HAL_UART_STATE_BUSY_RX;
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	2222      	movs	r2, #34	; 0x22
 8001e8a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8001e8e:	e003      	b.n	8001e98 <HAL_UART_Transmit+0x13a>
    }
    else
    {
      huart->State = HAL_UART_STATE_READY;
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	2201      	movs	r2, #1
 8001e94:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	e000      	b.n	8001ea6 <HAL_UART_Transmit+0x148>
  }
  else
  {
    return HAL_BUSY;
 8001ea4:	2302      	movs	r3, #2
  }
}
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	3718      	adds	r7, #24
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	bd80      	pop	{r7, pc}

08001eae <UART_WaitOnFlagUntilTimeout>:
  * @param  Status: The new Flag status (SET or RESET).
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Timeout)
{
 8001eae:	b580      	push	{r7, lr}
 8001eb0:	b086      	sub	sp, #24
 8001eb2:	af00      	add	r7, sp, #0
 8001eb4:	60f8      	str	r0, [r7, #12]
 8001eb6:	60b9      	str	r1, [r7, #8]
 8001eb8:	603b      	str	r3, [r7, #0]
 8001eba:	4613      	mov	r3, r2
 8001ebc:	71fb      	strb	r3, [r7, #7]
  uint32_t tickstart = 0;
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	617b      	str	r3, [r7, #20]

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8001ec2:	f7fe f993 	bl	80001ec <HAL_GetTick>
 8001ec6:	6178      	str	r0, [r7, #20]

  /* Wait until flag is set */
  if(Status == RESET)
 8001ec8:	79fb      	ldrb	r3, [r7, #7]
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d17b      	bne.n	8001fc6 <UART_WaitOnFlagUntilTimeout+0x118>
  {
    while(__HAL_UART_GET_FLAG(huart, Flag) == RESET)
 8001ece:	e038      	b.n	8001f42 <UART_WaitOnFlagUntilTimeout+0x94>
    {
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 8001ed0:	683b      	ldr	r3, [r7, #0]
 8001ed2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ed6:	d034      	beq.n	8001f42 <UART_WaitOnFlagUntilTimeout+0x94>
      {
        if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d007      	beq.n	8001eee <UART_WaitOnFlagUntilTimeout+0x40>
 8001ede:	f7fe f985 	bl	80001ec <HAL_GetTick>
 8001ee2:	4602      	mov	r2, r0
 8001ee4:	697b      	ldr	r3, [r7, #20]
 8001ee6:	1ad2      	subs	r2, r2, r3
 8001ee8:	683b      	ldr	r3, [r7, #0]
 8001eea:	429a      	cmp	r2, r3
 8001eec:	d929      	bls.n	8001f42 <UART_WaitOnFlagUntilTimeout+0x94>
        {
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	68fa      	ldr	r2, [r7, #12]
 8001ef4:	6812      	ldr	r2, [r2, #0]
 8001ef6:	68d2      	ldr	r2, [r2, #12]
 8001ef8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001efc:	60da      	str	r2, [r3, #12]
          __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	68fa      	ldr	r2, [r7, #12]
 8001f04:	6812      	ldr	r2, [r2, #0]
 8001f06:	68d2      	ldr	r2, [r2, #12]
 8001f08:	f022 0220 	bic.w	r2, r2, #32
 8001f0c:	60da      	str	r2, [r3, #12]
          __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	68fa      	ldr	r2, [r7, #12]
 8001f14:	6812      	ldr	r2, [r2, #0]
 8001f16:	68d2      	ldr	r2, [r2, #12]
 8001f18:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001f1c:	60da      	str	r2, [r3, #12]
          __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	68fa      	ldr	r2, [r7, #12]
 8001f24:	6812      	ldr	r2, [r2, #0]
 8001f26:	6952      	ldr	r2, [r2, #20]
 8001f28:	f022 0201 	bic.w	r2, r2, #1
 8001f2c:	615a      	str	r2, [r3, #20]

          huart->State= HAL_UART_STATE_READY;
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	2201      	movs	r2, #1
 8001f32:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	2200      	movs	r2, #0
 8001f3a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8001f3e:	2303      	movs	r3, #3
 8001f40:	e04a      	b.n	8001fd8 <UART_WaitOnFlagUntilTimeout+0x12a>
    while(__HAL_UART_GET_FLAG(huart, Flag) == RESET)
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	681a      	ldr	r2, [r3, #0]
 8001f48:	68bb      	ldr	r3, [r7, #8]
 8001f4a:	401a      	ands	r2, r3
 8001f4c:	68bb      	ldr	r3, [r7, #8]
 8001f4e:	429a      	cmp	r2, r3
 8001f50:	d1be      	bne.n	8001ed0 <UART_WaitOnFlagUntilTimeout+0x22>
 8001f52:	e040      	b.n	8001fd6 <UART_WaitOnFlagUntilTimeout+0x128>
  else
  {
    while(__HAL_UART_GET_FLAG(huart, Flag) != RESET)
    {
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 8001f54:	683b      	ldr	r3, [r7, #0]
 8001f56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f5a:	d034      	beq.n	8001fc6 <UART_WaitOnFlagUntilTimeout+0x118>
      {
        if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d007      	beq.n	8001f72 <UART_WaitOnFlagUntilTimeout+0xc4>
 8001f62:	f7fe f943 	bl	80001ec <HAL_GetTick>
 8001f66:	4602      	mov	r2, r0
 8001f68:	697b      	ldr	r3, [r7, #20]
 8001f6a:	1ad2      	subs	r2, r2, r3
 8001f6c:	683b      	ldr	r3, [r7, #0]
 8001f6e:	429a      	cmp	r2, r3
 8001f70:	d929      	bls.n	8001fc6 <UART_WaitOnFlagUntilTimeout+0x118>
        {
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	68fa      	ldr	r2, [r7, #12]
 8001f78:	6812      	ldr	r2, [r2, #0]
 8001f7a:	68d2      	ldr	r2, [r2, #12]
 8001f7c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001f80:	60da      	str	r2, [r3, #12]
          __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	68fa      	ldr	r2, [r7, #12]
 8001f88:	6812      	ldr	r2, [r2, #0]
 8001f8a:	68d2      	ldr	r2, [r2, #12]
 8001f8c:	f022 0220 	bic.w	r2, r2, #32
 8001f90:	60da      	str	r2, [r3, #12]
          __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	68fa      	ldr	r2, [r7, #12]
 8001f98:	6812      	ldr	r2, [r2, #0]
 8001f9a:	68d2      	ldr	r2, [r2, #12]
 8001f9c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001fa0:	60da      	str	r2, [r3, #12]
          __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	68fa      	ldr	r2, [r7, #12]
 8001fa8:	6812      	ldr	r2, [r2, #0]
 8001faa:	6952      	ldr	r2, [r2, #20]
 8001fac:	f022 0201 	bic.w	r2, r2, #1
 8001fb0:	615a      	str	r2, [r3, #20]

          huart->State= HAL_UART_STATE_READY;
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	2201      	movs	r2, #1
 8001fb6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8001fc2:	2303      	movs	r3, #3
 8001fc4:	e008      	b.n	8001fd8 <UART_WaitOnFlagUntilTimeout+0x12a>
    while(__HAL_UART_GET_FLAG(huart, Flag) != RESET)
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	681a      	ldr	r2, [r3, #0]
 8001fcc:	68bb      	ldr	r3, [r7, #8]
 8001fce:	401a      	ands	r2, r3
 8001fd0:	68bb      	ldr	r3, [r7, #8]
 8001fd2:	429a      	cmp	r2, r3
 8001fd4:	d0be      	beq.n	8001f54 <UART_WaitOnFlagUntilTimeout+0xa6>
        }
      }
    }
  }
  return HAL_OK;
 8001fd6:	2300      	movs	r3, #0
}
 8001fd8:	4618      	mov	r0, r3
 8001fda:	3718      	adds	r7, #24
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	bd80      	pop	{r7, pc}

08001fe0 <UART_SetConfig>:
  * @param  huart: Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001fe0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001fe2:	b085      	sub	sp, #20
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0x00;
 8001fe8:	2300      	movs	r3, #0
 8001fea:	60fb      	str	r3, [r7, #12]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*------- UART-associated USART registers setting : CR2 Configuration ------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according 
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	687a      	ldr	r2, [r7, #4]
 8001ff2:	6812      	ldr	r2, [r2, #0]
 8001ff4:	6912      	ldr	r2, [r2, #16]
 8001ff6:	f422 5140 	bic.w	r1, r2, #12288	; 0x3000
 8001ffa:	687a      	ldr	r2, [r7, #4]
 8001ffc:	68d2      	ldr	r2, [r2, #12]
 8001ffe:	430a      	orrs	r2, r1
 8002000:	611a      	str	r2, [r3, #16]
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	689a      	ldr	r2, [r3, #8]
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	691b      	ldr	r3, [r3, #16]
 800200a:	431a      	orrs	r2, r3
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	695b      	ldr	r3, [r3, #20]
 8002010:	431a      	orrs	r2, r3
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	69db      	ldr	r3, [r3, #28]
 8002016:	4313      	orrs	r3, r2
 8002018:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1, 
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681a      	ldr	r2, [r3, #0]
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	68db      	ldr	r3, [r3, #12]
 8002024:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8002028:	f023 030c 	bic.w	r3, r3, #12
 800202c:	68f9      	ldr	r1, [r7, #12]
 800202e:	430b      	orrs	r3, r1
 8002030:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8), 
             tmpreg);
  
  /*------- UART-associated USART registers setting : CR3 Configuration ------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	687a      	ldr	r2, [r7, #4]
 8002038:	6812      	ldr	r2, [r2, #0]
 800203a:	6952      	ldr	r2, [r2, #20]
 800203c:	f422 7140 	bic.w	r1, r2, #768	; 0x300
 8002040:	687a      	ldr	r2, [r7, #4]
 8002042:	6992      	ldr	r2, [r2, #24]
 8002044:	430a      	orrs	r2, r1
 8002046:	615a      	str	r2, [r3, #20]
  
  /* Check the Over Sampling */
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	69db      	ldr	r3, [r3, #28]
 800204c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002050:	f040 80df 	bne.w	8002212 <UART_SetConfig+0x232>
  {
    /*------- UART-associated USART registers setting : BRR Configuration ------*/
    if((huart->Instance == USART1))
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	4aa6      	ldr	r2, [pc, #664]	; (80022f4 <UART_SetConfig+0x314>)
 800205a:	4293      	cmp	r3, r2
 800205c:	d16c      	bne.n	8002138 <UART_SetConfig+0x158>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681c      	ldr	r4, [r3, #0]
 8002062:	f7ff fdaf 	bl	8001bc4 <HAL_RCC_GetPCLK2Freq>
 8002066:	4602      	mov	r2, r0
 8002068:	4613      	mov	r3, r2
 800206a:	009b      	lsls	r3, r3, #2
 800206c:	4413      	add	r3, r2
 800206e:	009a      	lsls	r2, r3, #2
 8002070:	441a      	add	r2, r3
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	685b      	ldr	r3, [r3, #4]
 8002076:	005b      	lsls	r3, r3, #1
 8002078:	fbb2 f3f3 	udiv	r3, r2, r3
 800207c:	4a9e      	ldr	r2, [pc, #632]	; (80022f8 <UART_SetConfig+0x318>)
 800207e:	fba2 2303 	umull	r2, r3, r2, r3
 8002082:	095b      	lsrs	r3, r3, #5
 8002084:	011d      	lsls	r5, r3, #4
 8002086:	f7ff fd9d 	bl	8001bc4 <HAL_RCC_GetPCLK2Freq>
 800208a:	4602      	mov	r2, r0
 800208c:	4613      	mov	r3, r2
 800208e:	009b      	lsls	r3, r3, #2
 8002090:	4413      	add	r3, r2
 8002092:	009a      	lsls	r2, r3, #2
 8002094:	441a      	add	r2, r3
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	685b      	ldr	r3, [r3, #4]
 800209a:	005b      	lsls	r3, r3, #1
 800209c:	fbb2 f6f3 	udiv	r6, r2, r3
 80020a0:	f7ff fd90 	bl	8001bc4 <HAL_RCC_GetPCLK2Freq>
 80020a4:	4602      	mov	r2, r0
 80020a6:	4613      	mov	r3, r2
 80020a8:	009b      	lsls	r3, r3, #2
 80020aa:	4413      	add	r3, r2
 80020ac:	009a      	lsls	r2, r3, #2
 80020ae:	441a      	add	r2, r3
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	685b      	ldr	r3, [r3, #4]
 80020b4:	005b      	lsls	r3, r3, #1
 80020b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80020ba:	4a8f      	ldr	r2, [pc, #572]	; (80022f8 <UART_SetConfig+0x318>)
 80020bc:	fba2 2303 	umull	r2, r3, r2, r3
 80020c0:	095b      	lsrs	r3, r3, #5
 80020c2:	2264      	movs	r2, #100	; 0x64
 80020c4:	fb02 f303 	mul.w	r3, r2, r3
 80020c8:	1af3      	subs	r3, r6, r3
 80020ca:	00db      	lsls	r3, r3, #3
 80020cc:	3332      	adds	r3, #50	; 0x32
 80020ce:	4a8a      	ldr	r2, [pc, #552]	; (80022f8 <UART_SetConfig+0x318>)
 80020d0:	fba2 2303 	umull	r2, r3, r2, r3
 80020d4:	095b      	lsrs	r3, r3, #5
 80020d6:	005b      	lsls	r3, r3, #1
 80020d8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80020dc:	441d      	add	r5, r3
 80020de:	f7ff fd71 	bl	8001bc4 <HAL_RCC_GetPCLK2Freq>
 80020e2:	4602      	mov	r2, r0
 80020e4:	4613      	mov	r3, r2
 80020e6:	009b      	lsls	r3, r3, #2
 80020e8:	4413      	add	r3, r2
 80020ea:	009a      	lsls	r2, r3, #2
 80020ec:	441a      	add	r2, r3
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	685b      	ldr	r3, [r3, #4]
 80020f2:	005b      	lsls	r3, r3, #1
 80020f4:	fbb2 f6f3 	udiv	r6, r2, r3
 80020f8:	f7ff fd64 	bl	8001bc4 <HAL_RCC_GetPCLK2Freq>
 80020fc:	4602      	mov	r2, r0
 80020fe:	4613      	mov	r3, r2
 8002100:	009b      	lsls	r3, r3, #2
 8002102:	4413      	add	r3, r2
 8002104:	009a      	lsls	r2, r3, #2
 8002106:	441a      	add	r2, r3
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	685b      	ldr	r3, [r3, #4]
 800210c:	005b      	lsls	r3, r3, #1
 800210e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002112:	4a79      	ldr	r2, [pc, #484]	; (80022f8 <UART_SetConfig+0x318>)
 8002114:	fba2 2303 	umull	r2, r3, r2, r3
 8002118:	095b      	lsrs	r3, r3, #5
 800211a:	2264      	movs	r2, #100	; 0x64
 800211c:	fb02 f303 	mul.w	r3, r2, r3
 8002120:	1af3      	subs	r3, r6, r3
 8002122:	00db      	lsls	r3, r3, #3
 8002124:	3332      	adds	r3, #50	; 0x32
 8002126:	4a74      	ldr	r2, [pc, #464]	; (80022f8 <UART_SetConfig+0x318>)
 8002128:	fba2 2303 	umull	r2, r3, r2, r3
 800212c:	095b      	lsrs	r3, r3, #5
 800212e:	f003 0307 	and.w	r3, r3, #7
 8002132:	442b      	add	r3, r5
 8002134:	60a3      	str	r3, [r4, #8]
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
}
 8002136:	e14c      	b.n	80023d2 <UART_SetConfig+0x3f2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681c      	ldr	r4, [r3, #0]
 800213c:	f7ff fd20 	bl	8001b80 <HAL_RCC_GetPCLK1Freq>
 8002140:	4602      	mov	r2, r0
 8002142:	4613      	mov	r3, r2
 8002144:	009b      	lsls	r3, r3, #2
 8002146:	4413      	add	r3, r2
 8002148:	009a      	lsls	r2, r3, #2
 800214a:	441a      	add	r2, r3
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	685b      	ldr	r3, [r3, #4]
 8002150:	005b      	lsls	r3, r3, #1
 8002152:	fbb2 f3f3 	udiv	r3, r2, r3
 8002156:	4a68      	ldr	r2, [pc, #416]	; (80022f8 <UART_SetConfig+0x318>)
 8002158:	fba2 2303 	umull	r2, r3, r2, r3
 800215c:	095b      	lsrs	r3, r3, #5
 800215e:	011d      	lsls	r5, r3, #4
 8002160:	f7ff fd0e 	bl	8001b80 <HAL_RCC_GetPCLK1Freq>
 8002164:	4602      	mov	r2, r0
 8002166:	4613      	mov	r3, r2
 8002168:	009b      	lsls	r3, r3, #2
 800216a:	4413      	add	r3, r2
 800216c:	009a      	lsls	r2, r3, #2
 800216e:	441a      	add	r2, r3
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	685b      	ldr	r3, [r3, #4]
 8002174:	005b      	lsls	r3, r3, #1
 8002176:	fbb2 f6f3 	udiv	r6, r2, r3
 800217a:	f7ff fd01 	bl	8001b80 <HAL_RCC_GetPCLK1Freq>
 800217e:	4602      	mov	r2, r0
 8002180:	4613      	mov	r3, r2
 8002182:	009b      	lsls	r3, r3, #2
 8002184:	4413      	add	r3, r2
 8002186:	009a      	lsls	r2, r3, #2
 8002188:	441a      	add	r2, r3
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	685b      	ldr	r3, [r3, #4]
 800218e:	005b      	lsls	r3, r3, #1
 8002190:	fbb2 f3f3 	udiv	r3, r2, r3
 8002194:	4a58      	ldr	r2, [pc, #352]	; (80022f8 <UART_SetConfig+0x318>)
 8002196:	fba2 2303 	umull	r2, r3, r2, r3
 800219a:	095b      	lsrs	r3, r3, #5
 800219c:	2264      	movs	r2, #100	; 0x64
 800219e:	fb02 f303 	mul.w	r3, r2, r3
 80021a2:	1af3      	subs	r3, r6, r3
 80021a4:	00db      	lsls	r3, r3, #3
 80021a6:	3332      	adds	r3, #50	; 0x32
 80021a8:	4a53      	ldr	r2, [pc, #332]	; (80022f8 <UART_SetConfig+0x318>)
 80021aa:	fba2 2303 	umull	r2, r3, r2, r3
 80021ae:	095b      	lsrs	r3, r3, #5
 80021b0:	005b      	lsls	r3, r3, #1
 80021b2:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80021b6:	441d      	add	r5, r3
 80021b8:	f7ff fce2 	bl	8001b80 <HAL_RCC_GetPCLK1Freq>
 80021bc:	4602      	mov	r2, r0
 80021be:	4613      	mov	r3, r2
 80021c0:	009b      	lsls	r3, r3, #2
 80021c2:	4413      	add	r3, r2
 80021c4:	009a      	lsls	r2, r3, #2
 80021c6:	441a      	add	r2, r3
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	685b      	ldr	r3, [r3, #4]
 80021cc:	005b      	lsls	r3, r3, #1
 80021ce:	fbb2 f6f3 	udiv	r6, r2, r3
 80021d2:	f7ff fcd5 	bl	8001b80 <HAL_RCC_GetPCLK1Freq>
 80021d6:	4602      	mov	r2, r0
 80021d8:	4613      	mov	r3, r2
 80021da:	009b      	lsls	r3, r3, #2
 80021dc:	4413      	add	r3, r2
 80021de:	009a      	lsls	r2, r3, #2
 80021e0:	441a      	add	r2, r3
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	685b      	ldr	r3, [r3, #4]
 80021e6:	005b      	lsls	r3, r3, #1
 80021e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80021ec:	4a42      	ldr	r2, [pc, #264]	; (80022f8 <UART_SetConfig+0x318>)
 80021ee:	fba2 2303 	umull	r2, r3, r2, r3
 80021f2:	095b      	lsrs	r3, r3, #5
 80021f4:	2264      	movs	r2, #100	; 0x64
 80021f6:	fb02 f303 	mul.w	r3, r2, r3
 80021fa:	1af3      	subs	r3, r6, r3
 80021fc:	00db      	lsls	r3, r3, #3
 80021fe:	3332      	adds	r3, #50	; 0x32
 8002200:	4a3d      	ldr	r2, [pc, #244]	; (80022f8 <UART_SetConfig+0x318>)
 8002202:	fba2 2303 	umull	r2, r3, r2, r3
 8002206:	095b      	lsrs	r3, r3, #5
 8002208:	f003 0307 	and.w	r3, r3, #7
 800220c:	442b      	add	r3, r5
 800220e:	60a3      	str	r3, [r4, #8]
}
 8002210:	e0df      	b.n	80023d2 <UART_SetConfig+0x3f2>
    if((huart->Instance == USART1))
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	4a37      	ldr	r2, [pc, #220]	; (80022f4 <UART_SetConfig+0x314>)
 8002218:	4293      	cmp	r3, r2
 800221a:	d16f      	bne.n	80022fc <UART_SetConfig+0x31c>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681c      	ldr	r4, [r3, #0]
 8002220:	f7ff fcd0 	bl	8001bc4 <HAL_RCC_GetPCLK2Freq>
 8002224:	4602      	mov	r2, r0
 8002226:	4613      	mov	r3, r2
 8002228:	009b      	lsls	r3, r3, #2
 800222a:	4413      	add	r3, r2
 800222c:	009a      	lsls	r2, r3, #2
 800222e:	441a      	add	r2, r3
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	685b      	ldr	r3, [r3, #4]
 8002234:	009b      	lsls	r3, r3, #2
 8002236:	fbb2 f3f3 	udiv	r3, r2, r3
 800223a:	4a2f      	ldr	r2, [pc, #188]	; (80022f8 <UART_SetConfig+0x318>)
 800223c:	fba2 2303 	umull	r2, r3, r2, r3
 8002240:	095b      	lsrs	r3, r3, #5
 8002242:	011d      	lsls	r5, r3, #4
 8002244:	f7ff fcbe 	bl	8001bc4 <HAL_RCC_GetPCLK2Freq>
 8002248:	4602      	mov	r2, r0
 800224a:	4613      	mov	r3, r2
 800224c:	009b      	lsls	r3, r3, #2
 800224e:	4413      	add	r3, r2
 8002250:	009a      	lsls	r2, r3, #2
 8002252:	441a      	add	r2, r3
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	685b      	ldr	r3, [r3, #4]
 8002258:	009b      	lsls	r3, r3, #2
 800225a:	fbb2 f6f3 	udiv	r6, r2, r3
 800225e:	f7ff fcb1 	bl	8001bc4 <HAL_RCC_GetPCLK2Freq>
 8002262:	4602      	mov	r2, r0
 8002264:	4613      	mov	r3, r2
 8002266:	009b      	lsls	r3, r3, #2
 8002268:	4413      	add	r3, r2
 800226a:	009a      	lsls	r2, r3, #2
 800226c:	441a      	add	r2, r3
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	685b      	ldr	r3, [r3, #4]
 8002272:	009b      	lsls	r3, r3, #2
 8002274:	fbb2 f3f3 	udiv	r3, r2, r3
 8002278:	4a1f      	ldr	r2, [pc, #124]	; (80022f8 <UART_SetConfig+0x318>)
 800227a:	fba2 2303 	umull	r2, r3, r2, r3
 800227e:	095b      	lsrs	r3, r3, #5
 8002280:	2264      	movs	r2, #100	; 0x64
 8002282:	fb02 f303 	mul.w	r3, r2, r3
 8002286:	1af3      	subs	r3, r6, r3
 8002288:	011b      	lsls	r3, r3, #4
 800228a:	3332      	adds	r3, #50	; 0x32
 800228c:	4a1a      	ldr	r2, [pc, #104]	; (80022f8 <UART_SetConfig+0x318>)
 800228e:	fba2 2303 	umull	r2, r3, r2, r3
 8002292:	095b      	lsrs	r3, r3, #5
 8002294:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002298:	441d      	add	r5, r3
 800229a:	f7ff fc93 	bl	8001bc4 <HAL_RCC_GetPCLK2Freq>
 800229e:	4602      	mov	r2, r0
 80022a0:	4613      	mov	r3, r2
 80022a2:	009b      	lsls	r3, r3, #2
 80022a4:	4413      	add	r3, r2
 80022a6:	009a      	lsls	r2, r3, #2
 80022a8:	441a      	add	r2, r3
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	685b      	ldr	r3, [r3, #4]
 80022ae:	009b      	lsls	r3, r3, #2
 80022b0:	fbb2 f6f3 	udiv	r6, r2, r3
 80022b4:	f7ff fc86 	bl	8001bc4 <HAL_RCC_GetPCLK2Freq>
 80022b8:	4602      	mov	r2, r0
 80022ba:	4613      	mov	r3, r2
 80022bc:	009b      	lsls	r3, r3, #2
 80022be:	4413      	add	r3, r2
 80022c0:	009a      	lsls	r2, r3, #2
 80022c2:	441a      	add	r2, r3
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	685b      	ldr	r3, [r3, #4]
 80022c8:	009b      	lsls	r3, r3, #2
 80022ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80022ce:	4a0a      	ldr	r2, [pc, #40]	; (80022f8 <UART_SetConfig+0x318>)
 80022d0:	fba2 2303 	umull	r2, r3, r2, r3
 80022d4:	095b      	lsrs	r3, r3, #5
 80022d6:	2264      	movs	r2, #100	; 0x64
 80022d8:	fb02 f303 	mul.w	r3, r2, r3
 80022dc:	1af3      	subs	r3, r6, r3
 80022de:	011b      	lsls	r3, r3, #4
 80022e0:	3332      	adds	r3, #50	; 0x32
 80022e2:	4a05      	ldr	r2, [pc, #20]	; (80022f8 <UART_SetConfig+0x318>)
 80022e4:	fba2 2303 	umull	r2, r3, r2, r3
 80022e8:	095b      	lsrs	r3, r3, #5
 80022ea:	f003 030f 	and.w	r3, r3, #15
 80022ee:	442b      	add	r3, r5
 80022f0:	60a3      	str	r3, [r4, #8]
}
 80022f2:	e06e      	b.n	80023d2 <UART_SetConfig+0x3f2>
 80022f4:	40013800 	.word	0x40013800
 80022f8:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681c      	ldr	r4, [r3, #0]
 8002300:	f7ff fc3e 	bl	8001b80 <HAL_RCC_GetPCLK1Freq>
 8002304:	4602      	mov	r2, r0
 8002306:	4613      	mov	r3, r2
 8002308:	009b      	lsls	r3, r3, #2
 800230a:	4413      	add	r3, r2
 800230c:	009a      	lsls	r2, r3, #2
 800230e:	441a      	add	r2, r3
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	685b      	ldr	r3, [r3, #4]
 8002314:	009b      	lsls	r3, r3, #2
 8002316:	fbb2 f3f3 	udiv	r3, r2, r3
 800231a:	4a30      	ldr	r2, [pc, #192]	; (80023dc <UART_SetConfig+0x3fc>)
 800231c:	fba2 2303 	umull	r2, r3, r2, r3
 8002320:	095b      	lsrs	r3, r3, #5
 8002322:	011d      	lsls	r5, r3, #4
 8002324:	f7ff fc2c 	bl	8001b80 <HAL_RCC_GetPCLK1Freq>
 8002328:	4602      	mov	r2, r0
 800232a:	4613      	mov	r3, r2
 800232c:	009b      	lsls	r3, r3, #2
 800232e:	4413      	add	r3, r2
 8002330:	009a      	lsls	r2, r3, #2
 8002332:	441a      	add	r2, r3
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	685b      	ldr	r3, [r3, #4]
 8002338:	009b      	lsls	r3, r3, #2
 800233a:	fbb2 f6f3 	udiv	r6, r2, r3
 800233e:	f7ff fc1f 	bl	8001b80 <HAL_RCC_GetPCLK1Freq>
 8002342:	4602      	mov	r2, r0
 8002344:	4613      	mov	r3, r2
 8002346:	009b      	lsls	r3, r3, #2
 8002348:	4413      	add	r3, r2
 800234a:	009a      	lsls	r2, r3, #2
 800234c:	441a      	add	r2, r3
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	685b      	ldr	r3, [r3, #4]
 8002352:	009b      	lsls	r3, r3, #2
 8002354:	fbb2 f3f3 	udiv	r3, r2, r3
 8002358:	4a20      	ldr	r2, [pc, #128]	; (80023dc <UART_SetConfig+0x3fc>)
 800235a:	fba2 2303 	umull	r2, r3, r2, r3
 800235e:	095b      	lsrs	r3, r3, #5
 8002360:	2264      	movs	r2, #100	; 0x64
 8002362:	fb02 f303 	mul.w	r3, r2, r3
 8002366:	1af3      	subs	r3, r6, r3
 8002368:	011b      	lsls	r3, r3, #4
 800236a:	3332      	adds	r3, #50	; 0x32
 800236c:	4a1b      	ldr	r2, [pc, #108]	; (80023dc <UART_SetConfig+0x3fc>)
 800236e:	fba2 2303 	umull	r2, r3, r2, r3
 8002372:	095b      	lsrs	r3, r3, #5
 8002374:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002378:	441d      	add	r5, r3
 800237a:	f7ff fc01 	bl	8001b80 <HAL_RCC_GetPCLK1Freq>
 800237e:	4602      	mov	r2, r0
 8002380:	4613      	mov	r3, r2
 8002382:	009b      	lsls	r3, r3, #2
 8002384:	4413      	add	r3, r2
 8002386:	009a      	lsls	r2, r3, #2
 8002388:	441a      	add	r2, r3
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	685b      	ldr	r3, [r3, #4]
 800238e:	009b      	lsls	r3, r3, #2
 8002390:	fbb2 f6f3 	udiv	r6, r2, r3
 8002394:	f7ff fbf4 	bl	8001b80 <HAL_RCC_GetPCLK1Freq>
 8002398:	4602      	mov	r2, r0
 800239a:	4613      	mov	r3, r2
 800239c:	009b      	lsls	r3, r3, #2
 800239e:	4413      	add	r3, r2
 80023a0:	009a      	lsls	r2, r3, #2
 80023a2:	441a      	add	r2, r3
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	685b      	ldr	r3, [r3, #4]
 80023a8:	009b      	lsls	r3, r3, #2
 80023aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80023ae:	4a0b      	ldr	r2, [pc, #44]	; (80023dc <UART_SetConfig+0x3fc>)
 80023b0:	fba2 2303 	umull	r2, r3, r2, r3
 80023b4:	095b      	lsrs	r3, r3, #5
 80023b6:	2264      	movs	r2, #100	; 0x64
 80023b8:	fb02 f303 	mul.w	r3, r2, r3
 80023bc:	1af3      	subs	r3, r6, r3
 80023be:	011b      	lsls	r3, r3, #4
 80023c0:	3332      	adds	r3, #50	; 0x32
 80023c2:	4a06      	ldr	r2, [pc, #24]	; (80023dc <UART_SetConfig+0x3fc>)
 80023c4:	fba2 2303 	umull	r2, r3, r2, r3
 80023c8:	095b      	lsrs	r3, r3, #5
 80023ca:	f003 030f 	and.w	r3, r3, #15
 80023ce:	442b      	add	r3, r5
 80023d0:	60a3      	str	r3, [r4, #8]
}
 80023d2:	bf00      	nop
 80023d4:	3714      	adds	r7, #20
 80023d6:	46bd      	mov	sp, r7
 80023d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80023da:	bf00      	nop
 80023dc:	51eb851f 	.word	0x51eb851f

080023e0 <DWT_Delay_Init>:
 * @brief  Initializes DWT_Clock_Cycle_Count for DWT_Delay_us function
 * @return Error DWT counter
 *         1: clock cycle counter not started
 *         0: clock cycle counter works
 */
uint32_t DWT_Delay_Init(void) {
 80023e0:	b480      	push	{r7}
 80023e2:	af00      	add	r7, sp, #0
  /* Disable TRC */
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 80023e4:	4a14      	ldr	r2, [pc, #80]	; (8002438 <DWT_Delay_Init+0x58>)
 80023e6:	4b14      	ldr	r3, [pc, #80]	; (8002438 <DWT_Delay_Init+0x58>)
 80023e8:	68db      	ldr	r3, [r3, #12]
 80023ea:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80023ee:	60d3      	str	r3, [r2, #12]
  /* Enable TRC */
  CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 80023f0:	4a11      	ldr	r2, [pc, #68]	; (8002438 <DWT_Delay_Init+0x58>)
 80023f2:	4b11      	ldr	r3, [pc, #68]	; (8002438 <DWT_Delay_Init+0x58>)
 80023f4:	68db      	ldr	r3, [r3, #12]
 80023f6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80023fa:	60d3      	str	r3, [r2, #12]

  /* Disable clock cycle counter */
  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 80023fc:	4a0f      	ldr	r2, [pc, #60]	; (800243c <DWT_Delay_Init+0x5c>)
 80023fe:	4b0f      	ldr	r3, [pc, #60]	; (800243c <DWT_Delay_Init+0x5c>)
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f023 0301 	bic.w	r3, r3, #1
 8002406:	6013      	str	r3, [r2, #0]
  /* Enable  clock cycle counter */
  DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8002408:	4a0c      	ldr	r2, [pc, #48]	; (800243c <DWT_Delay_Init+0x5c>)
 800240a:	4b0c      	ldr	r3, [pc, #48]	; (800243c <DWT_Delay_Init+0x5c>)
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f043 0301 	orr.w	r3, r3, #1
 8002412:	6013      	str	r3, [r2, #0]

  /* Reset the clock cycle counter value */
  DWT->CYCCNT = 0;
 8002414:	4b09      	ldr	r3, [pc, #36]	; (800243c <DWT_Delay_Init+0x5c>)
 8002416:	2200      	movs	r2, #0
 8002418:	605a      	str	r2, [r3, #4]

     /* 3 NO OPERATION instructions */
     __ASM volatile ("NOP");
 800241a:	bf00      	nop
     __ASM volatile ("NOP");
 800241c:	bf00      	nop
  __ASM volatile ("NOP");
 800241e:	bf00      	nop

  /* Check if clock cycle counter has started */
     if(DWT->CYCCNT)
 8002420:	4b06      	ldr	r3, [pc, #24]	; (800243c <DWT_Delay_Init+0x5c>)
 8002422:	685b      	ldr	r3, [r3, #4]
 8002424:	2b00      	cmp	r3, #0
 8002426:	d001      	beq.n	800242c <DWT_Delay_Init+0x4c>
     {
       return 0; /*clock cycle counter started*/
 8002428:	2300      	movs	r3, #0
 800242a:	e000      	b.n	800242e <DWT_Delay_Init+0x4e>
     }
     else
  {
    return 1; /*clock cycle counter not started*/
 800242c:	2301      	movs	r3, #1
  }
}
 800242e:	4618      	mov	r0, r3
 8002430:	46bd      	mov	sp, r7
 8002432:	bc80      	pop	{r7}
 8002434:	4770      	bx	lr
 8002436:	bf00      	nop
 8002438:	e000edf0 	.word	0xe000edf0
 800243c:	e0001000 	.word	0xe0001000

08002440 <main>:
  * @brief  The application entry point.
  *
  * @retval None
  */
int main(void)
{
 8002440:	b590      	push	{r4, r7, lr}
 8002442:	b087      	sub	sp, #28
 8002444:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration----------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002446:	f7fd fe99 	bl	800017c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800244a:	f000 f849 	bl	80024e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800244e:	f000 f8cf 	bl	80025f0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8002452:	f000 f89f 	bl	8002594 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  DWT_Delay_Init();
 8002456:	f7ff ffc3 	bl	80023e0 <DWT_Delay_Init>

  uint8_t data[] = "Hello world!";
 800245a:	4b1d      	ldr	r3, [pc, #116]	; (80024d0 <main+0x90>)
 800245c:	463c      	mov	r4, r7
 800245e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002460:	c407      	stmia	r4!, {r0, r1, r2}
 8002462:	7023      	strb	r3, [r4, #0]
  const uint32_t timeout = 100;
 8002464:	2364      	movs	r3, #100	; 0x64
 8002466:	613b      	str	r3, [r7, #16]
  GPIO_PinState state;
  uint8_t send = 0;
 8002468:	2300      	movs	r3, #0
 800246a:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN WHILE */
  while (1)
  {

  /* USER CODE END WHILE */
	state = HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin);
 800246c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002470:	4818      	ldr	r0, [pc, #96]	; (80024d4 <main+0x94>)
 8002472:	f7fe f973 	bl	800075c <HAL_GPIO_ReadPin>
 8002476:	4603      	mov	r3, r0
 8002478:	73fb      	strb	r3, [r7, #15]
	if (state == GPIO_PIN_RESET){
 800247a:	7bfb      	ldrb	r3, [r7, #15]
 800247c:	2b00      	cmp	r3, #0
 800247e:	d10f      	bne.n	80024a0 <main+0x60>
	  send = send ? 0 : 1;
 8002480:	7dfb      	ldrb	r3, [r7, #23]
 8002482:	2b00      	cmp	r3, #0
 8002484:	bf0c      	ite	eq
 8002486:	2301      	moveq	r3, #1
 8002488:	2300      	movne	r3, #0
 800248a:	b2db      	uxtb	r3, r3
 800248c:	75fb      	strb	r3, [r7, #23]
	  while (HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin) == GPIO_PIN_RESET);
 800248e:	bf00      	nop
 8002490:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002494:	480f      	ldr	r0, [pc, #60]	; (80024d4 <main+0x94>)
 8002496:	f7fe f961 	bl	800075c <HAL_GPIO_ReadPin>
 800249a:	4603      	mov	r3, r0
 800249c:	2b00      	cmp	r3, #0
 800249e:	d0f7      	beq.n	8002490 <main+0x50>
	}
	if (send){
 80024a0:	7dfb      	ldrb	r3, [r7, #23]
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d00f      	beq.n	80024c6 <main+0x86>
	  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 80024a6:	2201      	movs	r2, #1
 80024a8:	2120      	movs	r1, #32
 80024aa:	480b      	ldr	r0, [pc, #44]	; (80024d8 <main+0x98>)
 80024ac:	f7fe f96d 	bl	800078a <HAL_GPIO_WritePin>
	  HAL_UART_Transmit(&huart2, data, (uint16_t) sizeof(data), timeout);
 80024b0:	4639      	mov	r1, r7
 80024b2:	693b      	ldr	r3, [r7, #16]
 80024b4:	220d      	movs	r2, #13
 80024b6:	4809      	ldr	r0, [pc, #36]	; (80024dc <main+0x9c>)
 80024b8:	f7ff fc51 	bl	8001d5e <HAL_UART_Transmit>
	  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80024bc:	2200      	movs	r2, #0
 80024be:	2120      	movs	r1, #32
 80024c0:	4805      	ldr	r0, [pc, #20]	; (80024d8 <main+0x98>)
 80024c2:	f7fe f962 	bl	800078a <HAL_GPIO_WritePin>
	}
	HAL_Delay(timeout);
 80024c6:	6938      	ldr	r0, [r7, #16]
 80024c8:	f7fd fe9a 	bl	8000200 <HAL_Delay>
	state = HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin);
 80024cc:	e7ce      	b.n	800246c <main+0x2c>
 80024ce:	bf00      	nop
 80024d0:	08002914 	.word	0x08002914
 80024d4:	40020800 	.word	0x40020800
 80024d8:	40020000 	.word	0x40020000
 80024dc:	20000024 	.word	0x20000024

080024e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b092      	sub	sp, #72	; 0x48
 80024e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;

    /**Configure the main internal regulator output voltage 
    */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80024e6:	4a28      	ldr	r2, [pc, #160]	; (8002588 <SystemClock_Config+0xa8>)
 80024e8:	4b27      	ldr	r3, [pc, #156]	; (8002588 <SystemClock_Config+0xa8>)
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 80024f0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80024f4:	6013      	str	r3, [r2, #0]

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80024f6:	2302      	movs	r3, #2
 80024f8:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80024fa:	2301      	movs	r3, #1
 80024fc:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = 16;
 80024fe:	2310      	movs	r3, #16
 8002500:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002502:	2302      	movs	r3, #2
 8002504:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002506:	2300      	movs	r3, #0
 8002508:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 800250a:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800250e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV3;
 8002510:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8002514:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002516:	f107 0314 	add.w	r3, r7, #20
 800251a:	4618      	mov	r0, r3
 800251c:	f7fe f94e 	bl	80007bc <HAL_RCC_OscConfig>
 8002520:	4603      	mov	r3, r0
 8002522:	2b00      	cmp	r3, #0
 8002524:	d003      	beq.n	800252e <SystemClock_Config+0x4e>
  {
    _Error_Handler(__FILE__, __LINE__);
 8002526:	219f      	movs	r1, #159	; 0x9f
 8002528:	4818      	ldr	r0, [pc, #96]	; (800258c <SystemClock_Config+0xac>)
 800252a:	f000 f8d1 	bl	80026d0 <_Error_Handler>
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800252e:	230f      	movs	r3, #15
 8002530:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002532:	2303      	movs	r3, #3
 8002534:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002536:	2300      	movs	r3, #0
 8002538:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800253a:	2300      	movs	r3, #0
 800253c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800253e:	2300      	movs	r3, #0
 8002540:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8002542:	463b      	mov	r3, r7
 8002544:	2101      	movs	r1, #1
 8002546:	4618      	mov	r0, r3
 8002548:	f7ff f8b2 	bl	80016b0 <HAL_RCC_ClockConfig>
 800254c:	4603      	mov	r3, r0
 800254e:	2b00      	cmp	r3, #0
 8002550:	d003      	beq.n	800255a <SystemClock_Config+0x7a>
  {
    _Error_Handler(__FILE__, __LINE__);
 8002552:	21ad      	movs	r1, #173	; 0xad
 8002554:	480d      	ldr	r0, [pc, #52]	; (800258c <SystemClock_Config+0xac>)
 8002556:	f000 f8bb 	bl	80026d0 <_Error_Handler>
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 800255a:	f7ff fb07 	bl	8001b6c <HAL_RCC_GetHCLKFreq>
 800255e:	4602      	mov	r2, r0
 8002560:	4b0b      	ldr	r3, [pc, #44]	; (8002590 <SystemClock_Config+0xb0>)
 8002562:	fba3 2302 	umull	r2, r3, r3, r2
 8002566:	099b      	lsrs	r3, r3, #6
 8002568:	4618      	mov	r0, r3
 800256a:	f7fd ff34 	bl	80003d6 <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 800256e:	2004      	movs	r0, #4
 8002570:	f7fd ff3e 	bl	80003f0 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8002574:	2200      	movs	r2, #0
 8002576:	2100      	movs	r1, #0
 8002578:	f04f 30ff 	mov.w	r0, #4294967295
 800257c:	f7fd ff0f 	bl	800039e <HAL_NVIC_SetPriority>
}
 8002580:	bf00      	nop
 8002582:	3748      	adds	r7, #72	; 0x48
 8002584:	46bd      	mov	sp, r7
 8002586:	bd80      	pop	{r7, pc}
 8002588:	40007000 	.word	0x40007000
 800258c:	08002924 	.word	0x08002924
 8002590:	10624dd3 	.word	0x10624dd3

08002594 <MX_USART2_UART_Init>:

/* USART2 init function */
static void MX_USART2_UART_Init(void)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8002598:	4b12      	ldr	r3, [pc, #72]	; (80025e4 <MX_USART2_UART_Init+0x50>)
 800259a:	4a13      	ldr	r2, [pc, #76]	; (80025e8 <MX_USART2_UART_Init+0x54>)
 800259c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800259e:	4b11      	ldr	r3, [pc, #68]	; (80025e4 <MX_USART2_UART_Init+0x50>)
 80025a0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80025a4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80025a6:	4b0f      	ldr	r3, [pc, #60]	; (80025e4 <MX_USART2_UART_Init+0x50>)
 80025a8:	2200      	movs	r2, #0
 80025aa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80025ac:	4b0d      	ldr	r3, [pc, #52]	; (80025e4 <MX_USART2_UART_Init+0x50>)
 80025ae:	2200      	movs	r2, #0
 80025b0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80025b2:	4b0c      	ldr	r3, [pc, #48]	; (80025e4 <MX_USART2_UART_Init+0x50>)
 80025b4:	2200      	movs	r2, #0
 80025b6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80025b8:	4b0a      	ldr	r3, [pc, #40]	; (80025e4 <MX_USART2_UART_Init+0x50>)
 80025ba:	220c      	movs	r2, #12
 80025bc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80025be:	4b09      	ldr	r3, [pc, #36]	; (80025e4 <MX_USART2_UART_Init+0x50>)
 80025c0:	2200      	movs	r2, #0
 80025c2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80025c4:	4b07      	ldr	r3, [pc, #28]	; (80025e4 <MX_USART2_UART_Init+0x50>)
 80025c6:	2200      	movs	r2, #0
 80025c8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80025ca:	4806      	ldr	r0, [pc, #24]	; (80025e4 <MX_USART2_UART_Init+0x50>)
 80025cc:	f7ff fb7e 	bl	8001ccc <HAL_UART_Init>
 80025d0:	4603      	mov	r3, r0
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d003      	beq.n	80025de <MX_USART2_UART_Init+0x4a>
  {
    _Error_Handler(__FILE__, __LINE__);
 80025d6:	21ca      	movs	r1, #202	; 0xca
 80025d8:	4804      	ldr	r0, [pc, #16]	; (80025ec <MX_USART2_UART_Init+0x58>)
 80025da:	f000 f879 	bl	80026d0 <_Error_Handler>
  }

}
 80025de:	bf00      	nop
 80025e0:	bd80      	pop	{r7, pc}
 80025e2:	bf00      	nop
 80025e4:	20000024 	.word	0x20000024
 80025e8:	40004400 	.word	0x40004400
 80025ec:	08002924 	.word	0x08002924

080025f0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
static void MX_GPIO_Init(void)
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	b08a      	sub	sp, #40	; 0x28
 80025f4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80025f6:	4a33      	ldr	r2, [pc, #204]	; (80026c4 <MX_GPIO_Init+0xd4>)
 80025f8:	4b32      	ldr	r3, [pc, #200]	; (80026c4 <MX_GPIO_Init+0xd4>)
 80025fa:	69db      	ldr	r3, [r3, #28]
 80025fc:	f043 0304 	orr.w	r3, r3, #4
 8002600:	61d3      	str	r3, [r2, #28]
 8002602:	4b30      	ldr	r3, [pc, #192]	; (80026c4 <MX_GPIO_Init+0xd4>)
 8002604:	69db      	ldr	r3, [r3, #28]
 8002606:	f003 0304 	and.w	r3, r3, #4
 800260a:	613b      	str	r3, [r7, #16]
 800260c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800260e:	4a2d      	ldr	r2, [pc, #180]	; (80026c4 <MX_GPIO_Init+0xd4>)
 8002610:	4b2c      	ldr	r3, [pc, #176]	; (80026c4 <MX_GPIO_Init+0xd4>)
 8002612:	69db      	ldr	r3, [r3, #28]
 8002614:	f043 0320 	orr.w	r3, r3, #32
 8002618:	61d3      	str	r3, [r2, #28]
 800261a:	4b2a      	ldr	r3, [pc, #168]	; (80026c4 <MX_GPIO_Init+0xd4>)
 800261c:	69db      	ldr	r3, [r3, #28]
 800261e:	f003 0320 	and.w	r3, r3, #32
 8002622:	60fb      	str	r3, [r7, #12]
 8002624:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002626:	4a27      	ldr	r2, [pc, #156]	; (80026c4 <MX_GPIO_Init+0xd4>)
 8002628:	4b26      	ldr	r3, [pc, #152]	; (80026c4 <MX_GPIO_Init+0xd4>)
 800262a:	69db      	ldr	r3, [r3, #28]
 800262c:	f043 0301 	orr.w	r3, r3, #1
 8002630:	61d3      	str	r3, [r2, #28]
 8002632:	4b24      	ldr	r3, [pc, #144]	; (80026c4 <MX_GPIO_Init+0xd4>)
 8002634:	69db      	ldr	r3, [r3, #28]
 8002636:	f003 0301 	and.w	r3, r3, #1
 800263a:	60bb      	str	r3, [r7, #8]
 800263c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800263e:	4a21      	ldr	r2, [pc, #132]	; (80026c4 <MX_GPIO_Init+0xd4>)
 8002640:	4b20      	ldr	r3, [pc, #128]	; (80026c4 <MX_GPIO_Init+0xd4>)
 8002642:	69db      	ldr	r3, [r3, #28]
 8002644:	f043 0302 	orr.w	r3, r3, #2
 8002648:	61d3      	str	r3, [r2, #28]
 800264a:	4b1e      	ldr	r3, [pc, #120]	; (80026c4 <MX_GPIO_Init+0xd4>)
 800264c:	69db      	ldr	r3, [r3, #28]
 800264e:	f003 0302 	and.w	r3, r3, #2
 8002652:	607b      	str	r3, [r7, #4]
 8002654:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8002656:	2200      	movs	r2, #0
 8002658:	2120      	movs	r1, #32
 800265a:	481b      	ldr	r0, [pc, #108]	; (80026c8 <MX_GPIO_Init+0xd8>)
 800265c:	f7fe f895 	bl	800078a <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(D12_GPIO_Port, D12_Pin, GPIO_PIN_RESET);
 8002660:	2200      	movs	r2, #0
 8002662:	2140      	movs	r1, #64	; 0x40
 8002664:	4818      	ldr	r0, [pc, #96]	; (80026c8 <MX_GPIO_Init+0xd8>)
 8002666:	f7fe f890 	bl	800078a <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800266a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800266e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002670:	2300      	movs	r3, #0
 8002672:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002674:	2300      	movs	r3, #0
 8002676:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002678:	f107 0314 	add.w	r3, r7, #20
 800267c:	4619      	mov	r1, r3
 800267e:	4813      	ldr	r0, [pc, #76]	; (80026cc <MX_GPIO_Init+0xdc>)
 8002680:	f7fd fede 	bl	8000440 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8002684:	2320      	movs	r3, #32
 8002686:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002688:	2301      	movs	r3, #1
 800268a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800268c:	2300      	movs	r3, #0
 800268e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002690:	2300      	movs	r3, #0
 8002692:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8002694:	f107 0314 	add.w	r3, r7, #20
 8002698:	4619      	mov	r1, r3
 800269a:	480b      	ldr	r0, [pc, #44]	; (80026c8 <MX_GPIO_Init+0xd8>)
 800269c:	f7fd fed0 	bl	8000440 <HAL_GPIO_Init>

  /*Configure GPIO pin : D12_Pin */
  GPIO_InitStruct.Pin = D12_Pin;
 80026a0:	2340      	movs	r3, #64	; 0x40
 80026a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80026a4:	2301      	movs	r3, #1
 80026a6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026a8:	2300      	movs	r3, #0
 80026aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026ac:	2300      	movs	r3, #0
 80026ae:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(D12_GPIO_Port, &GPIO_InitStruct);
 80026b0:	f107 0314 	add.w	r3, r7, #20
 80026b4:	4619      	mov	r1, r3
 80026b6:	4804      	ldr	r0, [pc, #16]	; (80026c8 <MX_GPIO_Init+0xd8>)
 80026b8:	f7fd fec2 	bl	8000440 <HAL_GPIO_Init>
}
 80026bc:	bf00      	nop
 80026be:	3728      	adds	r7, #40	; 0x28
 80026c0:	46bd      	mov	sp, r7
 80026c2:	bd80      	pop	{r7, pc}
 80026c4:	40023800 	.word	0x40023800
 80026c8:	40020000 	.word	0x40020000
 80026cc:	40020800 	.word	0x40020800

080026d0 <_Error_Handler>:
  * @param  file: The file name as string.
  * @param  line: The line in file as a number.
  * @retval None
  */
void _Error_Handler(char *file, int line)
{
 80026d0:	b480      	push	{r7}
 80026d2:	b083      	sub	sp, #12
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
 80026d8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  while(1)
 80026da:	e7fe      	b.n	80026da <_Error_Handler+0xa>

080026dc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	b084      	sub	sp, #16
 80026e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 80026e2:	4a2a      	ldr	r2, [pc, #168]	; (800278c <HAL_MspInit+0xb0>)
 80026e4:	4b29      	ldr	r3, [pc, #164]	; (800278c <HAL_MspInit+0xb0>)
 80026e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026e8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80026ec:	6253      	str	r3, [r2, #36]	; 0x24
 80026ee:	4b27      	ldr	r3, [pc, #156]	; (800278c <HAL_MspInit+0xb0>)
 80026f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026f2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80026f6:	60fb      	str	r3, [r7, #12]
 80026f8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026fa:	4a24      	ldr	r2, [pc, #144]	; (800278c <HAL_MspInit+0xb0>)
 80026fc:	4b23      	ldr	r3, [pc, #140]	; (800278c <HAL_MspInit+0xb0>)
 80026fe:	6a1b      	ldr	r3, [r3, #32]
 8002700:	f043 0301 	orr.w	r3, r3, #1
 8002704:	6213      	str	r3, [r2, #32]
 8002706:	4b21      	ldr	r3, [pc, #132]	; (800278c <HAL_MspInit+0xb0>)
 8002708:	6a1b      	ldr	r3, [r3, #32]
 800270a:	f003 0301 	and.w	r3, r3, #1
 800270e:	60bb      	str	r3, [r7, #8]
 8002710:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002712:	4a1e      	ldr	r2, [pc, #120]	; (800278c <HAL_MspInit+0xb0>)
 8002714:	4b1d      	ldr	r3, [pc, #116]	; (800278c <HAL_MspInit+0xb0>)
 8002716:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002718:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800271c:	6253      	str	r3, [r2, #36]	; 0x24
 800271e:	4b1b      	ldr	r3, [pc, #108]	; (800278c <HAL_MspInit+0xb0>)
 8002720:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002722:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002726:	607b      	str	r3, [r7, #4]
 8002728:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800272a:	2007      	movs	r0, #7
 800272c:	f7fd fe2c 	bl	8000388 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8002730:	2200      	movs	r2, #0
 8002732:	2100      	movs	r1, #0
 8002734:	f06f 000b 	mvn.w	r0, #11
 8002738:	f7fd fe31 	bl	800039e <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 800273c:	2200      	movs	r2, #0
 800273e:	2100      	movs	r1, #0
 8002740:	f06f 000a 	mvn.w	r0, #10
 8002744:	f7fd fe2b 	bl	800039e <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8002748:	2200      	movs	r2, #0
 800274a:	2100      	movs	r1, #0
 800274c:	f06f 0009 	mvn.w	r0, #9
 8002750:	f7fd fe25 	bl	800039e <HAL_NVIC_SetPriority>
  /* SVC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVC_IRQn, 0, 0);
 8002754:	2200      	movs	r2, #0
 8002756:	2100      	movs	r1, #0
 8002758:	f06f 0004 	mvn.w	r0, #4
 800275c:	f7fd fe1f 	bl	800039e <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8002760:	2200      	movs	r2, #0
 8002762:	2100      	movs	r1, #0
 8002764:	f06f 0003 	mvn.w	r0, #3
 8002768:	f7fd fe19 	bl	800039e <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 800276c:	2200      	movs	r2, #0
 800276e:	2100      	movs	r1, #0
 8002770:	f06f 0001 	mvn.w	r0, #1
 8002774:	f7fd fe13 	bl	800039e <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8002778:	2200      	movs	r2, #0
 800277a:	2100      	movs	r1, #0
 800277c:	f04f 30ff 	mov.w	r0, #4294967295
 8002780:	f7fd fe0d 	bl	800039e <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002784:	bf00      	nop
 8002786:	3710      	adds	r7, #16
 8002788:	46bd      	mov	sp, r7
 800278a:	bd80      	pop	{r7, pc}
 800278c:	40023800 	.word	0x40023800

08002790 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002790:	b580      	push	{r7, lr}
 8002792:	b088      	sub	sp, #32
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==USART2)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	4a11      	ldr	r2, [pc, #68]	; (80027e4 <HAL_UART_MspInit+0x54>)
 800279e:	4293      	cmp	r3, r2
 80027a0:	d11b      	bne.n	80027da <HAL_UART_MspInit+0x4a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80027a2:	4a11      	ldr	r2, [pc, #68]	; (80027e8 <HAL_UART_MspInit+0x58>)
 80027a4:	4b10      	ldr	r3, [pc, #64]	; (80027e8 <HAL_UART_MspInit+0x58>)
 80027a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80027ac:	6253      	str	r3, [r2, #36]	; 0x24
 80027ae:	4b0e      	ldr	r3, [pc, #56]	; (80027e8 <HAL_UART_MspInit+0x58>)
 80027b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027b6:	60bb      	str	r3, [r7, #8]
 80027b8:	68bb      	ldr	r3, [r7, #8]
  
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80027ba:	230c      	movs	r3, #12
 80027bc:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027be:	2302      	movs	r3, #2
 80027c0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80027c2:	2301      	movs	r3, #1
 80027c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027c6:	2303      	movs	r3, #3
 80027c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80027ca:	2307      	movs	r3, #7
 80027cc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027ce:	f107 030c 	add.w	r3, r7, #12
 80027d2:	4619      	mov	r1, r3
 80027d4:	4805      	ldr	r0, [pc, #20]	; (80027ec <HAL_UART_MspInit+0x5c>)
 80027d6:	f7fd fe33 	bl	8000440 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80027da:	bf00      	nop
 80027dc:	3720      	adds	r7, #32
 80027de:	46bd      	mov	sp, r7
 80027e0:	bd80      	pop	{r7, pc}
 80027e2:	bf00      	nop
 80027e4:	40004400 	.word	0x40004400
 80027e8:	40023800 	.word	0x40023800
 80027ec:	40020000 	.word	0x40020000

080027f0 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80027f4:	f7fd fcec 	bl	80001d0 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
 80027f8:	f7fd fe16 	bl	8000428 <HAL_SYSTICK_IRQHandler>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80027fc:	bf00      	nop
 80027fe:	bd80      	pop	{r7, pc}

08002800 <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002800:	b480      	push	{r7}
 8002802:	af00      	add	r7, sp, #0
  /*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100;
 8002804:	4a15      	ldr	r2, [pc, #84]	; (800285c <SystemInit+0x5c>)
 8002806:	4b15      	ldr	r3, [pc, #84]	; (800285c <SystemInit+0x5c>)
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800280e:	6013      	str	r3, [r2, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t)0x88FFC00C;
 8002810:	4912      	ldr	r1, [pc, #72]	; (800285c <SystemInit+0x5c>)
 8002812:	4b12      	ldr	r3, [pc, #72]	; (800285c <SystemInit+0x5c>)
 8002814:	689a      	ldr	r2, [r3, #8]
 8002816:	4b12      	ldr	r3, [pc, #72]	; (8002860 <SystemInit+0x60>)
 8002818:	4013      	ands	r3, r2
 800281a:	608b      	str	r3, [r1, #8]
  
  /*!< Reset HSION, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xEEFEFFFE;
 800281c:	4a0f      	ldr	r2, [pc, #60]	; (800285c <SystemInit+0x5c>)
 800281e:	4b0f      	ldr	r3, [pc, #60]	; (800285c <SystemInit+0x5c>)
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 8002826:	f023 1301 	bic.w	r3, r3, #65537	; 0x10001
 800282a:	6013      	str	r3, [r2, #0]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800282c:	4a0b      	ldr	r2, [pc, #44]	; (800285c <SystemInit+0x5c>)
 800282e:	4b0b      	ldr	r3, [pc, #44]	; (800285c <SystemInit+0x5c>)
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002836:	6013      	str	r3, [r2, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFF;
 8002838:	4a08      	ldr	r2, [pc, #32]	; (800285c <SystemInit+0x5c>)
 800283a:	4b08      	ldr	r3, [pc, #32]	; (800285c <SystemInit+0x5c>)
 800283c:	689b      	ldr	r3, [r3, #8]
 800283e:	f423 037d 	bic.w	r3, r3, #16580608	; 0xfd0000
 8002842:	6093      	str	r3, [r2, #8]

  /*!< Disable all interrupts */
  RCC->CIR = 0x00000000;
 8002844:	4b05      	ldr	r3, [pc, #20]	; (800285c <SystemInit+0x5c>)
 8002846:	2200      	movs	r2, #0
 8002848:	60da      	str	r2, [r3, #12]
#endif /* DATA_IN_ExtSRAM */
    
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 800284a:	4b06      	ldr	r3, [pc, #24]	; (8002864 <SystemInit+0x64>)
 800284c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002850:	609a      	str	r2, [r3, #8]
#endif
}
 8002852:	bf00      	nop
 8002854:	46bd      	mov	sp, r7
 8002856:	bc80      	pop	{r7}
 8002858:	4770      	bx	lr
 800285a:	bf00      	nop
 800285c:	40023800 	.word	0x40023800
 8002860:	88ffc00c 	.word	0x88ffc00c
 8002864:	e000ed00 	.word	0xe000ed00

08002868 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8002868:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800286a:	e003      	b.n	8002874 <LoopCopyDataInit>

0800286c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 800286c:	4b0b      	ldr	r3, [pc, #44]	; (800289c <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800286e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8002870:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8002872:	3104      	adds	r1, #4

08002874 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8002874:	480a      	ldr	r0, [pc, #40]	; (80028a0 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8002876:	4b0b      	ldr	r3, [pc, #44]	; (80028a4 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8002878:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800287a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 800287c:	d3f6      	bcc.n	800286c <CopyDataInit>
  ldr r2, =_sbss
 800287e:	4a0a      	ldr	r2, [pc, #40]	; (80028a8 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8002880:	e002      	b.n	8002888 <LoopFillZerobss>

08002882 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8002882:	2300      	movs	r3, #0
  str r3, [r2], #4
 8002884:	f842 3b04 	str.w	r3, [r2], #4

08002888 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8002888:	4b08      	ldr	r3, [pc, #32]	; (80028ac <LoopFillZerobss+0x24>)
  cmp r2, r3
 800288a:	429a      	cmp	r2, r3
  bcc FillZerobss
 800288c:	d3f9      	bcc.n	8002882 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800288e:	f7ff ffb7 	bl	8002800 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002892:	f000 f80f 	bl	80028b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002896:	f7ff fdd3 	bl	8002440 <main>
  bx lr
 800289a:	4770      	bx	lr
  ldr r3, =_sidata
 800289c:	08002960 	.word	0x08002960
  ldr r0, =_sdata
 80028a0:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80028a4:	20000004 	.word	0x20000004
  ldr r2, =_sbss
 80028a8:	20000004 	.word	0x20000004
  ldr r3, = _ebss
 80028ac:	20000064 	.word	0x20000064

080028b0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80028b0:	e7fe      	b.n	80028b0 <ADC1_IRQHandler>
	...

080028b4 <__libc_init_array>:
 80028b4:	b570      	push	{r4, r5, r6, lr}
 80028b6:	2500      	movs	r5, #0
 80028b8:	4e0c      	ldr	r6, [pc, #48]	; (80028ec <__libc_init_array+0x38>)
 80028ba:	4c0d      	ldr	r4, [pc, #52]	; (80028f0 <__libc_init_array+0x3c>)
 80028bc:	1ba4      	subs	r4, r4, r6
 80028be:	10a4      	asrs	r4, r4, #2
 80028c0:	42a5      	cmp	r5, r4
 80028c2:	d109      	bne.n	80028d8 <__libc_init_array+0x24>
 80028c4:	f000 f81a 	bl	80028fc <_init>
 80028c8:	2500      	movs	r5, #0
 80028ca:	4e0a      	ldr	r6, [pc, #40]	; (80028f4 <__libc_init_array+0x40>)
 80028cc:	4c0a      	ldr	r4, [pc, #40]	; (80028f8 <__libc_init_array+0x44>)
 80028ce:	1ba4      	subs	r4, r4, r6
 80028d0:	10a4      	asrs	r4, r4, #2
 80028d2:	42a5      	cmp	r5, r4
 80028d4:	d105      	bne.n	80028e2 <__libc_init_array+0x2e>
 80028d6:	bd70      	pop	{r4, r5, r6, pc}
 80028d8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80028dc:	4798      	blx	r3
 80028de:	3501      	adds	r5, #1
 80028e0:	e7ee      	b.n	80028c0 <__libc_init_array+0xc>
 80028e2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80028e6:	4798      	blx	r3
 80028e8:	3501      	adds	r5, #1
 80028ea:	e7f2      	b.n	80028d2 <__libc_init_array+0x1e>
 80028ec:	08002958 	.word	0x08002958
 80028f0:	08002958 	.word	0x08002958
 80028f4:	08002958 	.word	0x08002958
 80028f8:	0800295c 	.word	0x0800295c

080028fc <_init>:
 80028fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80028fe:	bf00      	nop
 8002900:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002902:	bc08      	pop	{r3}
 8002904:	469e      	mov	lr, r3
 8002906:	4770      	bx	lr

08002908 <_fini>:
 8002908:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800290a:	bf00      	nop
 800290c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800290e:	bc08      	pop	{r3}
 8002910:	469e      	mov	lr, r3
 8002912:	4770      	bx	lr
