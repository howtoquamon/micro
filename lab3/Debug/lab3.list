
lab3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004370  08000140  08000140  00010140  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002a8  080044b0  080044b0  000144b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08004758  08004758  00014758  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0800475c  0800475c  0001475c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000001d4  20000000  08004760  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000000f8  200001d8  08004934  000201d8  2**3
                  ALLOC
  7 ._user_heap_stack 00000600  200002d0  08004934  000202d0  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  000201d4  2**0
                  CONTENTS, READONLY
  9 .debug_info   0001069f  00000000  00000000  000201fd  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00001ef5  00000000  00000000  0003089c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000052ed  00000000  00000000  00032791  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000688  00000000  00000000  00037a80  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000ad8  00000000  00000000  00038108  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00004438  00000000  00000000  00038be0  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00002d7c  00000000  00000000  0003d018  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  0003fd94  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00001c80  00000000  00000000  0003fe10  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	200001d8 	.word	0x200001d8
 800015c:	00000000 	.word	0x00000000
 8000160:	08004498 	.word	0x08004498

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	200001dc 	.word	0x200001dc
 800017c:	08004498 	.word	0x08004498

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <__aeabi_drsub>:
 8000190:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000194:	e002      	b.n	800019c <__adddf3>
 8000196:	bf00      	nop

08000198 <__aeabi_dsub>:
 8000198:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800019c <__adddf3>:
 800019c:	b530      	push	{r4, r5, lr}
 800019e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001a6:	ea94 0f05 	teq	r4, r5
 80001aa:	bf08      	it	eq
 80001ac:	ea90 0f02 	teqeq	r0, r2
 80001b0:	bf1f      	itttt	ne
 80001b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001c2:	f000 80e2 	beq.w	800038a <__adddf3+0x1ee>
 80001c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001ce:	bfb8      	it	lt
 80001d0:	426d      	neglt	r5, r5
 80001d2:	dd0c      	ble.n	80001ee <__adddf3+0x52>
 80001d4:	442c      	add	r4, r5
 80001d6:	ea80 0202 	eor.w	r2, r0, r2
 80001da:	ea81 0303 	eor.w	r3, r1, r3
 80001de:	ea82 0000 	eor.w	r0, r2, r0
 80001e2:	ea83 0101 	eor.w	r1, r3, r1
 80001e6:	ea80 0202 	eor.w	r2, r0, r2
 80001ea:	ea81 0303 	eor.w	r3, r1, r3
 80001ee:	2d36      	cmp	r5, #54	; 0x36
 80001f0:	bf88      	it	hi
 80001f2:	bd30      	pophi	{r4, r5, pc}
 80001f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000200:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000204:	d002      	beq.n	800020c <__adddf3+0x70>
 8000206:	4240      	negs	r0, r0
 8000208:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800020c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000210:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000214:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000218:	d002      	beq.n	8000220 <__adddf3+0x84>
 800021a:	4252      	negs	r2, r2
 800021c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000220:	ea94 0f05 	teq	r4, r5
 8000224:	f000 80a7 	beq.w	8000376 <__adddf3+0x1da>
 8000228:	f1a4 0401 	sub.w	r4, r4, #1
 800022c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000230:	db0d      	blt.n	800024e <__adddf3+0xb2>
 8000232:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000236:	fa22 f205 	lsr.w	r2, r2, r5
 800023a:	1880      	adds	r0, r0, r2
 800023c:	f141 0100 	adc.w	r1, r1, #0
 8000240:	fa03 f20e 	lsl.w	r2, r3, lr
 8000244:	1880      	adds	r0, r0, r2
 8000246:	fa43 f305 	asr.w	r3, r3, r5
 800024a:	4159      	adcs	r1, r3
 800024c:	e00e      	b.n	800026c <__adddf3+0xd0>
 800024e:	f1a5 0520 	sub.w	r5, r5, #32
 8000252:	f10e 0e20 	add.w	lr, lr, #32
 8000256:	2a01      	cmp	r2, #1
 8000258:	fa03 fc0e 	lsl.w	ip, r3, lr
 800025c:	bf28      	it	cs
 800025e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000262:	fa43 f305 	asr.w	r3, r3, r5
 8000266:	18c0      	adds	r0, r0, r3
 8000268:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800026c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000270:	d507      	bpl.n	8000282 <__adddf3+0xe6>
 8000272:	f04f 0e00 	mov.w	lr, #0
 8000276:	f1dc 0c00 	rsbs	ip, ip, #0
 800027a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800027e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000282:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000286:	d31b      	bcc.n	80002c0 <__adddf3+0x124>
 8000288:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800028c:	d30c      	bcc.n	80002a8 <__adddf3+0x10c>
 800028e:	0849      	lsrs	r1, r1, #1
 8000290:	ea5f 0030 	movs.w	r0, r0, rrx
 8000294:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000298:	f104 0401 	add.w	r4, r4, #1
 800029c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002a4:	f080 809a 	bcs.w	80003dc <__adddf3+0x240>
 80002a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002ac:	bf08      	it	eq
 80002ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002b2:	f150 0000 	adcs.w	r0, r0, #0
 80002b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002ba:	ea41 0105 	orr.w	r1, r1, r5
 80002be:	bd30      	pop	{r4, r5, pc}
 80002c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002c4:	4140      	adcs	r0, r0
 80002c6:	eb41 0101 	adc.w	r1, r1, r1
 80002ca:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80002ce:	f1a4 0401 	sub.w	r4, r4, #1
 80002d2:	d1e9      	bne.n	80002a8 <__adddf3+0x10c>
 80002d4:	f091 0f00 	teq	r1, #0
 80002d8:	bf04      	itt	eq
 80002da:	4601      	moveq	r1, r0
 80002dc:	2000      	moveq	r0, #0
 80002de:	fab1 f381 	clz	r3, r1
 80002e2:	bf08      	it	eq
 80002e4:	3320      	addeq	r3, #32
 80002e6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ea:	f1b3 0220 	subs.w	r2, r3, #32
 80002ee:	da0c      	bge.n	800030a <__adddf3+0x16e>
 80002f0:	320c      	adds	r2, #12
 80002f2:	dd08      	ble.n	8000306 <__adddf3+0x16a>
 80002f4:	f102 0c14 	add.w	ip, r2, #20
 80002f8:	f1c2 020c 	rsb	r2, r2, #12
 80002fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000300:	fa21 f102 	lsr.w	r1, r1, r2
 8000304:	e00c      	b.n	8000320 <__adddf3+0x184>
 8000306:	f102 0214 	add.w	r2, r2, #20
 800030a:	bfd8      	it	le
 800030c:	f1c2 0c20 	rsble	ip, r2, #32
 8000310:	fa01 f102 	lsl.w	r1, r1, r2
 8000314:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000318:	bfdc      	itt	le
 800031a:	ea41 010c 	orrle.w	r1, r1, ip
 800031e:	4090      	lslle	r0, r2
 8000320:	1ae4      	subs	r4, r4, r3
 8000322:	bfa2      	ittt	ge
 8000324:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000328:	4329      	orrge	r1, r5
 800032a:	bd30      	popge	{r4, r5, pc}
 800032c:	ea6f 0404 	mvn.w	r4, r4
 8000330:	3c1f      	subs	r4, #31
 8000332:	da1c      	bge.n	800036e <__adddf3+0x1d2>
 8000334:	340c      	adds	r4, #12
 8000336:	dc0e      	bgt.n	8000356 <__adddf3+0x1ba>
 8000338:	f104 0414 	add.w	r4, r4, #20
 800033c:	f1c4 0220 	rsb	r2, r4, #32
 8000340:	fa20 f004 	lsr.w	r0, r0, r4
 8000344:	fa01 f302 	lsl.w	r3, r1, r2
 8000348:	ea40 0003 	orr.w	r0, r0, r3
 800034c:	fa21 f304 	lsr.w	r3, r1, r4
 8000350:	ea45 0103 	orr.w	r1, r5, r3
 8000354:	bd30      	pop	{r4, r5, pc}
 8000356:	f1c4 040c 	rsb	r4, r4, #12
 800035a:	f1c4 0220 	rsb	r2, r4, #32
 800035e:	fa20 f002 	lsr.w	r0, r0, r2
 8000362:	fa01 f304 	lsl.w	r3, r1, r4
 8000366:	ea40 0003 	orr.w	r0, r0, r3
 800036a:	4629      	mov	r1, r5
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	fa21 f004 	lsr.w	r0, r1, r4
 8000372:	4629      	mov	r1, r5
 8000374:	bd30      	pop	{r4, r5, pc}
 8000376:	f094 0f00 	teq	r4, #0
 800037a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800037e:	bf06      	itte	eq
 8000380:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000384:	3401      	addeq	r4, #1
 8000386:	3d01      	subne	r5, #1
 8000388:	e74e      	b.n	8000228 <__adddf3+0x8c>
 800038a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800038e:	bf18      	it	ne
 8000390:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000394:	d029      	beq.n	80003ea <__adddf3+0x24e>
 8000396:	ea94 0f05 	teq	r4, r5
 800039a:	bf08      	it	eq
 800039c:	ea90 0f02 	teqeq	r0, r2
 80003a0:	d005      	beq.n	80003ae <__adddf3+0x212>
 80003a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003a6:	bf04      	itt	eq
 80003a8:	4619      	moveq	r1, r3
 80003aa:	4610      	moveq	r0, r2
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	ea91 0f03 	teq	r1, r3
 80003b2:	bf1e      	ittt	ne
 80003b4:	2100      	movne	r1, #0
 80003b6:	2000      	movne	r0, #0
 80003b8:	bd30      	popne	{r4, r5, pc}
 80003ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003be:	d105      	bne.n	80003cc <__adddf3+0x230>
 80003c0:	0040      	lsls	r0, r0, #1
 80003c2:	4149      	adcs	r1, r1
 80003c4:	bf28      	it	cs
 80003c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003ca:	bd30      	pop	{r4, r5, pc}
 80003cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003d0:	bf3c      	itt	cc
 80003d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003d6:	bd30      	popcc	{r4, r5, pc}
 80003d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003e4:	f04f 0000 	mov.w	r0, #0
 80003e8:	bd30      	pop	{r4, r5, pc}
 80003ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ee:	bf1a      	itte	ne
 80003f0:	4619      	movne	r1, r3
 80003f2:	4610      	movne	r0, r2
 80003f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003f8:	bf1c      	itt	ne
 80003fa:	460b      	movne	r3, r1
 80003fc:	4602      	movne	r2, r0
 80003fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000402:	bf06      	itte	eq
 8000404:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000408:	ea91 0f03 	teqeq	r1, r3
 800040c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000410:	bd30      	pop	{r4, r5, pc}
 8000412:	bf00      	nop

08000414 <__aeabi_ui2d>:
 8000414:	f090 0f00 	teq	r0, #0
 8000418:	bf04      	itt	eq
 800041a:	2100      	moveq	r1, #0
 800041c:	4770      	bxeq	lr
 800041e:	b530      	push	{r4, r5, lr}
 8000420:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000424:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000428:	f04f 0500 	mov.w	r5, #0
 800042c:	f04f 0100 	mov.w	r1, #0
 8000430:	e750      	b.n	80002d4 <__adddf3+0x138>
 8000432:	bf00      	nop

08000434 <__aeabi_i2d>:
 8000434:	f090 0f00 	teq	r0, #0
 8000438:	bf04      	itt	eq
 800043a:	2100      	moveq	r1, #0
 800043c:	4770      	bxeq	lr
 800043e:	b530      	push	{r4, r5, lr}
 8000440:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000444:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000448:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800044c:	bf48      	it	mi
 800044e:	4240      	negmi	r0, r0
 8000450:	f04f 0100 	mov.w	r1, #0
 8000454:	e73e      	b.n	80002d4 <__adddf3+0x138>
 8000456:	bf00      	nop

08000458 <__aeabi_f2d>:
 8000458:	0042      	lsls	r2, r0, #1
 800045a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800045e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000462:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000466:	bf1f      	itttt	ne
 8000468:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800046c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000470:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000474:	4770      	bxne	lr
 8000476:	f092 0f00 	teq	r2, #0
 800047a:	bf14      	ite	ne
 800047c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000480:	4770      	bxeq	lr
 8000482:	b530      	push	{r4, r5, lr}
 8000484:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000488:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800048c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000490:	e720      	b.n	80002d4 <__adddf3+0x138>
 8000492:	bf00      	nop

08000494 <__aeabi_ul2d>:
 8000494:	ea50 0201 	orrs.w	r2, r0, r1
 8000498:	bf08      	it	eq
 800049a:	4770      	bxeq	lr
 800049c:	b530      	push	{r4, r5, lr}
 800049e:	f04f 0500 	mov.w	r5, #0
 80004a2:	e00a      	b.n	80004ba <__aeabi_l2d+0x16>

080004a4 <__aeabi_l2d>:
 80004a4:	ea50 0201 	orrs.w	r2, r0, r1
 80004a8:	bf08      	it	eq
 80004aa:	4770      	bxeq	lr
 80004ac:	b530      	push	{r4, r5, lr}
 80004ae:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004b2:	d502      	bpl.n	80004ba <__aeabi_l2d+0x16>
 80004b4:	4240      	negs	r0, r0
 80004b6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004ba:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004be:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004c6:	f43f aedc 	beq.w	8000282 <__adddf3+0xe6>
 80004ca:	f04f 0203 	mov.w	r2, #3
 80004ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004d2:	bf18      	it	ne
 80004d4:	3203      	addne	r2, #3
 80004d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004da:	bf18      	it	ne
 80004dc:	3203      	addne	r2, #3
 80004de:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004e2:	f1c2 0320 	rsb	r3, r2, #32
 80004e6:	fa00 fc03 	lsl.w	ip, r0, r3
 80004ea:	fa20 f002 	lsr.w	r0, r0, r2
 80004ee:	fa01 fe03 	lsl.w	lr, r1, r3
 80004f2:	ea40 000e 	orr.w	r0, r0, lr
 80004f6:	fa21 f102 	lsr.w	r1, r1, r2
 80004fa:	4414      	add	r4, r2
 80004fc:	e6c1      	b.n	8000282 <__adddf3+0xe6>
 80004fe:	bf00      	nop

08000500 <__aeabi_dmul>:
 8000500:	b570      	push	{r4, r5, r6, lr}
 8000502:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000506:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800050a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800050e:	bf1d      	ittte	ne
 8000510:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000514:	ea94 0f0c 	teqne	r4, ip
 8000518:	ea95 0f0c 	teqne	r5, ip
 800051c:	f000 f8de 	bleq	80006dc <__aeabi_dmul+0x1dc>
 8000520:	442c      	add	r4, r5
 8000522:	ea81 0603 	eor.w	r6, r1, r3
 8000526:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800052a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800052e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000532:	bf18      	it	ne
 8000534:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000538:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800053c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000540:	d038      	beq.n	80005b4 <__aeabi_dmul+0xb4>
 8000542:	fba0 ce02 	umull	ip, lr, r0, r2
 8000546:	f04f 0500 	mov.w	r5, #0
 800054a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800054e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000552:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000556:	f04f 0600 	mov.w	r6, #0
 800055a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800055e:	f09c 0f00 	teq	ip, #0
 8000562:	bf18      	it	ne
 8000564:	f04e 0e01 	orrne.w	lr, lr, #1
 8000568:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800056c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000570:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000574:	d204      	bcs.n	8000580 <__aeabi_dmul+0x80>
 8000576:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800057a:	416d      	adcs	r5, r5
 800057c:	eb46 0606 	adc.w	r6, r6, r6
 8000580:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000584:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000588:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800058c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000590:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000594:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000598:	bf88      	it	hi
 800059a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800059e:	d81e      	bhi.n	80005de <__aeabi_dmul+0xde>
 80005a0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005a4:	bf08      	it	eq
 80005a6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005aa:	f150 0000 	adcs.w	r0, r0, #0
 80005ae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005b2:	bd70      	pop	{r4, r5, r6, pc}
 80005b4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005b8:	ea46 0101 	orr.w	r1, r6, r1
 80005bc:	ea40 0002 	orr.w	r0, r0, r2
 80005c0:	ea81 0103 	eor.w	r1, r1, r3
 80005c4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005c8:	bfc2      	ittt	gt
 80005ca:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005ce:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005d2:	bd70      	popgt	{r4, r5, r6, pc}
 80005d4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005d8:	f04f 0e00 	mov.w	lr, #0
 80005dc:	3c01      	subs	r4, #1
 80005de:	f300 80ab 	bgt.w	8000738 <__aeabi_dmul+0x238>
 80005e2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005e6:	bfde      	ittt	le
 80005e8:	2000      	movle	r0, #0
 80005ea:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005ee:	bd70      	pople	{r4, r5, r6, pc}
 80005f0:	f1c4 0400 	rsb	r4, r4, #0
 80005f4:	3c20      	subs	r4, #32
 80005f6:	da35      	bge.n	8000664 <__aeabi_dmul+0x164>
 80005f8:	340c      	adds	r4, #12
 80005fa:	dc1b      	bgt.n	8000634 <__aeabi_dmul+0x134>
 80005fc:	f104 0414 	add.w	r4, r4, #20
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f305 	lsl.w	r3, r0, r5
 8000608:	fa20 f004 	lsr.w	r0, r0, r4
 800060c:	fa01 f205 	lsl.w	r2, r1, r5
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000618:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800061c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000620:	fa21 f604 	lsr.w	r6, r1, r4
 8000624:	eb42 0106 	adc.w	r1, r2, r6
 8000628:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800062c:	bf08      	it	eq
 800062e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000632:	bd70      	pop	{r4, r5, r6, pc}
 8000634:	f1c4 040c 	rsb	r4, r4, #12
 8000638:	f1c4 0520 	rsb	r5, r4, #32
 800063c:	fa00 f304 	lsl.w	r3, r0, r4
 8000640:	fa20 f005 	lsr.w	r0, r0, r5
 8000644:	fa01 f204 	lsl.w	r2, r1, r4
 8000648:	ea40 0002 	orr.w	r0, r0, r2
 800064c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000650:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000654:	f141 0100 	adc.w	r1, r1, #0
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f1c4 0520 	rsb	r5, r4, #32
 8000668:	fa00 f205 	lsl.w	r2, r0, r5
 800066c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000670:	fa20 f304 	lsr.w	r3, r0, r4
 8000674:	fa01 f205 	lsl.w	r2, r1, r5
 8000678:	ea43 0302 	orr.w	r3, r3, r2
 800067c:	fa21 f004 	lsr.w	r0, r1, r4
 8000680:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000684:	fa21 f204 	lsr.w	r2, r1, r4
 8000688:	ea20 0002 	bic.w	r0, r0, r2
 800068c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000690:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000694:	bf08      	it	eq
 8000696:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f094 0f00 	teq	r4, #0
 80006a0:	d10f      	bne.n	80006c2 <__aeabi_dmul+0x1c2>
 80006a2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006a6:	0040      	lsls	r0, r0, #1
 80006a8:	eb41 0101 	adc.w	r1, r1, r1
 80006ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006b0:	bf08      	it	eq
 80006b2:	3c01      	subeq	r4, #1
 80006b4:	d0f7      	beq.n	80006a6 <__aeabi_dmul+0x1a6>
 80006b6:	ea41 0106 	orr.w	r1, r1, r6
 80006ba:	f095 0f00 	teq	r5, #0
 80006be:	bf18      	it	ne
 80006c0:	4770      	bxne	lr
 80006c2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006c6:	0052      	lsls	r2, r2, #1
 80006c8:	eb43 0303 	adc.w	r3, r3, r3
 80006cc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006d0:	bf08      	it	eq
 80006d2:	3d01      	subeq	r5, #1
 80006d4:	d0f7      	beq.n	80006c6 <__aeabi_dmul+0x1c6>
 80006d6:	ea43 0306 	orr.w	r3, r3, r6
 80006da:	4770      	bx	lr
 80006dc:	ea94 0f0c 	teq	r4, ip
 80006e0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006e4:	bf18      	it	ne
 80006e6:	ea95 0f0c 	teqne	r5, ip
 80006ea:	d00c      	beq.n	8000706 <__aeabi_dmul+0x206>
 80006ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006f0:	bf18      	it	ne
 80006f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006f6:	d1d1      	bne.n	800069c <__aeabi_dmul+0x19c>
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000700:	f04f 0000 	mov.w	r0, #0
 8000704:	bd70      	pop	{r4, r5, r6, pc}
 8000706:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800070a:	bf06      	itte	eq
 800070c:	4610      	moveq	r0, r2
 800070e:	4619      	moveq	r1, r3
 8000710:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000714:	d019      	beq.n	800074a <__aeabi_dmul+0x24a>
 8000716:	ea94 0f0c 	teq	r4, ip
 800071a:	d102      	bne.n	8000722 <__aeabi_dmul+0x222>
 800071c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000720:	d113      	bne.n	800074a <__aeabi_dmul+0x24a>
 8000722:	ea95 0f0c 	teq	r5, ip
 8000726:	d105      	bne.n	8000734 <__aeabi_dmul+0x234>
 8000728:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800072c:	bf1c      	itt	ne
 800072e:	4610      	movne	r0, r2
 8000730:	4619      	movne	r1, r3
 8000732:	d10a      	bne.n	800074a <__aeabi_dmul+0x24a>
 8000734:	ea81 0103 	eor.w	r1, r1, r3
 8000738:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800073c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000740:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000744:	f04f 0000 	mov.w	r0, #0
 8000748:	bd70      	pop	{r4, r5, r6, pc}
 800074a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800074e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000752:	bd70      	pop	{r4, r5, r6, pc}

08000754 <__aeabi_ddiv>:
 8000754:	b570      	push	{r4, r5, r6, lr}
 8000756:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800075a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800075e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000762:	bf1d      	ittte	ne
 8000764:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000768:	ea94 0f0c 	teqne	r4, ip
 800076c:	ea95 0f0c 	teqne	r5, ip
 8000770:	f000 f8a7 	bleq	80008c2 <__aeabi_ddiv+0x16e>
 8000774:	eba4 0405 	sub.w	r4, r4, r5
 8000778:	ea81 0e03 	eor.w	lr, r1, r3
 800077c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000780:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000784:	f000 8088 	beq.w	8000898 <__aeabi_ddiv+0x144>
 8000788:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800078c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000790:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000794:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000798:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800079c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007a0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007a4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007a8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ac:	429d      	cmp	r5, r3
 80007ae:	bf08      	it	eq
 80007b0:	4296      	cmpeq	r6, r2
 80007b2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007b6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007ba:	d202      	bcs.n	80007c2 <__aeabi_ddiv+0x6e>
 80007bc:	085b      	lsrs	r3, r3, #1
 80007be:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c2:	1ab6      	subs	r6, r6, r2
 80007c4:	eb65 0503 	sbc.w	r5, r5, r3
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007d2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007de:	bf22      	ittt	cs
 80007e0:	1ab6      	subcs	r6, r6, r2
 80007e2:	4675      	movcs	r5, lr
 80007e4:	ea40 000c 	orrcs.w	r0, r0, ip
 80007e8:	085b      	lsrs	r3, r3, #1
 80007ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80007f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007f6:	bf22      	ittt	cs
 80007f8:	1ab6      	subcs	r6, r6, r2
 80007fa:	4675      	movcs	r5, lr
 80007fc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000800:	085b      	lsrs	r3, r3, #1
 8000802:	ea4f 0232 	mov.w	r2, r2, rrx
 8000806:	ebb6 0e02 	subs.w	lr, r6, r2
 800080a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800080e:	bf22      	ittt	cs
 8000810:	1ab6      	subcs	r6, r6, r2
 8000812:	4675      	movcs	r5, lr
 8000814:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000822:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000826:	bf22      	ittt	cs
 8000828:	1ab6      	subcs	r6, r6, r2
 800082a:	4675      	movcs	r5, lr
 800082c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000830:	ea55 0e06 	orrs.w	lr, r5, r6
 8000834:	d018      	beq.n	8000868 <__aeabi_ddiv+0x114>
 8000836:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800083a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800083e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000842:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000846:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800084a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800084e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000852:	d1c0      	bne.n	80007d6 <__aeabi_ddiv+0x82>
 8000854:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000858:	d10b      	bne.n	8000872 <__aeabi_ddiv+0x11e>
 800085a:	ea41 0100 	orr.w	r1, r1, r0
 800085e:	f04f 0000 	mov.w	r0, #0
 8000862:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000866:	e7b6      	b.n	80007d6 <__aeabi_ddiv+0x82>
 8000868:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800086c:	bf04      	itt	eq
 800086e:	4301      	orreq	r1, r0
 8000870:	2000      	moveq	r0, #0
 8000872:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000876:	bf88      	it	hi
 8000878:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800087c:	f63f aeaf 	bhi.w	80005de <__aeabi_dmul+0xde>
 8000880:	ebb5 0c03 	subs.w	ip, r5, r3
 8000884:	bf04      	itt	eq
 8000886:	ebb6 0c02 	subseq.w	ip, r6, r2
 800088a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800088e:	f150 0000 	adcs.w	r0, r0, #0
 8000892:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000896:	bd70      	pop	{r4, r5, r6, pc}
 8000898:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800089c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008a0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008a4:	bfc2      	ittt	gt
 80008a6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008aa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ae:	bd70      	popgt	{r4, r5, r6, pc}
 80008b0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008b4:	f04f 0e00 	mov.w	lr, #0
 80008b8:	3c01      	subs	r4, #1
 80008ba:	e690      	b.n	80005de <__aeabi_dmul+0xde>
 80008bc:	ea45 0e06 	orr.w	lr, r5, r6
 80008c0:	e68d      	b.n	80005de <__aeabi_dmul+0xde>
 80008c2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008c6:	ea94 0f0c 	teq	r4, ip
 80008ca:	bf08      	it	eq
 80008cc:	ea95 0f0c 	teqeq	r5, ip
 80008d0:	f43f af3b 	beq.w	800074a <__aeabi_dmul+0x24a>
 80008d4:	ea94 0f0c 	teq	r4, ip
 80008d8:	d10a      	bne.n	80008f0 <__aeabi_ddiv+0x19c>
 80008da:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008de:	f47f af34 	bne.w	800074a <__aeabi_dmul+0x24a>
 80008e2:	ea95 0f0c 	teq	r5, ip
 80008e6:	f47f af25 	bne.w	8000734 <__aeabi_dmul+0x234>
 80008ea:	4610      	mov	r0, r2
 80008ec:	4619      	mov	r1, r3
 80008ee:	e72c      	b.n	800074a <__aeabi_dmul+0x24a>
 80008f0:	ea95 0f0c 	teq	r5, ip
 80008f4:	d106      	bne.n	8000904 <__aeabi_ddiv+0x1b0>
 80008f6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008fa:	f43f aefd 	beq.w	80006f8 <__aeabi_dmul+0x1f8>
 80008fe:	4610      	mov	r0, r2
 8000900:	4619      	mov	r1, r3
 8000902:	e722      	b.n	800074a <__aeabi_dmul+0x24a>
 8000904:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000908:	bf18      	it	ne
 800090a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800090e:	f47f aec5 	bne.w	800069c <__aeabi_dmul+0x19c>
 8000912:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000916:	f47f af0d 	bne.w	8000734 <__aeabi_dmul+0x234>
 800091a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800091e:	f47f aeeb 	bne.w	80006f8 <__aeabi_dmul+0x1f8>
 8000922:	e712      	b.n	800074a <__aeabi_dmul+0x24a>

08000924 <__gedf2>:
 8000924:	f04f 3cff 	mov.w	ip, #4294967295
 8000928:	e006      	b.n	8000938 <__cmpdf2+0x4>
 800092a:	bf00      	nop

0800092c <__ledf2>:
 800092c:	f04f 0c01 	mov.w	ip, #1
 8000930:	e002      	b.n	8000938 <__cmpdf2+0x4>
 8000932:	bf00      	nop

08000934 <__cmpdf2>:
 8000934:	f04f 0c01 	mov.w	ip, #1
 8000938:	f84d cd04 	str.w	ip, [sp, #-4]!
 800093c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000940:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000944:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800094e:	d01b      	beq.n	8000988 <__cmpdf2+0x54>
 8000950:	b001      	add	sp, #4
 8000952:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000956:	bf0c      	ite	eq
 8000958:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800095c:	ea91 0f03 	teqne	r1, r3
 8000960:	bf02      	ittt	eq
 8000962:	ea90 0f02 	teqeq	r0, r2
 8000966:	2000      	moveq	r0, #0
 8000968:	4770      	bxeq	lr
 800096a:	f110 0f00 	cmn.w	r0, #0
 800096e:	ea91 0f03 	teq	r1, r3
 8000972:	bf58      	it	pl
 8000974:	4299      	cmppl	r1, r3
 8000976:	bf08      	it	eq
 8000978:	4290      	cmpeq	r0, r2
 800097a:	bf2c      	ite	cs
 800097c:	17d8      	asrcs	r0, r3, #31
 800097e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000982:	f040 0001 	orr.w	r0, r0, #1
 8000986:	4770      	bx	lr
 8000988:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800098c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000990:	d102      	bne.n	8000998 <__cmpdf2+0x64>
 8000992:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000996:	d107      	bne.n	80009a8 <__cmpdf2+0x74>
 8000998:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800099c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009a0:	d1d6      	bne.n	8000950 <__cmpdf2+0x1c>
 80009a2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009a6:	d0d3      	beq.n	8000950 <__cmpdf2+0x1c>
 80009a8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ac:	4770      	bx	lr
 80009ae:	bf00      	nop

080009b0 <__aeabi_cdrcmple>:
 80009b0:	4684      	mov	ip, r0
 80009b2:	4610      	mov	r0, r2
 80009b4:	4662      	mov	r2, ip
 80009b6:	468c      	mov	ip, r1
 80009b8:	4619      	mov	r1, r3
 80009ba:	4663      	mov	r3, ip
 80009bc:	e000      	b.n	80009c0 <__aeabi_cdcmpeq>
 80009be:	bf00      	nop

080009c0 <__aeabi_cdcmpeq>:
 80009c0:	b501      	push	{r0, lr}
 80009c2:	f7ff ffb7 	bl	8000934 <__cmpdf2>
 80009c6:	2800      	cmp	r0, #0
 80009c8:	bf48      	it	mi
 80009ca:	f110 0f00 	cmnmi.w	r0, #0
 80009ce:	bd01      	pop	{r0, pc}

080009d0 <__aeabi_dcmpeq>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff fff4 	bl	80009c0 <__aeabi_cdcmpeq>
 80009d8:	bf0c      	ite	eq
 80009da:	2001      	moveq	r0, #1
 80009dc:	2000      	movne	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmplt>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffea 	bl	80009c0 <__aeabi_cdcmpeq>
 80009ec:	bf34      	ite	cc
 80009ee:	2001      	movcc	r0, #1
 80009f0:	2000      	movcs	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmple>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffe0 	bl	80009c0 <__aeabi_cdcmpeq>
 8000a00:	bf94      	ite	ls
 8000a02:	2001      	movls	r0, #1
 8000a04:	2000      	movhi	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpge>:
 8000a0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a10:	f7ff ffce 	bl	80009b0 <__aeabi_cdrcmple>
 8000a14:	bf94      	ite	ls
 8000a16:	2001      	movls	r0, #1
 8000a18:	2000      	movhi	r0, #0
 8000a1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a1e:	bf00      	nop

08000a20 <__aeabi_dcmpgt>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff ffc4 	bl	80009b0 <__aeabi_cdrcmple>
 8000a28:	bf34      	ite	cc
 8000a2a:	2001      	movcc	r0, #1
 8000a2c:	2000      	movcs	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmpun>:
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	d102      	bne.n	8000a44 <__aeabi_dcmpun+0x10>
 8000a3e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a42:	d10a      	bne.n	8000a5a <__aeabi_dcmpun+0x26>
 8000a44:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	d102      	bne.n	8000a54 <__aeabi_dcmpun+0x20>
 8000a4e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a52:	d102      	bne.n	8000a5a <__aeabi_dcmpun+0x26>
 8000a54:	f04f 0000 	mov.w	r0, #0
 8000a58:	4770      	bx	lr
 8000a5a:	f04f 0001 	mov.w	r0, #1
 8000a5e:	4770      	bx	lr

08000a60 <__aeabi_d2iz>:
 8000a60:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a64:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a68:	d215      	bcs.n	8000a96 <__aeabi_d2iz+0x36>
 8000a6a:	d511      	bpl.n	8000a90 <__aeabi_d2iz+0x30>
 8000a6c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a70:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a74:	d912      	bls.n	8000a9c <__aeabi_d2iz+0x3c>
 8000a76:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a7a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a7e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a82:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a86:	fa23 f002 	lsr.w	r0, r3, r2
 8000a8a:	bf18      	it	ne
 8000a8c:	4240      	negne	r0, r0
 8000a8e:	4770      	bx	lr
 8000a90:	f04f 0000 	mov.w	r0, #0
 8000a94:	4770      	bx	lr
 8000a96:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a9a:	d105      	bne.n	8000aa8 <__aeabi_d2iz+0x48>
 8000a9c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000aa0:	bf08      	it	eq
 8000aa2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000aa6:	4770      	bx	lr
 8000aa8:	f04f 0000 	mov.w	r0, #0
 8000aac:	4770      	bx	lr
 8000aae:	bf00      	nop

08000ab0 <HAL_InitTick>:
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock /1000);
 8000ab0:	4b08      	ldr	r3, [pc, #32]	; (8000ad4 <HAL_InitTick+0x24>)
{
 8000ab2:	b510      	push	{r4, lr}
 8000ab4:	4604      	mov	r4, r0
  HAL_SYSTICK_Config(SystemCoreClock /1000);
 8000ab6:	6818      	ldr	r0, [r3, #0]
 8000ab8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000abc:	fbb0 f0f3 	udiv	r0, r0, r3
 8000ac0:	f000 f876 	bl	8000bb0 <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0);
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	4621      	mov	r1, r4
 8000ac8:	f04f 30ff 	mov.w	r0, #4294967295
 8000acc:	f000 f830 	bl	8000b30 <HAL_NVIC_SetPriority>

   /* Return function status */
  return HAL_OK;
}
 8000ad0:	2000      	movs	r0, #0
 8000ad2:	bd10      	pop	{r4, pc}
 8000ad4:	20000000 	.word	0x20000000

08000ad8 <HAL_Init>:
{
 8000ad8:	b508      	push	{r3, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ada:	2003      	movs	r0, #3
 8000adc:	f000 f816 	bl	8000b0c <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ae0:	2000      	movs	r0, #0
 8000ae2:	f7ff ffe5 	bl	8000ab0 <HAL_InitTick>
  HAL_MspInit();
 8000ae6:	f001 fabb 	bl	8002060 <HAL_MspInit>
}
 8000aea:	2000      	movs	r0, #0
 8000aec:	bd08      	pop	{r3, pc}
	...

08000af0 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 8000af0:	4a02      	ldr	r2, [pc, #8]	; (8000afc <HAL_IncTick+0xc>)
 8000af2:	6813      	ldr	r3, [r2, #0]
 8000af4:	3301      	adds	r3, #1
 8000af6:	6013      	str	r3, [r2, #0]
 8000af8:	4770      	bx	lr
 8000afa:	bf00      	nop
 8000afc:	20000200 	.word	0x20000200

08000b00 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000b00:	4b01      	ldr	r3, [pc, #4]	; (8000b08 <HAL_GetTick+0x8>)
 8000b02:	6818      	ldr	r0, [r3, #0]
}
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop
 8000b08:	20000200 	.word	0x20000200

08000b0c <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b0c:	4a07      	ldr	r2, [pc, #28]	; (8000b2c <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000b0e:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b10:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000b12:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b16:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000b1a:	041b      	lsls	r3, r3, #16
 8000b1c:	0c1b      	lsrs	r3, r3, #16
 8000b1e:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b22:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 8000b26:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000b28:	60d3      	str	r3, [r2, #12]
 8000b2a:	4770      	bx	lr
 8000b2c:	e000ed00 	.word	0xe000ed00

08000b30 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b30:	4b17      	ldr	r3, [pc, #92]	; (8000b90 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b32:	b530      	push	{r4, r5, lr}
 8000b34:	68dc      	ldr	r4, [r3, #12]
 8000b36:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b3a:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b3e:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b40:	2b04      	cmp	r3, #4
 8000b42:	bf28      	it	cs
 8000b44:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b46:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b48:	f04f 0501 	mov.w	r5, #1
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b4c:	bf98      	it	ls
 8000b4e:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b50:	fa05 f303 	lsl.w	r3, r5, r3
 8000b54:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b58:	bf88      	it	hi
 8000b5a:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b5c:	4019      	ands	r1, r3
 8000b5e:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b60:	fa05 f404 	lsl.w	r4, r5, r4
 8000b64:	3c01      	subs	r4, #1
 8000b66:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 8000b68:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b6a:	ea42 0201 	orr.w	r2, r2, r1
 8000b6e:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b72:	bfaf      	iteee	ge
 8000b74:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b78:	4b06      	ldrlt	r3, [pc, #24]	; (8000b94 <HAL_NVIC_SetPriority+0x64>)
 8000b7a:	f000 000f 	andlt.w	r0, r0, #15
 8000b7e:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b80:	bfa5      	ittet	ge
 8000b82:	b2d2      	uxtbge	r2, r2
 8000b84:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b88:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b8a:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8000b8e:	bd30      	pop	{r4, r5, pc}
 8000b90:	e000ed00 	.word	0xe000ed00
 8000b94:	e000ed14 	.word	0xe000ed14

08000b98 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000b98:	2301      	movs	r3, #1
 8000b9a:	0942      	lsrs	r2, r0, #5
 8000b9c:	f000 001f 	and.w	r0, r0, #31
 8000ba0:	fa03 f000 	lsl.w	r0, r3, r0
 8000ba4:	4b01      	ldr	r3, [pc, #4]	; (8000bac <HAL_NVIC_EnableIRQ+0x14>)
 8000ba6:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8000baa:	4770      	bx	lr
 8000bac:	e000e100 	.word	0xe000e100

08000bb0 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000bb0:	3801      	subs	r0, #1
 8000bb2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bb6:	d20a      	bcs.n	8000bce <HAL_SYSTICK_Config+0x1e>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bb8:	21f0      	movs	r1, #240	; 0xf0
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000bba:	4b06      	ldr	r3, [pc, #24]	; (8000bd4 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bbc:	4a06      	ldr	r2, [pc, #24]	; (8000bd8 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000bbe:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bc0:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000bc4:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000bc6:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000bc8:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000bca:	601a      	str	r2, [r3, #0]
 8000bcc:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000bce:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000bd0:	4770      	bx	lr
 8000bd2:	bf00      	nop
 8000bd4:	e000e010 	.word	0xe000e010
 8000bd8:	e000ed00 	.word	0xe000ed00

08000bdc <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8000bdc:	4b04      	ldr	r3, [pc, #16]	; (8000bf0 <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8000bde:	2804      	cmp	r0, #4
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000be0:	681a      	ldr	r2, [r3, #0]
 8000be2:	bf0c      	ite	eq
 8000be4:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8000be8:	f022 0204 	bicne.w	r2, r2, #4
 8000bec:	601a      	str	r2, [r3, #0]
 8000bee:	4770      	bx	lr
 8000bf0:	e000e010 	.word	0xe000e010

08000bf4 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8000bf4:	4770      	bx	lr

08000bf6 <HAL_SYSTICK_IRQHandler>:
{
 8000bf6:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 8000bf8:	f7ff fffc 	bl	8000bf4 <HAL_SYSTICK_Callback>
 8000bfc:	bd08      	pop	{r3, pc}
	...

08000c00 <HAL_GPIO_Init>:
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
  uint32_t position = 0x00;
 8000c00:	2300      	movs	r3, #0
{ 
 8000c02:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull)); 

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8000c06:	f8d1 8000 	ldr.w	r8, [r1]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c0a:	f8df 9194 	ldr.w	r9, [pc, #404]	; 8000da0 <HAL_GPIO_Init+0x1a0>
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
        SYSCFG->EXTICR[position >> 2] = temp;
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000c0e:	4a62      	ldr	r2, [pc, #392]	; (8000d98 <HAL_GPIO_Init+0x198>)
  while (((GPIO_Init->Pin) >> position) != 0)
 8000c10:	fa38 f403 	lsrs.w	r4, r8, r3
 8000c14:	d102      	bne.n	8000c1c <HAL_GPIO_Init+0x1c>
      }
    }
    
    position++;
  } 
}
 8000c16:	b003      	add	sp, #12
 8000c18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000c1c:	f04f 0e01 	mov.w	lr, #1
 8000c20:	fa0e fe03 	lsl.w	lr, lr, r3
    if(iocurrent)
 8000c24:	ea18 060e 	ands.w	r6, r8, lr
 8000c28:	f000 80a8 	beq.w	8000d7c <HAL_GPIO_Init+0x17c>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 8000c2c:	684c      	ldr	r4, [r1, #4]
 8000c2e:	f024 0710 	bic.w	r7, r4, #16
 8000c32:	2f02      	cmp	r7, #2
 8000c34:	d116      	bne.n	8000c64 <HAL_GPIO_Init+0x64>
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4)) ;      
 8000c36:	f04f 0c0f 	mov.w	ip, #15
        temp = GPIOx->AFR[position >> 3];
 8000c3a:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 8000c3e:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4)) ;      
 8000c42:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3];
 8000c46:	f8da 5020 	ldr.w	r5, [sl, #32]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4)) ;      
 8000c4a:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8000c4e:	fa0c fc0b 	lsl.w	ip, ip, fp
 8000c52:	ea25 0c0c 	bic.w	ip, r5, ip
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));       
 8000c56:	690d      	ldr	r5, [r1, #16]
 8000c58:	fa05 f50b 	lsl.w	r5, r5, fp
 8000c5c:	ea45 050c 	orr.w	r5, r5, ip
        GPIOx->AFR[position >> 3] = temp;
 8000c60:	f8ca 5020 	str.w	r5, [sl, #32]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));   
 8000c64:	2503      	movs	r5, #3
 8000c66:	ea4f 0a43 	mov.w	sl, r3, lsl #1
 8000c6a:	fa05 f50a 	lsl.w	r5, r5, sl
 8000c6e:	43ed      	mvns	r5, r5
      temp = GPIOx->MODER;
 8000c70:	f8d0 b000 	ldr.w	fp, [r0]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000c74:	f004 0c03 	and.w	ip, r4, #3
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));   
 8000c78:	ea0b 0b05 	and.w	fp, fp, r5
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000c7c:	fa0c fc0a 	lsl.w	ip, ip, sl
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000c80:	3f01      	subs	r7, #1
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000c82:	ea4c 0c0b 	orr.w	ip, ip, fp
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000c86:	2f01      	cmp	r7, #1
      GPIOx->MODER = temp;
 8000c88:	f8c0 c000 	str.w	ip, [r0]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000c8c:	d811      	bhi.n	8000cb2 <HAL_GPIO_Init+0xb2>
        temp = GPIOx->OSPEEDR; 
 8000c8e:	6887      	ldr	r7, [r0, #8]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000c90:	ea07 0b05 	and.w	fp, r7, r5
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 8000c94:	68cf      	ldr	r7, [r1, #12]
 8000c96:	fa07 fc0a 	lsl.w	ip, r7, sl
 8000c9a:	ea4c 070b 	orr.w	r7, ip, fp
        GPIOx->OSPEEDR = temp;
 8000c9e:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8000ca0:	6847      	ldr	r7, [r0, #4]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8000ca2:	ea27 0e0e 	bic.w	lr, r7, lr
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8000ca6:	f3c4 1700 	ubfx	r7, r4, #4, #1
 8000caa:	409f      	lsls	r7, r3
 8000cac:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 8000cb0:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 8000cb2:	68c7      	ldr	r7, [r0, #12]
      CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 8000cb4:	403d      	ands	r5, r7
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 8000cb6:	688f      	ldr	r7, [r1, #8]
 8000cb8:	fa07 f70a 	lsl.w	r7, r7, sl
 8000cbc:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 8000cbe:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8000cc0:	00e5      	lsls	r5, r4, #3
 8000cc2:	d55b      	bpl.n	8000d7c <HAL_GPIO_Init+0x17c>
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 8000cc4:	f04f 0c0f 	mov.w	ip, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cc8:	f8d9 5020 	ldr.w	r5, [r9, #32]
 8000ccc:	f023 0703 	bic.w	r7, r3, #3
 8000cd0:	f045 0501 	orr.w	r5, r5, #1
 8000cd4:	f8c9 5020 	str.w	r5, [r9, #32]
 8000cd8:	f8d9 5020 	ldr.w	r5, [r9, #32]
 8000cdc:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8000ce0:	f005 0501 	and.w	r5, r5, #1
 8000ce4:	9501      	str	r5, [sp, #4]
 8000ce6:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 8000cea:	f003 0e03 	and.w	lr, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cee:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 8000cf0:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
        temp = SYSCFG->EXTICR[position >> 2];
 8000cf4:	f8d7 a008 	ldr.w	sl, [r7, #8]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 8000cf8:	fa0c f50e 	lsl.w	r5, ip, lr
 8000cfc:	ea2a 0c05 	bic.w	ip, sl, r5
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000d00:	4d26      	ldr	r5, [pc, #152]	; (8000d9c <HAL_GPIO_Init+0x19c>)
 8000d02:	42a8      	cmp	r0, r5
 8000d04:	d03c      	beq.n	8000d80 <HAL_GPIO_Init+0x180>
 8000d06:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000d0a:	42a8      	cmp	r0, r5
 8000d0c:	d03a      	beq.n	8000d84 <HAL_GPIO_Init+0x184>
 8000d0e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000d12:	42a8      	cmp	r0, r5
 8000d14:	d038      	beq.n	8000d88 <HAL_GPIO_Init+0x188>
 8000d16:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000d1a:	42a8      	cmp	r0, r5
 8000d1c:	d036      	beq.n	8000d8c <HAL_GPIO_Init+0x18c>
 8000d1e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000d22:	42a8      	cmp	r0, r5
 8000d24:	d034      	beq.n	8000d90 <HAL_GPIO_Init+0x190>
 8000d26:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000d2a:	42a8      	cmp	r0, r5
 8000d2c:	d032      	beq.n	8000d94 <HAL_GPIO_Init+0x194>
 8000d2e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000d32:	42a8      	cmp	r0, r5
 8000d34:	bf14      	ite	ne
 8000d36:	2507      	movne	r5, #7
 8000d38:	2506      	moveq	r5, #6
 8000d3a:	fa05 f50e 	lsl.w	r5, r5, lr
 8000d3e:	ea45 050c 	orr.w	r5, r5, ip
        SYSCFG->EXTICR[position >> 2] = temp;
 8000d42:	60bd      	str	r5, [r7, #8]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8000d44:	43f7      	mvns	r7, r6
        temp = EXTI->IMR;
 8000d46:	6815      	ldr	r5, [r2, #0]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000d48:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8000d4c:	bf0c      	ite	eq
 8000d4e:	403d      	andeq	r5, r7
          SET_BIT(temp, iocurrent); 
 8000d50:	4335      	orrne	r5, r6
        EXTI->IMR = temp;
 8000d52:	6015      	str	r5, [r2, #0]
        temp = EXTI->EMR;
 8000d54:	6855      	ldr	r5, [r2, #4]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000d56:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        CLEAR_BIT(temp, (uint32_t)iocurrent);      
 8000d5a:	bf0c      	ite	eq
 8000d5c:	403d      	andeq	r5, r7
          SET_BIT(temp, iocurrent); 
 8000d5e:	4335      	orrne	r5, r6
        EXTI->EMR = temp;
 8000d60:	6055      	str	r5, [r2, #4]
        temp = EXTI->RTSR;
 8000d62:	6895      	ldr	r5, [r2, #8]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000d64:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 8000d68:	bf0c      	ite	eq
 8000d6a:	403d      	andeq	r5, r7
          SET_BIT(temp, iocurrent); 
 8000d6c:	4335      	orrne	r5, r6
        EXTI->RTSR = temp;
 8000d6e:	6095      	str	r5, [r2, #8]
        temp = EXTI->FTSR;
 8000d70:	68d5      	ldr	r5, [r2, #12]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000d72:	02a4      	lsls	r4, r4, #10
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 8000d74:	bf54      	ite	pl
 8000d76:	403d      	andpl	r5, r7
          SET_BIT(temp, iocurrent); 
 8000d78:	4335      	orrmi	r5, r6
        EXTI->FTSR = temp;
 8000d7a:	60d5      	str	r5, [r2, #12]
    position++;
 8000d7c:	3301      	adds	r3, #1
 8000d7e:	e747      	b.n	8000c10 <HAL_GPIO_Init+0x10>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000d80:	2500      	movs	r5, #0
 8000d82:	e7da      	b.n	8000d3a <HAL_GPIO_Init+0x13a>
 8000d84:	2501      	movs	r5, #1
 8000d86:	e7d8      	b.n	8000d3a <HAL_GPIO_Init+0x13a>
 8000d88:	2502      	movs	r5, #2
 8000d8a:	e7d6      	b.n	8000d3a <HAL_GPIO_Init+0x13a>
 8000d8c:	2503      	movs	r5, #3
 8000d8e:	e7d4      	b.n	8000d3a <HAL_GPIO_Init+0x13a>
 8000d90:	2504      	movs	r5, #4
 8000d92:	e7d2      	b.n	8000d3a <HAL_GPIO_Init+0x13a>
 8000d94:	2505      	movs	r5, #5
 8000d96:	e7d0      	b.n	8000d3a <HAL_GPIO_Init+0x13a>
 8000d98:	40010400 	.word	0x40010400
 8000d9c:	40020000 	.word	0x40020000
 8000da0:	40023800 	.word	0x40023800

08000da4 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000da4:	b10a      	cbz	r2, 8000daa <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 8000da6:	6181      	str	r1, [r0, #24]
 8000da8:	4770      	bx	lr
 8000daa:	0409      	lsls	r1, r1, #16
 8000dac:	e7fb      	b.n	8000da6 <HAL_GPIO_WritePin+0x2>

08000dae <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 8000dae:	6943      	ldr	r3, [r0, #20]
 8000db0:	4059      	eors	r1, r3
 8000db2:	6141      	str	r1, [r0, #20]
 8000db4:	4770      	bx	lr

08000db6 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000db6:	4770      	bx	lr

08000db8 <HAL_GPIO_EXTI_IRQHandler>:
{
 8000db8:	b508      	push	{r3, lr}
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET) 
 8000dba:	4b04      	ldr	r3, [pc, #16]	; (8000dcc <HAL_GPIO_EXTI_IRQHandler+0x14>)
 8000dbc:	6959      	ldr	r1, [r3, #20]
 8000dbe:	4201      	tst	r1, r0
 8000dc0:	d002      	beq.n	8000dc8 <HAL_GPIO_EXTI_IRQHandler+0x10>
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000dc2:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000dc4:	f7ff fff7 	bl	8000db6 <HAL_GPIO_EXTI_Callback>
 8000dc8:	bd08      	pop	{r3, pc}
 8000dca:	bf00      	nop
 8000dcc:	40010400 	.word	0x40010400

08000dd0 <RCC_SetFlashLatencyFromMSIRange>:
{
  uint32_t vos = 0U;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8000dd0:	4b1c      	ldr	r3, [pc, #112]	; (8000e44 <RCC_SetFlashLatencyFromMSIRange+0x74>)
{
 8000dd2:	b082      	sub	sp, #8
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8000dd4:	689a      	ldr	r2, [r3, #8]
 8000dd6:	f012 0ff0 	tst.w	r2, #240	; 0xf0
 8000dda:	d00c      	beq.n	8000df6 <RCC_SetFlashLatencyFromMSIRange+0x26>
{
 8000ddc:	2200      	movs	r2, #0
    {
      latency = FLASH_LATENCY_1; /* 1WS */
    }
  }
  
  __HAL_FLASH_SET_LATENCY(latency);
 8000dde:	491a      	ldr	r1, [pc, #104]	; (8000e48 <RCC_SetFlashLatencyFromMSIRange+0x78>)
 8000de0:	680b      	ldr	r3, [r1, #0]
 8000de2:	f023 0301 	bic.w	r3, r3, #1
 8000de6:	4313      	orrs	r3, r2
 8000de8:	600b      	str	r3, [r1, #0]
  
  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 8000dea:	6808      	ldr	r0, [r1, #0]
 8000dec:	f000 0001 	and.w	r0, r0, #1
 8000df0:	4050      	eors	r0, r2
  {
    return HAL_ERROR;
  }
  
  return HAL_OK;
}
 8000df2:	b002      	add	sp, #8
 8000df4:	4770      	bx	lr
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8000df6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000df8:	4914      	ldr	r1, [pc, #80]	; (8000e4c <RCC_SetFlashLatencyFromMSIRange+0x7c>)
 8000dfa:	f012 5f80 	tst.w	r2, #268435456	; 0x10000000
 8000dfe:	d00f      	beq.n	8000e20 <RCC_SetFlashLatencyFromMSIRange+0x50>
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8000e00:	680a      	ldr	r2, [r1, #0]
 8000e02:	f402 52c0 	and.w	r2, r2, #6144	; 0x1800
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 8000e06:	f5b2 5fc0 	cmp.w	r2, #6144	; 0x1800
 8000e0a:	d1e7      	bne.n	8000ddc <RCC_SetFlashLatencyFromMSIRange+0xc>
 8000e0c:	f5b0 4f40 	cmp.w	r0, #49152	; 0xc000
 8000e10:	d1e4      	bne.n	8000ddc <RCC_SetFlashLatencyFromMSIRange+0xc>
  __HAL_FLASH_SET_LATENCY(latency);
 8000e12:	4a0d      	ldr	r2, [pc, #52]	; (8000e48 <RCC_SetFlashLatencyFromMSIRange+0x78>)
 8000e14:	6813      	ldr	r3, [r2, #0]
 8000e16:	f043 0304 	orr.w	r3, r3, #4
 8000e1a:	6013      	str	r3, [r2, #0]
      latency = FLASH_LATENCY_1; /* 1WS */
 8000e1c:	2201      	movs	r2, #1
 8000e1e:	e7de      	b.n	8000dde <RCC_SetFlashLatencyFromMSIRange+0xe>
      __HAL_RCC_PWR_CLK_ENABLE();
 8000e20:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000e22:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000e26:	625a      	str	r2, [r3, #36]	; 0x24
 8000e28:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000e2a:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 8000e2e:	9201      	str	r2, [sp, #4]
 8000e30:	9a01      	ldr	r2, [sp, #4]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8000e32:	680a      	ldr	r2, [r1, #0]
      __HAL_RCC_PWR_CLK_DISABLE();
 8000e34:	6a59      	ldr	r1, [r3, #36]	; 0x24
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8000e36:	f402 52c0 	and.w	r2, r2, #6144	; 0x1800
      __HAL_RCC_PWR_CLK_DISABLE();
 8000e3a:	f021 5180 	bic.w	r1, r1, #268435456	; 0x10000000
 8000e3e:	6259      	str	r1, [r3, #36]	; 0x24
 8000e40:	e7e1      	b.n	8000e06 <RCC_SetFlashLatencyFromMSIRange+0x36>
 8000e42:	bf00      	nop
 8000e44:	40023800 	.word	0x40023800
 8000e48:	40023c00 	.word	0x40023c00
 8000e4c:	40007000 	.word	0x40007000

08000e50 <HAL_RCC_OscConfig>:
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000e50:	6803      	ldr	r3, [r0, #0]
{
 8000e52:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000e56:	07d9      	lsls	r1, r3, #31
{
 8000e58:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000e5a:	d46a      	bmi.n	8000f32 <HAL_RCC_OscConfig+0xe2>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000e5c:	6823      	ldr	r3, [r4, #0]
 8000e5e:	079a      	lsls	r2, r3, #30
 8000e60:	f100 80e6 	bmi.w	8001030 <HAL_RCC_OscConfig+0x1e0>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000e64:	6823      	ldr	r3, [r4, #0]
 8000e66:	06de      	lsls	r6, r3, #27
 8000e68:	d555      	bpl.n	8000f16 <HAL_RCC_OscConfig+0xc6>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI) )
 8000e6a:	4dc1      	ldr	r5, [pc, #772]	; (8001170 <HAL_RCC_OscConfig+0x320>)
 8000e6c:	68ab      	ldr	r3, [r5, #8]
 8000e6e:	f013 0f0c 	tst.w	r3, #12
 8000e72:	f040 8183 	bne.w	800117c <HAL_RCC_OscConfig+0x32c>
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e76:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000e7a:	fa93 f2a3 	rbit	r2, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != RESET) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000e7e:	6829      	ldr	r1, [r5, #0]
 8000e80:	fa93 f3a3 	rbit	r3, r3
 8000e84:	fab3 f383 	clz	r3, r3
 8000e88:	2201      	movs	r2, #1
 8000e8a:	f003 031f 	and.w	r3, r3, #31
 8000e8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e92:	420b      	tst	r3, r1
 8000e94:	d002      	beq.n	8000e9c <HAL_RCC_OscConfig+0x4c>
 8000e96:	69a3      	ldr	r3, [r4, #24]
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d06e      	beq.n	8000f7a <HAL_RCC_OscConfig+0x12a>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8000e9c:	4db4      	ldr	r5, [pc, #720]	; (8001170 <HAL_RCC_OscConfig+0x320>)
 8000e9e:	6a20      	ldr	r0, [r4, #32]
 8000ea0:	686b      	ldr	r3, [r5, #4]
 8000ea2:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8000ea6:	4298      	cmp	r0, r3
 8000ea8:	f240 814a 	bls.w	8001140 <HAL_RCC_OscConfig+0x2f0>
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000eac:	f7ff ff90 	bl	8000dd0 <RCC_SetFlashLatencyFromMSIRange>
 8000eb0:	2800      	cmp	r0, #0
 8000eb2:	d162      	bne.n	8000f7a <HAL_RCC_OscConfig+0x12a>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000eb4:	686b      	ldr	r3, [r5, #4]
 8000eb6:	6a22      	ldr	r2, [r4, #32]
 8000eb8:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8000ebc:	4313      	orrs	r3, r2
 8000ebe:	606b      	str	r3, [r5, #4]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000ec0:	6869      	ldr	r1, [r5, #4]
 8000ec2:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 8000ec6:	fa93 f3a3 	rbit	r3, r3
 8000eca:	fab3 f283 	clz	r2, r3
 8000ece:	69e3      	ldr	r3, [r4, #28]
 8000ed0:	4093      	lsls	r3, r2
 8000ed2:	f021 427f 	bic.w	r2, r1, #4278190080	; 0xff000000
 8000ed6:	4313      	orrs	r3, r2
 8000ed8:	606b      	str	r3, [r5, #4]
 8000eda:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8000ede:	fa93 f3a3 	rbit	r3, r3
        SystemCoreClock =  (32768U * (1U << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_BITNUMBER) + 1U))) 
 8000ee2:	fab3 f083 	clz	r0, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_BITNUMBER)];
 8000ee6:	4ba2      	ldr	r3, [pc, #648]	; (8001170 <HAL_RCC_OscConfig+0x320>)
 8000ee8:	21f0      	movs	r1, #240	; 0xf0
 8000eea:	689a      	ldr	r2, [r3, #8]
 8000eec:	fa91 f1a1 	rbit	r1, r1
 8000ef0:	fab1 f181 	clz	r1, r1
        SystemCoreClock =  (32768U * (1U << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_BITNUMBER) + 1U))) 
 8000ef4:	6a23      	ldr	r3, [r4, #32]
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_BITNUMBER)];
 8000ef6:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
        SystemCoreClock =  (32768U * (1U << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_BITNUMBER) + 1U))) 
 8000efa:	40c3      	lsrs	r3, r0
 8000efc:	1c58      	adds	r0, r3, #1
 8000efe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_BITNUMBER)];
 8000f02:	40ca      	lsrs	r2, r1
 8000f04:	499b      	ldr	r1, [pc, #620]	; (8001174 <HAL_RCC_OscConfig+0x324>)
        SystemCoreClock =  (32768U * (1U << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_BITNUMBER) + 1U))) 
 8000f06:	4083      	lsls	r3, r0
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_BITNUMBER)];
 8000f08:	5c8a      	ldrb	r2, [r1, r2]
        HAL_InitTick (TICK_INT_PRIORITY);
 8000f0a:	2000      	movs	r0, #0
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_BITNUMBER)];
 8000f0c:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1U << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_BITNUMBER) + 1U))) 
 8000f0e:	4a9a      	ldr	r2, [pc, #616]	; (8001178 <HAL_RCC_OscConfig+0x328>)
 8000f10:	6013      	str	r3, [r2, #0]
        HAL_InitTick (TICK_INT_PRIORITY);
 8000f12:	f7ff fdcd 	bl	8000ab0 <HAL_InitTick>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000f16:	6823      	ldr	r3, [r4, #0]
 8000f18:	071d      	lsls	r5, r3, #28
 8000f1a:	f100 8191 	bmi.w	8001240 <HAL_RCC_OscConfig+0x3f0>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000f1e:	6823      	ldr	r3, [r4, #0]
 8000f20:	0758      	lsls	r0, r3, #29
 8000f22:	f100 81d3 	bmi.w	80012cc <HAL_RCC_OscConfig+0x47c>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000f26:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000f28:	2a00      	cmp	r2, #0
 8000f2a:	f040 8257 	bne.w	80013dc <HAL_RCC_OscConfig+0x58c>
  return HAL_OK;
 8000f2e:	2000      	movs	r0, #0
 8000f30:	e024      	b.n	8000f7c <HAL_RCC_OscConfig+0x12c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000f32:	4b8f      	ldr	r3, [pc, #572]	; (8001170 <HAL_RCC_OscConfig+0x320>)
 8000f34:	689a      	ldr	r2, [r3, #8]
 8000f36:	f002 020c 	and.w	r2, r2, #12
 8000f3a:	2a08      	cmp	r2, #8
 8000f3c:	d007      	beq.n	8000f4e <HAL_RCC_OscConfig+0xfe>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000f3e:	689a      	ldr	r2, [r3, #8]
 8000f40:	f002 020c 	and.w	r2, r2, #12
 8000f44:	2a0c      	cmp	r2, #12
 8000f46:	d11c      	bne.n	8000f82 <HAL_RCC_OscConfig+0x132>
 8000f48:	689b      	ldr	r3, [r3, #8]
 8000f4a:	03db      	lsls	r3, r3, #15
 8000f4c:	d519      	bpl.n	8000f82 <HAL_RCC_OscConfig+0x132>
 8000f4e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f52:	fa93 f2a3 	rbit	r2, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f56:	4a86      	ldr	r2, [pc, #536]	; (8001170 <HAL_RCC_OscConfig+0x320>)
 8000f58:	6811      	ldr	r1, [r2, #0]
 8000f5a:	fa93 f3a3 	rbit	r3, r3
 8000f5e:	fab3 f383 	clz	r3, r3
 8000f62:	2201      	movs	r2, #1
 8000f64:	f003 031f 	and.w	r3, r3, #31
 8000f68:	fa02 f303 	lsl.w	r3, r2, r3
 8000f6c:	420b      	tst	r3, r1
 8000f6e:	f43f af75 	beq.w	8000e5c <HAL_RCC_OscConfig+0xc>
 8000f72:	6863      	ldr	r3, [r4, #4]
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	f47f af71 	bne.w	8000e5c <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 8000f7a:	2001      	movs	r0, #1
}
 8000f7c:	b003      	add	sp, #12
 8000f7e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f82:	6863      	ldr	r3, [r4, #4]
 8000f84:	4d7a      	ldr	r5, [pc, #488]	; (8001170 <HAL_RCC_OscConfig+0x320>)
 8000f86:	2b01      	cmp	r3, #1
 8000f88:	d120      	bne.n	8000fcc <HAL_RCC_OscConfig+0x17c>
 8000f8a:	682b      	ldr	r3, [r5, #0]
 8000f8c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f90:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000f92:	f7ff fdb5 	bl	8000b00 <HAL_GetTick>
 8000f96:	f44f 3500 	mov.w	r5, #131072	; 0x20000
 8000f9a:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f9c:	2601      	movs	r6, #1
 8000f9e:	4f74      	ldr	r7, [pc, #464]	; (8001170 <HAL_RCC_OscConfig+0x320>)
 8000fa0:	fa95 f3a5 	rbit	r3, r5
 8000fa4:	683a      	ldr	r2, [r7, #0]
 8000fa6:	fa95 f3a5 	rbit	r3, r5
 8000faa:	fab3 f383 	clz	r3, r3
 8000fae:	f003 031f 	and.w	r3, r3, #31
 8000fb2:	fa06 f303 	lsl.w	r3, r6, r3
 8000fb6:	4213      	tst	r3, r2
 8000fb8:	f47f af50 	bne.w	8000e5c <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000fbc:	f7ff fda0 	bl	8000b00 <HAL_GetTick>
 8000fc0:	eba0 0008 	sub.w	r0, r0, r8
 8000fc4:	2864      	cmp	r0, #100	; 0x64
 8000fc6:	d9eb      	bls.n	8000fa0 <HAL_RCC_OscConfig+0x150>
            return HAL_TIMEOUT;
 8000fc8:	2003      	movs	r0, #3
 8000fca:	e7d7      	b.n	8000f7c <HAL_RCC_OscConfig+0x12c>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000fcc:	bb13      	cbnz	r3, 8001014 <HAL_RCC_OscConfig+0x1c4>
 8000fce:	682b      	ldr	r3, [r5, #0]
 8000fd0:	f44f 3600 	mov.w	r6, #131072	; 0x20000
 8000fd4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000fd8:	602b      	str	r3, [r5, #0]
 8000fda:	682b      	ldr	r3, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000fdc:	2701      	movs	r7, #1
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000fde:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000fe2:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000fe4:	f7ff fd8c 	bl	8000b00 <HAL_GetTick>
 8000fe8:	4680      	mov	r8, r0
 8000fea:	fa96 f3a6 	rbit	r3, r6
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000fee:	682a      	ldr	r2, [r5, #0]
 8000ff0:	fa96 f3a6 	rbit	r3, r6
 8000ff4:	fab3 f383 	clz	r3, r3
 8000ff8:	f003 031f 	and.w	r3, r3, #31
 8000ffc:	fa07 f303 	lsl.w	r3, r7, r3
 8001000:	4213      	tst	r3, r2
 8001002:	f43f af2b 	beq.w	8000e5c <HAL_RCC_OscConfig+0xc>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001006:	f7ff fd7b 	bl	8000b00 <HAL_GetTick>
 800100a:	eba0 0008 	sub.w	r0, r0, r8
 800100e:	2864      	cmp	r0, #100	; 0x64
 8001010:	d9eb      	bls.n	8000fea <HAL_RCC_OscConfig+0x19a>
 8001012:	e7d9      	b.n	8000fc8 <HAL_RCC_OscConfig+0x178>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001014:	2b05      	cmp	r3, #5
 8001016:	682b      	ldr	r3, [r5, #0]
 8001018:	d103      	bne.n	8001022 <HAL_RCC_OscConfig+0x1d2>
 800101a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800101e:	602b      	str	r3, [r5, #0]
 8001020:	e7b3      	b.n	8000f8a <HAL_RCC_OscConfig+0x13a>
 8001022:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001026:	602b      	str	r3, [r5, #0]
 8001028:	682b      	ldr	r3, [r5, #0]
 800102a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800102e:	e7af      	b.n	8000f90 <HAL_RCC_OscConfig+0x140>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001030:	4b4f      	ldr	r3, [pc, #316]	; (8001170 <HAL_RCC_OscConfig+0x320>)
 8001032:	689a      	ldr	r2, [r3, #8]
 8001034:	f002 020c 	and.w	r2, r2, #12
 8001038:	2a04      	cmp	r2, #4
 800103a:	d007      	beq.n	800104c <HAL_RCC_OscConfig+0x1fc>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800103c:	689a      	ldr	r2, [r3, #8]
 800103e:	f002 020c 	and.w	r2, r2, #12
 8001042:	2a0c      	cmp	r2, #12
 8001044:	d124      	bne.n	8001090 <HAL_RCC_OscConfig+0x240>
 8001046:	689b      	ldr	r3, [r3, #8]
 8001048:	03df      	lsls	r7, r3, #15
 800104a:	d421      	bmi.n	8001090 <HAL_RCC_OscConfig+0x240>
 800104c:	2302      	movs	r3, #2
 800104e:	fa93 f2a3 	rbit	r2, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001052:	4a47      	ldr	r2, [pc, #284]	; (8001170 <HAL_RCC_OscConfig+0x320>)
 8001054:	6810      	ldr	r0, [r2, #0]
 8001056:	fa93 f3a3 	rbit	r3, r3
 800105a:	fab3 f383 	clz	r3, r3
 800105e:	2101      	movs	r1, #1
 8001060:	f003 031f 	and.w	r3, r3, #31
 8001064:	fa01 f303 	lsl.w	r3, r1, r3
 8001068:	4203      	tst	r3, r0
 800106a:	4613      	mov	r3, r2
 800106c:	d002      	beq.n	8001074 <HAL_RCC_OscConfig+0x224>
 800106e:	68e2      	ldr	r2, [r4, #12]
 8001070:	428a      	cmp	r2, r1
 8001072:	d182      	bne.n	8000f7a <HAL_RCC_OscConfig+0x12a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001074:	6858      	ldr	r0, [r3, #4]
 8001076:	f44f 52f8 	mov.w	r2, #7936	; 0x1f00
 800107a:	fa92 f2a2 	rbit	r2, r2
 800107e:	fab2 f182 	clz	r1, r2
 8001082:	6922      	ldr	r2, [r4, #16]
 8001084:	408a      	lsls	r2, r1
 8001086:	f420 51f8 	bic.w	r1, r0, #7936	; 0x1f00
 800108a:	430a      	orrs	r2, r1
 800108c:	605a      	str	r2, [r3, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800108e:	e6e9      	b.n	8000e64 <HAL_RCC_OscConfig+0x14>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001090:	68e2      	ldr	r2, [r4, #12]
 8001092:	2501      	movs	r5, #1
 8001094:	b382      	cbz	r2, 80010f8 <HAL_RCC_OscConfig+0x2a8>
 8001096:	fa95 f3a5 	rbit	r3, r5
        __HAL_RCC_HSI_ENABLE();
 800109a:	fab3 f383 	clz	r3, r3
 800109e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80010a2:	f503 138e 	add.w	r3, r3, #1163264	; 0x11c000
 80010a6:	009b      	lsls	r3, r3, #2
 80010a8:	601d      	str	r5, [r3, #0]
        tickstart = HAL_GetTick();
 80010aa:	f7ff fd29 	bl	8000b00 <HAL_GetTick>
 80010ae:	2702      	movs	r7, #2
 80010b0:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010b2:	4e2f      	ldr	r6, [pc, #188]	; (8001170 <HAL_RCC_OscConfig+0x320>)
 80010b4:	fa97 f3a7 	rbit	r3, r7
 80010b8:	6832      	ldr	r2, [r6, #0]
 80010ba:	fa97 f3a7 	rbit	r3, r7
 80010be:	fab3 f383 	clz	r3, r3
 80010c2:	f003 031f 	and.w	r3, r3, #31
 80010c6:	fa05 f303 	lsl.w	r3, r5, r3
 80010ca:	4213      	tst	r3, r2
 80010cc:	d00d      	beq.n	80010ea <HAL_RCC_OscConfig+0x29a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010ce:	6871      	ldr	r1, [r6, #4]
 80010d0:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 80010d4:	fa93 f3a3 	rbit	r3, r3
 80010d8:	fab3 f283 	clz	r2, r3
 80010dc:	6923      	ldr	r3, [r4, #16]
 80010de:	4093      	lsls	r3, r2
 80010e0:	f421 52f8 	bic.w	r2, r1, #7936	; 0x1f00
 80010e4:	4313      	orrs	r3, r2
 80010e6:	6073      	str	r3, [r6, #4]
 80010e8:	e6bc      	b.n	8000e64 <HAL_RCC_OscConfig+0x14>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80010ea:	f7ff fd09 	bl	8000b00 <HAL_GetTick>
 80010ee:	eba0 0008 	sub.w	r0, r0, r8
 80010f2:	2802      	cmp	r0, #2
 80010f4:	d9de      	bls.n	80010b4 <HAL_RCC_OscConfig+0x264>
 80010f6:	e767      	b.n	8000fc8 <HAL_RCC_OscConfig+0x178>
 80010f8:	fa95 f3a5 	rbit	r3, r5
        __HAL_RCC_HSI_DISABLE();
 80010fc:	fab3 f383 	clz	r3, r3
 8001100:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001104:	f503 138e 	add.w	r3, r3, #1163264	; 0x11c000
 8001108:	009b      	lsls	r3, r3, #2
 800110a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800110c:	f7ff fcf8 	bl	8000b00 <HAL_GetTick>
 8001110:	2602      	movs	r6, #2
 8001112:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001114:	4f16      	ldr	r7, [pc, #88]	; (8001170 <HAL_RCC_OscConfig+0x320>)
 8001116:	fa96 f3a6 	rbit	r3, r6
 800111a:	683a      	ldr	r2, [r7, #0]
 800111c:	fa96 f3a6 	rbit	r3, r6
 8001120:	fab3 f383 	clz	r3, r3
 8001124:	f003 031f 	and.w	r3, r3, #31
 8001128:	fa05 f303 	lsl.w	r3, r5, r3
 800112c:	4213      	tst	r3, r2
 800112e:	f43f ae99 	beq.w	8000e64 <HAL_RCC_OscConfig+0x14>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001132:	f7ff fce5 	bl	8000b00 <HAL_GetTick>
 8001136:	eba0 0008 	sub.w	r0, r0, r8
 800113a:	2802      	cmp	r0, #2
 800113c:	d9eb      	bls.n	8001116 <HAL_RCC_OscConfig+0x2c6>
 800113e:	e743      	b.n	8000fc8 <HAL_RCC_OscConfig+0x178>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001140:	686b      	ldr	r3, [r5, #4]
 8001142:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8001146:	4303      	orrs	r3, r0
 8001148:	606b      	str	r3, [r5, #4]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800114a:	6869      	ldr	r1, [r5, #4]
 800114c:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 8001150:	fa93 f3a3 	rbit	r3, r3
 8001154:	fab3 f283 	clz	r2, r3
 8001158:	69e3      	ldr	r3, [r4, #28]
 800115a:	4093      	lsls	r3, r2
 800115c:	f021 427f 	bic.w	r2, r1, #4278190080	; 0xff000000
 8001160:	4313      	orrs	r3, r2
 8001162:	606b      	str	r3, [r5, #4]
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001164:	f7ff fe34 	bl	8000dd0 <RCC_SetFlashLatencyFromMSIRange>
 8001168:	2800      	cmp	r0, #0
 800116a:	f43f aeb6 	beq.w	8000eda <HAL_RCC_OscConfig+0x8a>
 800116e:	e704      	b.n	8000f7a <HAL_RCC_OscConfig+0x12a>
 8001170:	40023800 	.word	0x40023800
 8001174:	080044de 	.word	0x080044de
 8001178:	20000000 	.word	0x20000000
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800117c:	69a2      	ldr	r2, [r4, #24]
 800117e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001182:	2a00      	cmp	r2, #0
 8001184:	d037      	beq.n	80011f6 <HAL_RCC_OscConfig+0x3a6>
 8001186:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_MSI_ENABLE();
 800118a:	fab3 f383 	clz	r3, r3
 800118e:	2601      	movs	r6, #1
 8001190:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001194:	f503 138e 	add.w	r3, r3, #1163264	; 0x11c000
 8001198:	009b      	lsls	r3, r3, #2
 800119a:	601e      	str	r6, [r3, #0]
        tickstart = HAL_GetTick();
 800119c:	f7ff fcb0 	bl	8000b00 <HAL_GetTick>
 80011a0:	f44f 7700 	mov.w	r7, #512	; 0x200
 80011a4:	4680      	mov	r8, r0
 80011a6:	fa97 f3a7 	rbit	r3, r7
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == RESET)
 80011aa:	682a      	ldr	r2, [r5, #0]
 80011ac:	fa97 f3a7 	rbit	r3, r7
 80011b0:	fab3 f383 	clz	r3, r3
 80011b4:	f003 031f 	and.w	r3, r3, #31
 80011b8:	fa06 f303 	lsl.w	r3, r6, r3
 80011bc:	4213      	tst	r3, r2
 80011be:	d013      	beq.n	80011e8 <HAL_RCC_OscConfig+0x398>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80011c0:	686b      	ldr	r3, [r5, #4]
 80011c2:	6a22      	ldr	r2, [r4, #32]
 80011c4:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80011c8:	4313      	orrs	r3, r2
 80011ca:	606b      	str	r3, [r5, #4]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80011cc:	6869      	ldr	r1, [r5, #4]
 80011ce:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 80011d2:	fa93 f3a3 	rbit	r3, r3
 80011d6:	fab3 f283 	clz	r2, r3
 80011da:	69e3      	ldr	r3, [r4, #28]
 80011dc:	4093      	lsls	r3, r2
 80011de:	f021 427f 	bic.w	r2, r1, #4278190080	; 0xff000000
 80011e2:	4313      	orrs	r3, r2
 80011e4:	606b      	str	r3, [r5, #4]
 80011e6:	e696      	b.n	8000f16 <HAL_RCC_OscConfig+0xc6>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80011e8:	f7ff fc8a 	bl	8000b00 <HAL_GetTick>
 80011ec:	eba0 0008 	sub.w	r0, r0, r8
 80011f0:	2802      	cmp	r0, #2
 80011f2:	d9d8      	bls.n	80011a6 <HAL_RCC_OscConfig+0x356>
 80011f4:	e6e8      	b.n	8000fc8 <HAL_RCC_OscConfig+0x178>
 80011f6:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_MSI_DISABLE();
 80011fa:	fab3 f383 	clz	r3, r3
 80011fe:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001202:	f503 138e 	add.w	r3, r3, #1163264	; 0x11c000
 8001206:	009b      	lsls	r3, r3, #2
 8001208:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800120a:	f7ff fc79 	bl	8000b00 <HAL_GetTick>
 800120e:	f44f 7600 	mov.w	r6, #512	; 0x200
 8001212:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != RESET)
 8001214:	2701      	movs	r7, #1
 8001216:	fa96 f3a6 	rbit	r3, r6
 800121a:	682a      	ldr	r2, [r5, #0]
 800121c:	fa96 f3a6 	rbit	r3, r6
 8001220:	fab3 f383 	clz	r3, r3
 8001224:	f003 031f 	and.w	r3, r3, #31
 8001228:	fa07 f303 	lsl.w	r3, r7, r3
 800122c:	4213      	tst	r3, r2
 800122e:	f43f ae72 	beq.w	8000f16 <HAL_RCC_OscConfig+0xc6>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001232:	f7ff fc65 	bl	8000b00 <HAL_GetTick>
 8001236:	eba0 0008 	sub.w	r0, r0, r8
 800123a:	2802      	cmp	r0, #2
 800123c:	d9eb      	bls.n	8001216 <HAL_RCC_OscConfig+0x3c6>
 800123e:	e6c3      	b.n	8000fc8 <HAL_RCC_OscConfig+0x178>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001240:	6962      	ldr	r2, [r4, #20]
 8001242:	2501      	movs	r5, #1
 8001244:	49a9      	ldr	r1, [pc, #676]	; (80014ec <HAL_RCC_OscConfig+0x69c>)
 8001246:	b302      	cbz	r2, 800128a <HAL_RCC_OscConfig+0x43a>
 8001248:	fa95 f3a5 	rbit	r3, r5
      __HAL_RCC_LSI_ENABLE();
 800124c:	fab3 f383 	clz	r3, r3
 8001250:	440b      	add	r3, r1
 8001252:	009b      	lsls	r3, r3, #2
 8001254:	601d      	str	r5, [r3, #0]
      tickstart = HAL_GetTick();
 8001256:	f7ff fc53 	bl	8000b00 <HAL_GetTick>
 800125a:	2602      	movs	r6, #2
 800125c:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800125e:	4fa4      	ldr	r7, [pc, #656]	; (80014f0 <HAL_RCC_OscConfig+0x6a0>)
 8001260:	fa96 f3a6 	rbit	r3, r6
 8001264:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001266:	fa96 f3a6 	rbit	r3, r6
 800126a:	fab3 f383 	clz	r3, r3
 800126e:	f003 031f 	and.w	r3, r3, #31
 8001272:	fa05 f303 	lsl.w	r3, r5, r3
 8001276:	4213      	tst	r3, r2
 8001278:	f47f ae51 	bne.w	8000f1e <HAL_RCC_OscConfig+0xce>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800127c:	f7ff fc40 	bl	8000b00 <HAL_GetTick>
 8001280:	eba0 0008 	sub.w	r0, r0, r8
 8001284:	2802      	cmp	r0, #2
 8001286:	d9eb      	bls.n	8001260 <HAL_RCC_OscConfig+0x410>
 8001288:	e69e      	b.n	8000fc8 <HAL_RCC_OscConfig+0x178>
 800128a:	fa95 f3a5 	rbit	r3, r5
      __HAL_RCC_LSI_DISABLE();
 800128e:	fab3 f383 	clz	r3, r3
 8001292:	440b      	add	r3, r1
 8001294:	009b      	lsls	r3, r3, #2
 8001296:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001298:	f7ff fc32 	bl	8000b00 <HAL_GetTick>
 800129c:	2602      	movs	r6, #2
 800129e:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80012a0:	4f93      	ldr	r7, [pc, #588]	; (80014f0 <HAL_RCC_OscConfig+0x6a0>)
 80012a2:	fa96 f3a6 	rbit	r3, r6
 80012a6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80012a8:	fa96 f3a6 	rbit	r3, r6
 80012ac:	fab3 f383 	clz	r3, r3
 80012b0:	f003 031f 	and.w	r3, r3, #31
 80012b4:	fa05 f303 	lsl.w	r3, r5, r3
 80012b8:	4213      	tst	r3, r2
 80012ba:	f43f ae30 	beq.w	8000f1e <HAL_RCC_OscConfig+0xce>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80012be:	f7ff fc1f 	bl	8000b00 <HAL_GetTick>
 80012c2:	eba0 0008 	sub.w	r0, r0, r8
 80012c6:	2802      	cmp	r0, #2
 80012c8:	d9eb      	bls.n	80012a2 <HAL_RCC_OscConfig+0x452>
 80012ca:	e67d      	b.n	8000fc8 <HAL_RCC_OscConfig+0x178>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80012cc:	4b88      	ldr	r3, [pc, #544]	; (80014f0 <HAL_RCC_OscConfig+0x6a0>)
 80012ce:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80012d0:	00d1      	lsls	r1, r2, #3
 80012d2:	d434      	bmi.n	800133e <HAL_RCC_OscConfig+0x4ee>
      pwrclkchanged = SET;
 80012d4:	2601      	movs	r6, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 80012d6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80012d8:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80012dc:	625a      	str	r2, [r3, #36]	; 0x24
 80012de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012e4:	9301      	str	r3, [sp, #4]
 80012e6:	9b01      	ldr	r3, [sp, #4]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012e8:	4d82      	ldr	r5, [pc, #520]	; (80014f4 <HAL_RCC_OscConfig+0x6a4>)
 80012ea:	682b      	ldr	r3, [r5, #0]
 80012ec:	05da      	lsls	r2, r3, #23
 80012ee:	d528      	bpl.n	8001342 <HAL_RCC_OscConfig+0x4f2>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80012f0:	68a3      	ldr	r3, [r4, #8]
 80012f2:	4d7f      	ldr	r5, [pc, #508]	; (80014f0 <HAL_RCC_OscConfig+0x6a0>)
 80012f4:	2b01      	cmp	r3, #1
 80012f6:	d134      	bne.n	8001362 <HAL_RCC_OscConfig+0x512>
 80012f8:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 80012fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012fe:	636b      	str	r3, [r5, #52]	; 0x34
      tickstart = HAL_GetTick();
 8001300:	f7ff fbfe 	bl	8000b00 <HAL_GetTick>
 8001304:	f44f 7500 	mov.w	r5, #512	; 0x200
 8001308:	4681      	mov	r9, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800130a:	2701      	movs	r7, #1
 800130c:	f8df 81e0 	ldr.w	r8, [pc, #480]	; 80014f0 <HAL_RCC_OscConfig+0x6a0>
 8001310:	fa95 f3a5 	rbit	r3, r5
 8001314:	f8d8 2034 	ldr.w	r2, [r8, #52]	; 0x34
 8001318:	fa95 f3a5 	rbit	r3, r5
 800131c:	fab3 f383 	clz	r3, r3
 8001320:	f003 031f 	and.w	r3, r3, #31
 8001324:	fa07 f303 	lsl.w	r3, r7, r3
 8001328:	4213      	tst	r3, r2
 800132a:	d04e      	beq.n	80013ca <HAL_RCC_OscConfig+0x57a>
    if(pwrclkchanged == SET)
 800132c:	2e00      	cmp	r6, #0
 800132e:	f43f adfa 	beq.w	8000f26 <HAL_RCC_OscConfig+0xd6>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001332:	4a6f      	ldr	r2, [pc, #444]	; (80014f0 <HAL_RCC_OscConfig+0x6a0>)
 8001334:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8001336:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800133a:	6253      	str	r3, [r2, #36]	; 0x24
 800133c:	e5f3      	b.n	8000f26 <HAL_RCC_OscConfig+0xd6>
    FlagStatus       pwrclkchanged = RESET;
 800133e:	2600      	movs	r6, #0
 8001340:	e7d2      	b.n	80012e8 <HAL_RCC_OscConfig+0x498>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001342:	682b      	ldr	r3, [r5, #0]
 8001344:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001348:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 800134a:	f7ff fbd9 	bl	8000b00 <HAL_GetTick>
 800134e:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001350:	682b      	ldr	r3, [r5, #0]
 8001352:	05db      	lsls	r3, r3, #23
 8001354:	d4cc      	bmi.n	80012f0 <HAL_RCC_OscConfig+0x4a0>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001356:	f7ff fbd3 	bl	8000b00 <HAL_GetTick>
 800135a:	1bc0      	subs	r0, r0, r7
 800135c:	2864      	cmp	r0, #100	; 0x64
 800135e:	d9f7      	bls.n	8001350 <HAL_RCC_OscConfig+0x500>
 8001360:	e632      	b.n	8000fc8 <HAL_RCC_OscConfig+0x178>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001362:	bb23      	cbnz	r3, 80013ae <HAL_RCC_OscConfig+0x55e>
 8001364:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8001366:	f44f 7700 	mov.w	r7, #512	; 0x200
 800136a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800136e:	636b      	str	r3, [r5, #52]	; 0x34
 8001370:	6b6b      	ldr	r3, [r5, #52]	; 0x34
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001372:	f04f 0801 	mov.w	r8, #1
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001376:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800137a:	636b      	str	r3, [r5, #52]	; 0x34
      tickstart = HAL_GetTick();
 800137c:	f7ff fbc0 	bl	8000b00 <HAL_GetTick>
 8001380:	4681      	mov	r9, r0
 8001382:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001386:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8001388:	fa97 f3a7 	rbit	r3, r7
 800138c:	fab3 f383 	clz	r3, r3
 8001390:	f003 031f 	and.w	r3, r3, #31
 8001394:	fa08 f303 	lsl.w	r3, r8, r3
 8001398:	4213      	tst	r3, r2
 800139a:	d0c7      	beq.n	800132c <HAL_RCC_OscConfig+0x4dc>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800139c:	f7ff fbb0 	bl	8000b00 <HAL_GetTick>
 80013a0:	f241 3388 	movw	r3, #5000	; 0x1388
 80013a4:	eba0 0009 	sub.w	r0, r0, r9
 80013a8:	4298      	cmp	r0, r3
 80013aa:	d9ea      	bls.n	8001382 <HAL_RCC_OscConfig+0x532>
 80013ac:	e60c      	b.n	8000fc8 <HAL_RCC_OscConfig+0x178>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80013ae:	2b05      	cmp	r3, #5
 80013b0:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 80013b2:	d103      	bne.n	80013bc <HAL_RCC_OscConfig+0x56c>
 80013b4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80013b8:	636b      	str	r3, [r5, #52]	; 0x34
 80013ba:	e79d      	b.n	80012f8 <HAL_RCC_OscConfig+0x4a8>
 80013bc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80013c0:	636b      	str	r3, [r5, #52]	; 0x34
 80013c2:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 80013c4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80013c8:	e799      	b.n	80012fe <HAL_RCC_OscConfig+0x4ae>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80013ca:	f7ff fb99 	bl	8000b00 <HAL_GetTick>
 80013ce:	f241 3388 	movw	r3, #5000	; 0x1388
 80013d2:	eba0 0009 	sub.w	r0, r0, r9
 80013d6:	4298      	cmp	r0, r3
 80013d8:	d99a      	bls.n	8001310 <HAL_RCC_OscConfig+0x4c0>
 80013da:	e5f5      	b.n	8000fc8 <HAL_RCC_OscConfig+0x178>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80013dc:	4d44      	ldr	r5, [pc, #272]	; (80014f0 <HAL_RCC_OscConfig+0x6a0>)
 80013de:	68ab      	ldr	r3, [r5, #8]
 80013e0:	f003 030c 	and.w	r3, r3, #12
 80013e4:	2b0c      	cmp	r3, #12
 80013e6:	f43f adc8 	beq.w	8000f7a <HAL_RCC_OscConfig+0x12a>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80013ea:	2a02      	cmp	r2, #2
 80013ec:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80013f0:	d156      	bne.n	80014a0 <HAL_RCC_OscConfig+0x650>
 80013f2:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 80013f6:	fab3 f383 	clz	r3, r3
 80013fa:	2200      	movs	r2, #0
 80013fc:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001400:	f503 138e 	add.w	r3, r3, #1163264	; 0x11c000
 8001404:	009b      	lsls	r3, r3, #2
 8001406:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001408:	f7ff fb7a 	bl	8000b00 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800140c:	462e      	mov	r6, r5
        tickstart = HAL_GetTick();
 800140e:	4680      	mov	r8, r0
 8001410:	f04f 7700 	mov.w	r7, #33554432	; 0x2000000
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001414:	2501      	movs	r5, #1
 8001416:	fa97 f3a7 	rbit	r3, r7
 800141a:	6832      	ldr	r2, [r6, #0]
 800141c:	fa97 f3a7 	rbit	r3, r7
 8001420:	fab3 f383 	clz	r3, r3
 8001424:	f003 031f 	and.w	r3, r3, #31
 8001428:	fa05 f303 	lsl.w	r3, r5, r3
 800142c:	4213      	tst	r3, r2
 800142e:	d130      	bne.n	8001492 <HAL_RCC_OscConfig+0x642>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001430:	68b2      	ldr	r2, [r6, #8]
 8001432:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001434:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8001436:	f422 027d 	bic.w	r2, r2, #16580608	; 0xfd0000
 800143a:	430b      	orrs	r3, r1
 800143c:	4313      	orrs	r3, r2
 800143e:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8001440:	4313      	orrs	r3, r2
 8001442:	60b3      	str	r3, [r6, #8]
 8001444:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001448:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_ENABLE();
 800144c:	fab3 f383 	clz	r3, r3
 8001450:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001454:	f503 138e 	add.w	r3, r3, #1163264	; 0x11c000
 8001458:	009b      	lsls	r3, r3, #2
 800145a:	601d      	str	r5, [r3, #0]
        tickstart = HAL_GetTick();
 800145c:	f7ff fb50 	bl	8000b00 <HAL_GetTick>
 8001460:	f04f 7400 	mov.w	r4, #33554432	; 0x2000000
 8001464:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001466:	2501      	movs	r5, #1
 8001468:	4e21      	ldr	r6, [pc, #132]	; (80014f0 <HAL_RCC_OscConfig+0x6a0>)
 800146a:	fa94 f3a4 	rbit	r3, r4
 800146e:	6832      	ldr	r2, [r6, #0]
 8001470:	fa94 f3a4 	rbit	r3, r4
 8001474:	fab3 f383 	clz	r3, r3
 8001478:	f003 031f 	and.w	r3, r3, #31
 800147c:	fa05 f303 	lsl.w	r3, r5, r3
 8001480:	4213      	tst	r3, r2
 8001482:	f47f ad54 	bne.w	8000f2e <HAL_RCC_OscConfig+0xde>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001486:	f7ff fb3b 	bl	8000b00 <HAL_GetTick>
 800148a:	1bc0      	subs	r0, r0, r7
 800148c:	2802      	cmp	r0, #2
 800148e:	d9ec      	bls.n	800146a <HAL_RCC_OscConfig+0x61a>
 8001490:	e59a      	b.n	8000fc8 <HAL_RCC_OscConfig+0x178>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001492:	f7ff fb35 	bl	8000b00 <HAL_GetTick>
 8001496:	eba0 0008 	sub.w	r0, r0, r8
 800149a:	2802      	cmp	r0, #2
 800149c:	d9bb      	bls.n	8001416 <HAL_RCC_OscConfig+0x5c6>
 800149e:	e593      	b.n	8000fc8 <HAL_RCC_OscConfig+0x178>
 80014a0:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 80014a4:	fab3 f383 	clz	r3, r3
 80014a8:	2200      	movs	r2, #0
 80014aa:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80014ae:	f503 138e 	add.w	r3, r3, #1163264	; 0x11c000
 80014b2:	009b      	lsls	r3, r3, #2
 80014b4:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80014b6:	f7ff fb23 	bl	8000b00 <HAL_GetTick>
 80014ba:	f04f 7400 	mov.w	r4, #33554432	; 0x2000000
 80014be:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80014c0:	2601      	movs	r6, #1
 80014c2:	fa94 f3a4 	rbit	r3, r4
 80014c6:	682a      	ldr	r2, [r5, #0]
 80014c8:	fa94 f3a4 	rbit	r3, r4
 80014cc:	fab3 f383 	clz	r3, r3
 80014d0:	f003 031f 	and.w	r3, r3, #31
 80014d4:	fa06 f303 	lsl.w	r3, r6, r3
 80014d8:	4213      	tst	r3, r2
 80014da:	f43f ad28 	beq.w	8000f2e <HAL_RCC_OscConfig+0xde>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80014de:	f7ff fb0f 	bl	8000b00 <HAL_GetTick>
 80014e2:	1bc0      	subs	r0, r0, r7
 80014e4:	2802      	cmp	r0, #2
 80014e6:	d9ec      	bls.n	80014c2 <HAL_RCC_OscConfig+0x672>
 80014e8:	e56e      	b.n	8000fc8 <HAL_RCC_OscConfig+0x178>
 80014ea:	bf00      	nop
 80014ec:	1091c1a0 	.word	0x1091c1a0
 80014f0:	40023800 	.word	0x40023800
 80014f4:	40007000 	.word	0x40007000

080014f8 <HAL_RCC_GetSysClockFreq>:
  tmpreg = RCC->CFGR;
 80014f8:	491e      	ldr	r1, [pc, #120]	; (8001574 <HAL_RCC_GetSysClockFreq+0x7c>)
{
 80014fa:	b510      	push	{r4, lr}
  tmpreg = RCC->CFGR;
 80014fc:	688b      	ldr	r3, [r1, #8]
  switch (tmpreg & RCC_CFGR_SWS)
 80014fe:	f003 020c 	and.w	r2, r3, #12
 8001502:	2a08      	cmp	r2, #8
 8001504:	d005      	beq.n	8001512 <HAL_RCC_GetSysClockFreq+0x1a>
 8001506:	2a0c      	cmp	r2, #12
 8001508:	d005      	beq.n	8001516 <HAL_RCC_GetSysClockFreq+0x1e>
 800150a:	2a04      	cmp	r2, #4
 800150c:	d122      	bne.n	8001554 <HAL_RCC_GetSysClockFreq+0x5c>
      sysclockfreq = HSI_VALUE;
 800150e:	481a      	ldr	r0, [pc, #104]	; (8001578 <HAL_RCC_GetSysClockFreq+0x80>)
}
 8001510:	bd10      	pop	{r4, pc}
      sysclockfreq = HSE_VALUE;
 8001512:	481a      	ldr	r0, [pc, #104]	; (800157c <HAL_RCC_GetSysClockFreq+0x84>)
 8001514:	bd10      	pop	{r4, pc}
 8001516:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 800151a:	fa92 f2a2 	rbit	r2, r2
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 800151e:	fab2 f282 	clz	r2, r2
 8001522:	f403 1070 	and.w	r0, r3, #3932160	; 0x3c0000
 8001526:	fa20 f202 	lsr.w	r2, r0, r2
 800152a:	4815      	ldr	r0, [pc, #84]	; (8001580 <HAL_RCC_GetSysClockFreq+0x88>)
 800152c:	5c84      	ldrb	r4, [r0, r2]
 800152e:	f44f 0040 	mov.w	r0, #12582912	; 0xc00000
 8001532:	fa90 f0a0 	rbit	r0, r0
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_BITNUMBER) + 1U;
 8001536:	fab0 f280 	clz	r2, r0
 800153a:	f403 0040 	and.w	r0, r3, #12582912	; 0xc00000
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800153e:	688b      	ldr	r3, [r1, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_BITNUMBER) + 1U;
 8001540:	40d0      	lsrs	r0, r2
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001542:	03db      	lsls	r3, r3, #15
        pllvco = (HSE_VALUE * pllm) / plld;
 8001544:	bf4c      	ite	mi
 8001546:	4b0d      	ldrmi	r3, [pc, #52]	; (800157c <HAL_RCC_GetSysClockFreq+0x84>)
        pllvco = (HSI_VALUE * pllm) / plld;
 8001548:	4b0b      	ldrpl	r3, [pc, #44]	; (8001578 <HAL_RCC_GetSysClockFreq+0x80>)
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_BITNUMBER) + 1U;
 800154a:	3001      	adds	r0, #1
        pllvco = (HSI_VALUE * pllm) / plld;
 800154c:	4363      	muls	r3, r4
 800154e:	fbb3 f0f0 	udiv	r0, r3, r0
 8001552:	bd10      	pop	{r4, pc}
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_BITNUMBER;
 8001554:	6848      	ldr	r0, [r1, #4]
 8001556:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 800155a:	fa93 f3a3 	rbit	r3, r3
 800155e:	fab3 f383 	clz	r3, r3
 8001562:	f400 4060 	and.w	r0, r0, #57344	; 0xe000
 8001566:	40d8      	lsrs	r0, r3
      sysclockfreq = (32768U * (1U << (msiclkrange + 1U)));
 8001568:	1c43      	adds	r3, r0, #1
 800156a:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800156e:	4098      	lsls	r0, r3
 8001570:	bd10      	pop	{r4, pc}
 8001572:	bf00      	nop
 8001574:	40023800 	.word	0x40023800
 8001578:	00f42400 	.word	0x00f42400
 800157c:	007a1200 	.word	0x007a1200
 8001580:	080044f6 	.word	0x080044f6

08001584 <HAL_RCC_ClockConfig>:
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001584:	4b6a      	ldr	r3, [pc, #424]	; (8001730 <HAL_RCC_ClockConfig+0x1ac>)
{
 8001586:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 800158a:	681a      	ldr	r2, [r3, #0]
{
 800158c:	4606      	mov	r6, r0
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 800158e:	f002 0201 	and.w	r2, r2, #1
 8001592:	428a      	cmp	r2, r1
{
 8001594:	460d      	mov	r5, r1
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001596:	d330      	bcc.n	80015fa <HAL_RCC_ClockConfig+0x76>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001598:	6832      	ldr	r2, [r6, #0]
 800159a:	0794      	lsls	r4, r2, #30
 800159c:	d440      	bmi.n	8001620 <HAL_RCC_ClockConfig+0x9c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800159e:	07d0      	lsls	r0, r2, #31
 80015a0:	d446      	bmi.n	8001630 <HAL_RCC_ClockConfig+0xac>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 80015a2:	4b63      	ldr	r3, [pc, #396]	; (8001730 <HAL_RCC_ClockConfig+0x1ac>)
 80015a4:	681a      	ldr	r2, [r3, #0]
 80015a6:	f002 0201 	and.w	r2, r2, #1
 80015aa:	4295      	cmp	r5, r2
 80015ac:	f0c0 80ae 	bcc.w	800170c <HAL_RCC_ClockConfig+0x188>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015b0:	6832      	ldr	r2, [r6, #0]
 80015b2:	0751      	lsls	r1, r2, #29
 80015b4:	f100 80b3 	bmi.w	800171e <HAL_RCC_ClockConfig+0x19a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80015b8:	0713      	lsls	r3, r2, #28
 80015ba:	d507      	bpl.n	80015cc <HAL_RCC_ClockConfig+0x48>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80015bc:	4a5d      	ldr	r2, [pc, #372]	; (8001734 <HAL_RCC_ClockConfig+0x1b0>)
 80015be:	6931      	ldr	r1, [r6, #16]
 80015c0:	6893      	ldr	r3, [r2, #8]
 80015c2:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 80015c6:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80015ca:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80015cc:	f7ff ff94 	bl	80014f8 <HAL_RCC_GetSysClockFreq>
 80015d0:	4b58      	ldr	r3, [pc, #352]	; (8001734 <HAL_RCC_ClockConfig+0x1b0>)
 80015d2:	22f0      	movs	r2, #240	; 0xf0
 80015d4:	689b      	ldr	r3, [r3, #8]
 80015d6:	fa92 f2a2 	rbit	r2, r2
 80015da:	fab2 f282 	clz	r2, r2
 80015de:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80015e2:	40d3      	lsrs	r3, r2
 80015e4:	4a54      	ldr	r2, [pc, #336]	; (8001738 <HAL_RCC_ClockConfig+0x1b4>)
 80015e6:	5cd3      	ldrb	r3, [r2, r3]
 80015e8:	40d8      	lsrs	r0, r3
 80015ea:	4b54      	ldr	r3, [pc, #336]	; (800173c <HAL_RCC_ClockConfig+0x1b8>)
 80015ec:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 80015ee:	2000      	movs	r0, #0
 80015f0:	f7ff fa5e 	bl	8000ab0 <HAL_InitTick>
  return HAL_OK;
 80015f4:	2000      	movs	r0, #0
}
 80015f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015fa:	2901      	cmp	r1, #1
 80015fc:	bf02      	ittt	eq
 80015fe:	681a      	ldreq	r2, [r3, #0]
 8001600:	f042 0204 	orreq.w	r2, r2, #4
 8001604:	601a      	streq	r2, [r3, #0]
 8001606:	681a      	ldr	r2, [r3, #0]
 8001608:	f022 0201 	bic.w	r2, r2, #1
 800160c:	430a      	orrs	r2, r1
 800160e:	601a      	str	r2, [r3, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	f003 0301 	and.w	r3, r3, #1
 8001616:	4299      	cmp	r1, r3
 8001618:	d0be      	beq.n	8001598 <HAL_RCC_ClockConfig+0x14>
      return HAL_ERROR;
 800161a:	2001      	movs	r0, #1
 800161c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001620:	4944      	ldr	r1, [pc, #272]	; (8001734 <HAL_RCC_ClockConfig+0x1b0>)
 8001622:	68b0      	ldr	r0, [r6, #8]
 8001624:	688b      	ldr	r3, [r1, #8]
 8001626:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800162a:	4303      	orrs	r3, r0
 800162c:	608b      	str	r3, [r1, #8]
 800162e:	e7b6      	b.n	800159e <HAL_RCC_ClockConfig+0x1a>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001630:	6872      	ldr	r2, [r6, #4]
 8001632:	4940      	ldr	r1, [pc, #256]	; (8001734 <HAL_RCC_ClockConfig+0x1b0>)
 8001634:	2a02      	cmp	r2, #2
 8001636:	d10f      	bne.n	8001658 <HAL_RCC_ClockConfig+0xd4>
 8001638:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800163c:	fa93 f0a3 	rbit	r0, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == RESET)
 8001640:	6808      	ldr	r0, [r1, #0]
 8001642:	fa93 f3a3 	rbit	r3, r3
 8001646:	fab3 f383 	clz	r3, r3
 800164a:	2101      	movs	r1, #1
 800164c:	f003 031f 	and.w	r3, r3, #31
 8001650:	fa01 f303 	lsl.w	r3, r1, r3
 8001654:	4203      	tst	r3, r0
 8001656:	e013      	b.n	8001680 <HAL_RCC_ClockConfig+0xfc>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001658:	2a03      	cmp	r2, #3
 800165a:	d102      	bne.n	8001662 <HAL_RCC_ClockConfig+0xde>
 800165c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001660:	e7ec      	b.n	800163c <HAL_RCC_ClockConfig+0xb8>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001662:	2a01      	cmp	r2, #1
 8001664:	d129      	bne.n	80016ba <HAL_RCC_ClockConfig+0x136>
 8001666:	2302      	movs	r3, #2
 8001668:	fa93 f0a3 	rbit	r0, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800166c:	6809      	ldr	r1, [r1, #0]
 800166e:	fa93 f3a3 	rbit	r3, r3
 8001672:	fab3 f383 	clz	r3, r3
 8001676:	f003 031f 	and.w	r3, r3, #31
 800167a:	fa02 f303 	lsl.w	r3, r2, r3
 800167e:	420b      	tst	r3, r1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == RESET)
 8001680:	d0cb      	beq.n	800161a <HAL_RCC_ClockConfig+0x96>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001682:	4c2c      	ldr	r4, [pc, #176]	; (8001734 <HAL_RCC_ClockConfig+0x1b0>)
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001684:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001688:	68a3      	ldr	r3, [r4, #8]
 800168a:	f023 0303 	bic.w	r3, r3, #3
 800168e:	431a      	orrs	r2, r3
 8001690:	60a2      	str	r2, [r4, #8]
    tickstart = HAL_GetTick();
 8001692:	f7ff fa35 	bl	8000b00 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001696:	6873      	ldr	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8001698:	4607      	mov	r7, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800169a:	2b02      	cmp	r3, #2
 800169c:	d110      	bne.n	80016c0 <HAL_RCC_ClockConfig+0x13c>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800169e:	68a3      	ldr	r3, [r4, #8]
 80016a0:	f003 030c 	and.w	r3, r3, #12
 80016a4:	2b08      	cmp	r3, #8
 80016a6:	f43f af7c 	beq.w	80015a2 <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80016aa:	f7ff fa29 	bl	8000b00 <HAL_GetTick>
 80016ae:	1bc0      	subs	r0, r0, r7
 80016b0:	4540      	cmp	r0, r8
 80016b2:	d9f4      	bls.n	800169e <HAL_RCC_ClockConfig+0x11a>
          return HAL_TIMEOUT;
 80016b4:	2003      	movs	r0, #3
 80016b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80016ba:	f44f 7300 	mov.w	r3, #512	; 0x200
 80016be:	e7bd      	b.n	800163c <HAL_RCC_ClockConfig+0xb8>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80016c0:	2b03      	cmp	r3, #3
 80016c2:	d10b      	bne.n	80016dc <HAL_RCC_ClockConfig+0x158>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80016c4:	68a3      	ldr	r3, [r4, #8]
 80016c6:	f003 030c 	and.w	r3, r3, #12
 80016ca:	2b0c      	cmp	r3, #12
 80016cc:	f43f af69 	beq.w	80015a2 <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80016d0:	f7ff fa16 	bl	8000b00 <HAL_GetTick>
 80016d4:	1bc0      	subs	r0, r0, r7
 80016d6:	4540      	cmp	r0, r8
 80016d8:	d9f4      	bls.n	80016c4 <HAL_RCC_ClockConfig+0x140>
 80016da:	e7eb      	b.n	80016b4 <HAL_RCC_ClockConfig+0x130>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80016dc:	2b01      	cmp	r3, #1
 80016de:	d110      	bne.n	8001702 <HAL_RCC_ClockConfig+0x17e>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80016e0:	68a3      	ldr	r3, [r4, #8]
 80016e2:	f003 030c 	and.w	r3, r3, #12
 80016e6:	2b04      	cmp	r3, #4
 80016e8:	f43f af5b 	beq.w	80015a2 <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80016ec:	f7ff fa08 	bl	8000b00 <HAL_GetTick>
 80016f0:	1bc0      	subs	r0, r0, r7
 80016f2:	4540      	cmp	r0, r8
 80016f4:	d9f4      	bls.n	80016e0 <HAL_RCC_ClockConfig+0x15c>
 80016f6:	e7dd      	b.n	80016b4 <HAL_RCC_ClockConfig+0x130>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80016f8:	f7ff fa02 	bl	8000b00 <HAL_GetTick>
 80016fc:	1bc0      	subs	r0, r0, r7
 80016fe:	4540      	cmp	r0, r8
 8001700:	d8d8      	bhi.n	80016b4 <HAL_RCC_ClockConfig+0x130>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8001702:	68a3      	ldr	r3, [r4, #8]
 8001704:	f013 0f0c 	tst.w	r3, #12
 8001708:	d1f6      	bne.n	80016f8 <HAL_RCC_ClockConfig+0x174>
 800170a:	e74a      	b.n	80015a2 <HAL_RCC_ClockConfig+0x1e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800170c:	681a      	ldr	r2, [r3, #0]
 800170e:	f022 0201 	bic.w	r2, r2, #1
 8001712:	601a      	str	r2, [r3, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	07da      	lsls	r2, r3, #31
 8001718:	f53f af7f 	bmi.w	800161a <HAL_RCC_ClockConfig+0x96>
 800171c:	e748      	b.n	80015b0 <HAL_RCC_ClockConfig+0x2c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800171e:	4905      	ldr	r1, [pc, #20]	; (8001734 <HAL_RCC_ClockConfig+0x1b0>)
 8001720:	68f0      	ldr	r0, [r6, #12]
 8001722:	688b      	ldr	r3, [r1, #8]
 8001724:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001728:	4303      	orrs	r3, r0
 800172a:	608b      	str	r3, [r1, #8]
 800172c:	e744      	b.n	80015b8 <HAL_RCC_ClockConfig+0x34>
 800172e:	bf00      	nop
 8001730:	40023c00 	.word	0x40023c00
 8001734:	40023800 	.word	0x40023800
 8001738:	080044de 	.word	0x080044de
 800173c:	20000000 	.word	0x20000000

08001740 <HAL_RCC_GetHCLKFreq>:
}
 8001740:	4b01      	ldr	r3, [pc, #4]	; (8001748 <HAL_RCC_GetHCLKFreq+0x8>)
 8001742:	6818      	ldr	r0, [r3, #0]
 8001744:	4770      	bx	lr
 8001746:	bf00      	nop
 8001748:	20000000 	.word	0x20000000

0800174c <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 800174c:	4b08      	ldr	r3, [pc, #32]	; (8001770 <HAL_RCC_GetPCLK1Freq+0x24>)
 800174e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001752:	689b      	ldr	r3, [r3, #8]
 8001754:	fa92 f2a2 	rbit	r2, r2
 8001758:	fab2 f282 	clz	r2, r2
 800175c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001760:	40d3      	lsrs	r3, r2
 8001762:	4a04      	ldr	r2, [pc, #16]	; (8001774 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001764:	5cd3      	ldrb	r3, [r2, r3]
 8001766:	4a04      	ldr	r2, [pc, #16]	; (8001778 <HAL_RCC_GetPCLK1Freq+0x2c>)
 8001768:	6810      	ldr	r0, [r2, #0]
}    
 800176a:	40d8      	lsrs	r0, r3
 800176c:	4770      	bx	lr
 800176e:	bf00      	nop
 8001770:	40023800 	.word	0x40023800
 8001774:	080044ee 	.word	0x080044ee
 8001778:	20000000 	.word	0x20000000

0800177c <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 800177c:	4b08      	ldr	r3, [pc, #32]	; (80017a0 <HAL_RCC_GetPCLK2Freq+0x24>)
 800177e:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8001782:	689b      	ldr	r3, [r3, #8]
 8001784:	fa92 f2a2 	rbit	r2, r2
 8001788:	fab2 f282 	clz	r2, r2
 800178c:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8001790:	40d3      	lsrs	r3, r2
 8001792:	4a04      	ldr	r2, [pc, #16]	; (80017a4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001794:	5cd3      	ldrb	r3, [r2, r3]
 8001796:	4a04      	ldr	r2, [pc, #16]	; (80017a8 <HAL_RCC_GetPCLK2Freq+0x2c>)
 8001798:	6810      	ldr	r0, [r2, #0]
} 
 800179a:	40d8      	lsrs	r0, r3
 800179c:	4770      	bx	lr
 800179e:	bf00      	nop
 80017a0:	40023800 	.word	0x40023800
 80017a4:	080044ee 	.word	0x080044ee
 80017a8:	20000000 	.word	0x20000000

080017ac <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1 = 0;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80017ac:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
  tmpcr1 = TIMx->CR1;
 80017b0:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80017b2:	d00e      	beq.n	80017d2 <TIM_Base_SetConfig+0x26>
 80017b4:	4a1c      	ldr	r2, [pc, #112]	; (8001828 <TIM_Base_SetConfig+0x7c>)
 80017b6:	4290      	cmp	r0, r2
 80017b8:	d00b      	beq.n	80017d2 <TIM_Base_SetConfig+0x26>
 80017ba:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80017be:	4290      	cmp	r0, r2
 80017c0:	d007      	beq.n	80017d2 <TIM_Base_SetConfig+0x26>
 80017c2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80017c6:	4290      	cmp	r0, r2
 80017c8:	d003      	beq.n	80017d2 <TIM_Base_SetConfig+0x26>
 80017ca:	f502 427c 	add.w	r2, r2, #64512	; 0xfc00
 80017ce:	4290      	cmp	r0, r2
 80017d0:	d116      	bne.n	8001800 <TIM_Base_SetConfig+0x54>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 80017d2:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80017d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  }

  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80017d8:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
    tmpcr1 |= Structure->CounterMode;
 80017dc:	ea43 0302 	orr.w	r3, r3, r2
  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80017e0:	d015      	beq.n	800180e <TIM_Base_SetConfig+0x62>
 80017e2:	4a11      	ldr	r2, [pc, #68]	; (8001828 <TIM_Base_SetConfig+0x7c>)
 80017e4:	4290      	cmp	r0, r2
 80017e6:	d012      	beq.n	800180e <TIM_Base_SetConfig+0x62>
 80017e8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80017ec:	4290      	cmp	r0, r2
 80017ee:	d00e      	beq.n	800180e <TIM_Base_SetConfig+0x62>
 80017f0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80017f4:	4290      	cmp	r0, r2
 80017f6:	d00a      	beq.n	800180e <TIM_Base_SetConfig+0x62>
 80017f8:	f502 427c 	add.w	r2, r2, #64512	; 0xfc00
 80017fc:	4290      	cmp	r0, r2
 80017fe:	d006      	beq.n	800180e <TIM_Base_SetConfig+0x62>
 8001800:	4a0a      	ldr	r2, [pc, #40]	; (800182c <TIM_Base_SetConfig+0x80>)
 8001802:	4290      	cmp	r0, r2
 8001804:	d003      	beq.n	800180e <TIM_Base_SetConfig+0x62>
 8001806:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800180a:	4290      	cmp	r0, r2
 800180c:	d103      	bne.n	8001816 <TIM_Base_SetConfig+0x6a>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800180e:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8001810:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001814:	4313      	orrs	r3, r2
  }

  TIMx->CR1 = tmpcr1;
 8001816:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001818:	688b      	ldr	r3, [r1, #8]
 800181a:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 800181c:	680b      	ldr	r3, [r1, #0]
 800181e:	6283      	str	r3, [r0, #40]	; 0x28

  /* Generate an update event to reload the Prescaler */
  TIMx->EGR = TIM_EGR_UG;
 8001820:	2301      	movs	r3, #1
 8001822:	6143      	str	r3, [r0, #20]
 8001824:	4770      	bx	lr
 8001826:	bf00      	nop
 8001828:	40000400 	.word	0x40000400
 800182c:	40010c00 	.word	0x40010c00

08001830 <HAL_TIM_Base_Init>:
{
 8001830:	b510      	push	{r4, lr}
  if(htim == NULL)
 8001832:	4604      	mov	r4, r0
 8001834:	b1a0      	cbz	r0, 8001860 <HAL_TIM_Base_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 8001836:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 800183a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800183e:	b91b      	cbnz	r3, 8001848 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8001840:	f880 2034 	strb.w	r2, [r0, #52]	; 0x34
    HAL_TIM_Base_MspInit(htim);
 8001844:	f000 fc5c 	bl	8002100 <HAL_TIM_Base_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 8001848:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800184a:	6820      	ldr	r0, [r4, #0]
  htim->State= HAL_TIM_STATE_BUSY;
 800184c:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001850:	1d21      	adds	r1, r4, #4
 8001852:	f7ff ffab 	bl	80017ac <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8001856:	2301      	movs	r3, #1
  return HAL_OK;
 8001858:	2000      	movs	r0, #0
  htim->State= HAL_TIM_STATE_READY;
 800185a:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
 800185e:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001860:	2001      	movs	r0, #1
}
 8001862:	bd10      	pop	{r4, pc}

08001864 <HAL_TIM_Base_Start>:
  htim->State= HAL_TIM_STATE_BUSY;
 8001864:	2302      	movs	r3, #2
  __HAL_TIM_ENABLE(htim);
 8001866:	6802      	ldr	r2, [r0, #0]
  htim->State= HAL_TIM_STATE_BUSY;
 8001868:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
  __HAL_TIM_ENABLE(htim);
 800186c:	6813      	ldr	r3, [r2, #0]
 800186e:	f043 0301 	orr.w	r3, r3, #1
 8001872:	6013      	str	r3, [r2, #0]
  htim->State= HAL_TIM_STATE_READY;
 8001874:	2301      	movs	r3, #1
 8001876:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
}
 800187a:	2000      	movs	r0, #0
 800187c:	4770      	bx	lr

0800187e <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 800187e:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
{
 8001882:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(htim);
 8001884:	2b01      	cmp	r3, #1
 8001886:	f04f 0302 	mov.w	r3, #2
 800188a:	d01c      	beq.n	80018c6 <HAL_TIM_ConfigClockSource+0x48>
 800188c:	2201      	movs	r2, #1
  htim->State = HAL_TIM_STATE_BUSY;
 800188e:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
  tmpsmcr = htim->Instance->SMCR;
 8001892:	6803      	ldr	r3, [r0, #0]
  __HAL_LOCK(htim);
 8001894:	f880 2034 	strb.w	r2, [r0, #52]	; 0x34
  tmpsmcr = htim->Instance->SMCR;
 8001898:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800189a:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 800189e:	f022 0277 	bic.w	r2, r2, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 80018a2:	609a      	str	r2, [r3, #8]
  switch (sClockSourceConfig->ClockSource)
 80018a4:	680a      	ldr	r2, [r1, #0]
 80018a6:	2a40      	cmp	r2, #64	; 0x40
 80018a8:	d079      	beq.n	800199e <HAL_TIM_ConfigClockSource+0x120>
 80018aa:	d819      	bhi.n	80018e0 <HAL_TIM_ConfigClockSource+0x62>
 80018ac:	2a10      	cmp	r2, #16
 80018ae:	f000 8093 	beq.w	80019d8 <HAL_TIM_ConfigClockSource+0x15a>
 80018b2:	d80a      	bhi.n	80018ca <HAL_TIM_ConfigClockSource+0x4c>
 80018b4:	2a00      	cmp	r2, #0
 80018b6:	f000 8089 	beq.w	80019cc <HAL_TIM_ConfigClockSource+0x14e>
  htim->State = HAL_TIM_STATE_READY;
 80018ba:	2301      	movs	r3, #1
 80018bc:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
  __HAL_UNLOCK(htim);
 80018c0:	2300      	movs	r3, #0
 80018c2:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
  __HAL_LOCK(htim);
 80018c6:	4618      	mov	r0, r3
}
 80018c8:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 80018ca:	2a20      	cmp	r2, #32
 80018cc:	f000 808a 	beq.w	80019e4 <HAL_TIM_ConfigClockSource+0x166>
 80018d0:	2a30      	cmp	r2, #48	; 0x30
 80018d2:	d1f2      	bne.n	80018ba <HAL_TIM_ConfigClockSource+0x3c>
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t InputTriggerSource)
{
  uint32_t tmpsmcr = 0;

   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 80018d4:	689a      	ldr	r2, [r3, #8]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 80018d6:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 80018da:	f042 0237 	orr.w	r2, r2, #55	; 0x37
 80018de:	e036      	b.n	800194e <HAL_TIM_ConfigClockSource+0xd0>
  switch (sClockSourceConfig->ClockSource)
 80018e0:	2a70      	cmp	r2, #112	; 0x70
 80018e2:	d036      	beq.n	8001952 <HAL_TIM_ConfigClockSource+0xd4>
 80018e4:	d81b      	bhi.n	800191e <HAL_TIM_ConfigClockSource+0xa0>
 80018e6:	2a50      	cmp	r2, #80	; 0x50
 80018e8:	d042      	beq.n	8001970 <HAL_TIM_ConfigClockSource+0xf2>
 80018ea:	2a60      	cmp	r2, #96	; 0x60
 80018ec:	d1e5      	bne.n	80018ba <HAL_TIM_ConfigClockSource+0x3c>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80018ee:	6a1c      	ldr	r4, [r3, #32]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80018f0:	684d      	ldr	r5, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80018f2:	f024 0410 	bic.w	r4, r4, #16
      TIM_TI2_ConfigInputStage(htim->Instance,
 80018f6:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80018f8:	621c      	str	r4, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80018fa:	6999      	ldr	r1, [r3, #24]
  tmpccer = TIMx->CCER;
 80018fc:	6a1a      	ldr	r2, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80018fe:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001902:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4);
 8001906:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12);
 800190a:	ea41 3106 	orr.w	r1, r1, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 800190e:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 8001910:	621a      	str	r2, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 8001912:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8001914:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8001918:	f042 0267 	orr.w	r2, r2, #103	; 0x67
 800191c:	e017      	b.n	800194e <HAL_TIM_ConfigClockSource+0xd0>
  switch (sClockSourceConfig->ClockSource)
 800191e:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8001922:	d011      	beq.n	8001948 <HAL_TIM_ConfigClockSource+0xca>
 8001924:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8001928:	d1c7      	bne.n	80018ba <HAL_TIM_ConfigClockSource+0x3c>

  /* Reset the ETR Bits */
  tmpsmcr &= (uint32_t)(~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP));

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 800192a:	688a      	ldr	r2, [r1, #8]
 800192c:	684d      	ldr	r5, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 800192e:	689c      	ldr	r4, [r3, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 8001930:	68c9      	ldr	r1, [r1, #12]
 8001932:	432a      	orrs	r2, r5
  tmpsmcr &= (uint32_t)(~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP));
 8001934:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 8001938:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800193c:	4322      	orrs	r2, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800193e:	609a      	str	r2, [r3, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001940:	689a      	ldr	r2, [r3, #8]
 8001942:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001946:	e002      	b.n	800194e <HAL_TIM_ConfigClockSource+0xd0>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8001948:	689a      	ldr	r2, [r3, #8]
 800194a:	f022 0207 	bic.w	r2, r2, #7
   TIMx->SMCR = tmpsmcr;
 800194e:	609a      	str	r2, [r3, #8]
 8001950:	e7b3      	b.n	80018ba <HAL_TIM_ConfigClockSource+0x3c>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 8001952:	688a      	ldr	r2, [r1, #8]
 8001954:	684d      	ldr	r5, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 8001956:	689c      	ldr	r4, [r3, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 8001958:	68c9      	ldr	r1, [r1, #12]
 800195a:	432a      	orrs	r2, r5
  tmpsmcr &= (uint32_t)(~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP));
 800195c:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 8001960:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8001964:	4322      	orrs	r2, r4
  TIMx->SMCR = tmpsmcr;
 8001966:	609a      	str	r2, [r3, #8]
      tmpsmcr = htim->Instance->SMCR;
 8001968:	689a      	ldr	r2, [r3, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800196a:	f042 0277 	orr.w	r2, r2, #119	; 0x77
 800196e:	e7ee      	b.n	800194e <HAL_TIM_ConfigClockSource+0xd0>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001970:	684c      	ldr	r4, [r1, #4]
 8001972:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8001974:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001976:	6a1d      	ldr	r5, [r3, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001978:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800197c:	f025 0501 	bic.w	r5, r5, #1
 8001980:	621d      	str	r5, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001982:	699a      	ldr	r2, [r3, #24]
  tmpccer |= TIM_ICPolarity;
 8001984:	4321      	orrs	r1, r4
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001986:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4);
 800198a:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 800198e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001990:	6219      	str	r1, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 8001992:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8001994:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8001998:	f042 0257 	orr.w	r2, r2, #87	; 0x57
 800199c:	e7d7      	b.n	800194e <HAL_TIM_ConfigClockSource+0xd0>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800199e:	684c      	ldr	r4, [r1, #4]
 80019a0:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 80019a2:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80019a4:	6a1d      	ldr	r5, [r3, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80019a6:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80019aa:	f025 0501 	bic.w	r5, r5, #1
 80019ae:	621d      	str	r5, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80019b0:	699a      	ldr	r2, [r3, #24]
  tmpccer |= TIM_ICPolarity;
 80019b2:	4321      	orrs	r1, r4
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80019b4:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4);
 80019b8:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 80019bc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80019be:	6219      	str	r1, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 80019c0:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 80019c2:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 80019c6:	f042 0247 	orr.w	r2, r2, #71	; 0x47
 80019ca:	e7c0      	b.n	800194e <HAL_TIM_ConfigClockSource+0xd0>
   tmpsmcr = TIMx->SMCR;
 80019cc:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 80019ce:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 80019d2:	f042 0207 	orr.w	r2, r2, #7
 80019d6:	e7ba      	b.n	800194e <HAL_TIM_ConfigClockSource+0xd0>
   tmpsmcr = TIMx->SMCR;
 80019d8:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 80019da:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 80019de:	f042 0217 	orr.w	r2, r2, #23
 80019e2:	e7b4      	b.n	800194e <HAL_TIM_ConfigClockSource+0xd0>
   tmpsmcr = TIMx->SMCR;
 80019e4:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 80019e6:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 80019ea:	f042 0227 	orr.w	r2, r2, #39	; 0x27
 80019ee:	e7ae      	b.n	800194e <HAL_TIM_ConfigClockSource+0xd0>

080019f0 <HAL_TIMEx_MasterConfigSynchronization>:
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  __HAL_LOCK(htim);
 80019f0:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
{
 80019f4:	b510      	push	{r4, lr}
  __HAL_LOCK(htim);
 80019f6:	2b01      	cmp	r3, #1
 80019f8:	f04f 0302 	mov.w	r3, #2
 80019fc:	d018      	beq.n	8001a30 <HAL_TIMEx_MasterConfigSynchronization+0x40>

  htim->State = HAL_TIM_STATE_BUSY;
 80019fe:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8001a02:	6803      	ldr	r3, [r0, #0]
  /* Select the TRGO source */
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 8001a04:	680c      	ldr	r4, [r1, #0]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8001a06:	685a      	ldr	r2, [r3, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8001a08:	6849      	ldr	r1, [r1, #4]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8001a0a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001a0e:	605a      	str	r2, [r3, #4]
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 8001a10:	685a      	ldr	r2, [r3, #4]
 8001a12:	4322      	orrs	r2, r4
 8001a14:	605a      	str	r2, [r3, #4]
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 8001a16:	689a      	ldr	r2, [r3, #8]
 8001a18:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001a1c:	609a      	str	r2, [r3, #8]
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8001a1e:	689a      	ldr	r2, [r3, #8]
 8001a20:	430a      	orrs	r2, r1
 8001a22:	609a      	str	r2, [r3, #8]

  htim->State = HAL_TIM_STATE_READY;
 8001a24:	2301      	movs	r3, #1
 8001a26:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35

  __HAL_UNLOCK(htim);
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
  __HAL_LOCK(htim);
 8001a30:	4618      	mov	r0, r3

  return HAL_OK;
}
 8001a32:	bd10      	pop	{r4, pc}

08001a34 <UART_SetConfig>:
  * @param  huart: Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001a34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001a38:	4681      	mov	r9, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*------- UART-associated USART registers setting : CR2 Configuration ------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according 
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001a3a:	6805      	ldr	r5, [r0, #0]
 8001a3c:	68c2      	ldr	r2, [r0, #12]
 8001a3e:	692b      	ldr	r3, [r5, #16]
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001a40:	69c1      	ldr	r1, [r0, #28]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001a42:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001a46:	4313      	orrs	r3, r2
 8001a48:	612b      	str	r3, [r5, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001a4a:	6883      	ldr	r3, [r0, #8]
 8001a4c:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1, 
 8001a4e:	68ea      	ldr	r2, [r5, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001a50:	4303      	orrs	r3, r0
 8001a52:	f8d9 0014 	ldr.w	r0, [r9, #20]
  MODIFY_REG(huart->Instance->CR1, 
 8001a56:	f422 4216 	bic.w	r2, r2, #38400	; 0x9600
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001a5a:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1, 
 8001a5c:	f022 020c 	bic.w	r2, r2, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001a60:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1, 
 8001a62:	4313      	orrs	r3, r2
 8001a64:	60eb      	str	r3, [r5, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8), 
             tmpreg);
  
  /*------- UART-associated USART registers setting : CR3 Configuration ------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001a66:	696b      	ldr	r3, [r5, #20]
 8001a68:	f8d9 2018 	ldr.w	r2, [r9, #24]
 8001a6c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001a70:	4313      	orrs	r3, r2
  
  /* Check the Over Sampling */
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001a72:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001a76:	616b      	str	r3, [r5, #20]
 8001a78:	4b7e      	ldr	r3, [pc, #504]	; (8001c74 <UART_SetConfig+0x240>)
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001a7a:	d17f      	bne.n	8001b7c <UART_SetConfig+0x148>
  {
    /*------- UART-associated USART registers setting : BRR Configuration ------*/
    if((huart->Instance == USART1))
 8001a7c:	429d      	cmp	r5, r3
 8001a7e:	f04f 0419 	mov.w	r4, #25
 8001a82:	d147      	bne.n	8001b14 <UART_SetConfig+0xe0>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8001a84:	f7ff fe7a 	bl	800177c <HAL_RCC_GetPCLK2Freq>
 8001a88:	fb04 f300 	mul.w	r3, r4, r0
 8001a8c:	f8d9 7004 	ldr.w	r7, [r9, #4]
 8001a90:	f04f 0864 	mov.w	r8, #100	; 0x64
 8001a94:	007f      	lsls	r7, r7, #1
 8001a96:	fbb3 f3f7 	udiv	r3, r3, r7
 8001a9a:	fbb3 f3f8 	udiv	r3, r3, r8
 8001a9e:	011f      	lsls	r7, r3, #4
 8001aa0:	f7ff fe6c 	bl	800177c <HAL_RCC_GetPCLK2Freq>
 8001aa4:	4360      	muls	r0, r4
 8001aa6:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8001aaa:	005b      	lsls	r3, r3, #1
 8001aac:	fbb0 f6f3 	udiv	r6, r0, r3
 8001ab0:	f7ff fe64 	bl	800177c <HAL_RCC_GetPCLK2Freq>
 8001ab4:	4360      	muls	r0, r4
 8001ab6:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8001aba:	005b      	lsls	r3, r3, #1
 8001abc:	fbb0 f3f3 	udiv	r3, r0, r3
 8001ac0:	fbb3 f3f8 	udiv	r3, r3, r8
 8001ac4:	fb08 6313 	mls	r3, r8, r3, r6
 8001ac8:	00db      	lsls	r3, r3, #3
 8001aca:	3332      	adds	r3, #50	; 0x32
 8001acc:	fbb3 f3f8 	udiv	r3, r3, r8
 8001ad0:	005b      	lsls	r3, r3, #1
 8001ad2:	f403 76f8 	and.w	r6, r3, #496	; 0x1f0
 8001ad6:	f7ff fe51 	bl	800177c <HAL_RCC_GetPCLK2Freq>
 8001ada:	4360      	muls	r0, r4
 8001adc:	f8d9 2004 	ldr.w	r2, [r9, #4]
 8001ae0:	0052      	lsls	r2, r2, #1
 8001ae2:	fbb0 faf2 	udiv	sl, r0, r2
 8001ae6:	f7ff fe49 	bl	800177c <HAL_RCC_GetPCLK2Freq>
    }
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8001aea:	4360      	muls	r0, r4
 8001aec:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8001af0:	005b      	lsls	r3, r3, #1
 8001af2:	fbb0 f3f3 	udiv	r3, r0, r3
 8001af6:	fbb3 f3f8 	udiv	r3, r3, r8
 8001afa:	fb08 a313 	mls	r3, r8, r3, sl
 8001afe:	00db      	lsls	r3, r3, #3
 8001b00:	3332      	adds	r3, #50	; 0x32
 8001b02:	fbb3 f3f8 	udiv	r3, r3, r8
 8001b06:	f003 0307 	and.w	r3, r3, #7
 8001b0a:	443b      	add	r3, r7
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8001b0c:	4433      	add	r3, r6
 8001b0e:	60ab      	str	r3, [r5, #8]
 8001b10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8001b14:	f7ff fe1a 	bl	800174c <HAL_RCC_GetPCLK1Freq>
 8001b18:	fb04 f300 	mul.w	r3, r4, r0
 8001b1c:	f8d9 7004 	ldr.w	r7, [r9, #4]
 8001b20:	f04f 0864 	mov.w	r8, #100	; 0x64
 8001b24:	007f      	lsls	r7, r7, #1
 8001b26:	fbb3 f3f7 	udiv	r3, r3, r7
 8001b2a:	fbb3 f3f8 	udiv	r3, r3, r8
 8001b2e:	011f      	lsls	r7, r3, #4
 8001b30:	f7ff fe0c 	bl	800174c <HAL_RCC_GetPCLK1Freq>
 8001b34:	4360      	muls	r0, r4
 8001b36:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8001b3a:	005b      	lsls	r3, r3, #1
 8001b3c:	fbb0 f6f3 	udiv	r6, r0, r3
 8001b40:	f7ff fe04 	bl	800174c <HAL_RCC_GetPCLK1Freq>
 8001b44:	4360      	muls	r0, r4
 8001b46:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8001b4a:	005b      	lsls	r3, r3, #1
 8001b4c:	fbb0 f3f3 	udiv	r3, r0, r3
 8001b50:	fbb3 f3f8 	udiv	r3, r3, r8
 8001b54:	fb08 6313 	mls	r3, r8, r3, r6
 8001b58:	00db      	lsls	r3, r3, #3
 8001b5a:	3332      	adds	r3, #50	; 0x32
 8001b5c:	fbb3 f3f8 	udiv	r3, r3, r8
 8001b60:	005b      	lsls	r3, r3, #1
 8001b62:	f403 76f8 	and.w	r6, r3, #496	; 0x1f0
 8001b66:	f7ff fdf1 	bl	800174c <HAL_RCC_GetPCLK1Freq>
 8001b6a:	4360      	muls	r0, r4
 8001b6c:	f8d9 2004 	ldr.w	r2, [r9, #4]
 8001b70:	0052      	lsls	r2, r2, #1
 8001b72:	fbb0 faf2 	udiv	sl, r0, r2
 8001b76:	f7ff fde9 	bl	800174c <HAL_RCC_GetPCLK1Freq>
 8001b7a:	e7b6      	b.n	8001aea <UART_SetConfig+0xb6>
    if((huart->Instance == USART1))
 8001b7c:	429d      	cmp	r5, r3
 8001b7e:	f04f 0419 	mov.w	r4, #25
 8001b82:	d143      	bne.n	8001c0c <UART_SetConfig+0x1d8>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8001b84:	f7ff fdfa 	bl	800177c <HAL_RCC_GetPCLK2Freq>
 8001b88:	fb04 f300 	mul.w	r3, r4, r0
 8001b8c:	f8d9 6004 	ldr.w	r6, [r9, #4]
 8001b90:	f04f 0864 	mov.w	r8, #100	; 0x64
 8001b94:	00b6      	lsls	r6, r6, #2
 8001b96:	fbb3 f3f6 	udiv	r3, r3, r6
 8001b9a:	fbb3 f3f8 	udiv	r3, r3, r8
 8001b9e:	011e      	lsls	r6, r3, #4
 8001ba0:	f7ff fdec 	bl	800177c <HAL_RCC_GetPCLK2Freq>
 8001ba4:	4360      	muls	r0, r4
 8001ba6:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8001baa:	009b      	lsls	r3, r3, #2
 8001bac:	fbb0 f7f3 	udiv	r7, r0, r3
 8001bb0:	f7ff fde4 	bl	800177c <HAL_RCC_GetPCLK2Freq>
 8001bb4:	4360      	muls	r0, r4
 8001bb6:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8001bba:	009b      	lsls	r3, r3, #2
 8001bbc:	fbb0 f3f3 	udiv	r3, r0, r3
 8001bc0:	fbb3 f3f8 	udiv	r3, r3, r8
 8001bc4:	fb08 7313 	mls	r3, r8, r3, r7
 8001bc8:	011b      	lsls	r3, r3, #4
 8001bca:	3332      	adds	r3, #50	; 0x32
 8001bcc:	fbb3 f3f8 	udiv	r3, r3, r8
 8001bd0:	f003 07f0 	and.w	r7, r3, #240	; 0xf0
 8001bd4:	f7ff fdd2 	bl	800177c <HAL_RCC_GetPCLK2Freq>
 8001bd8:	4360      	muls	r0, r4
 8001bda:	f8d9 2004 	ldr.w	r2, [r9, #4]
 8001bde:	0092      	lsls	r2, r2, #2
 8001be0:	fbb0 faf2 	udiv	sl, r0, r2
 8001be4:	f7ff fdca 	bl	800177c <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8001be8:	4360      	muls	r0, r4
 8001bea:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8001bee:	009b      	lsls	r3, r3, #2
 8001bf0:	fbb0 f3f3 	udiv	r3, r0, r3
 8001bf4:	fbb3 f3f8 	udiv	r3, r3, r8
 8001bf8:	fb08 a313 	mls	r3, r8, r3, sl
 8001bfc:	011b      	lsls	r3, r3, #4
 8001bfe:	3332      	adds	r3, #50	; 0x32
 8001c00:	fbb3 f3f8 	udiv	r3, r3, r8
 8001c04:	f003 030f 	and.w	r3, r3, #15
 8001c08:	433b      	orrs	r3, r7
 8001c0a:	e77f      	b.n	8001b0c <UART_SetConfig+0xd8>
 8001c0c:	f7ff fd9e 	bl	800174c <HAL_RCC_GetPCLK1Freq>
 8001c10:	fb04 f300 	mul.w	r3, r4, r0
 8001c14:	f8d9 6004 	ldr.w	r6, [r9, #4]
 8001c18:	f04f 0864 	mov.w	r8, #100	; 0x64
 8001c1c:	00b6      	lsls	r6, r6, #2
 8001c1e:	fbb3 f3f6 	udiv	r3, r3, r6
 8001c22:	fbb3 f3f8 	udiv	r3, r3, r8
 8001c26:	011e      	lsls	r6, r3, #4
 8001c28:	f7ff fd90 	bl	800174c <HAL_RCC_GetPCLK1Freq>
 8001c2c:	4360      	muls	r0, r4
 8001c2e:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8001c32:	009b      	lsls	r3, r3, #2
 8001c34:	fbb0 f7f3 	udiv	r7, r0, r3
 8001c38:	f7ff fd88 	bl	800174c <HAL_RCC_GetPCLK1Freq>
 8001c3c:	4360      	muls	r0, r4
 8001c3e:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8001c42:	009b      	lsls	r3, r3, #2
 8001c44:	fbb0 f3f3 	udiv	r3, r0, r3
 8001c48:	fbb3 f3f8 	udiv	r3, r3, r8
 8001c4c:	fb08 7313 	mls	r3, r8, r3, r7
 8001c50:	011b      	lsls	r3, r3, #4
 8001c52:	3332      	adds	r3, #50	; 0x32
 8001c54:	fbb3 f3f8 	udiv	r3, r3, r8
 8001c58:	f003 07f0 	and.w	r7, r3, #240	; 0xf0
 8001c5c:	f7ff fd76 	bl	800174c <HAL_RCC_GetPCLK1Freq>
 8001c60:	4360      	muls	r0, r4
 8001c62:	f8d9 2004 	ldr.w	r2, [r9, #4]
 8001c66:	0092      	lsls	r2, r2, #2
 8001c68:	fbb0 faf2 	udiv	sl, r0, r2
 8001c6c:	f7ff fd6e 	bl	800174c <HAL_RCC_GetPCLK1Freq>
 8001c70:	e7ba      	b.n	8001be8 <UART_SetConfig+0x1b4>
 8001c72:	bf00      	nop
 8001c74:	40013800 	.word	0x40013800

08001c78 <UART_WaitOnFlagUntilTimeout.constprop.1>:
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Timeout)
 8001c78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001c7a:	4604      	mov	r4, r0
 8001c7c:	460e      	mov	r6, r1
 8001c7e:	4615      	mov	r5, r2
  tickstart = HAL_GetTick();
 8001c80:	f7fe ff3e 	bl	8000b00 <HAL_GetTick>
 8001c84:	4607      	mov	r7, r0
    while(__HAL_UART_GET_FLAG(huart, Flag) == RESET)
 8001c86:	6822      	ldr	r2, [r4, #0]
 8001c88:	6813      	ldr	r3, [r2, #0]
 8001c8a:	ea36 0303 	bics.w	r3, r6, r3
 8001c8e:	d101      	bne.n	8001c94 <UART_WaitOnFlagUntilTimeout.constprop.1+0x1c>
  return HAL_OK;
 8001c90:	2000      	movs	r0, #0
}
 8001c92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if(Timeout != HAL_MAX_DELAY)
 8001c94:	1c6b      	adds	r3, r5, #1
 8001c96:	d0f7      	beq.n	8001c88 <UART_WaitOnFlagUntilTimeout.constprop.1+0x10>
        if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 8001c98:	b9c5      	cbnz	r5, 8001ccc <UART_WaitOnFlagUntilTimeout.constprop.1+0x54>
          __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8001c9a:	6823      	ldr	r3, [r4, #0]
          return HAL_TIMEOUT;
 8001c9c:	2003      	movs	r0, #3
          __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8001c9e:	68da      	ldr	r2, [r3, #12]
 8001ca0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001ca4:	60da      	str	r2, [r3, #12]
          __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8001ca6:	68da      	ldr	r2, [r3, #12]
 8001ca8:	f022 0220 	bic.w	r2, r2, #32
 8001cac:	60da      	str	r2, [r3, #12]
          __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8001cae:	68da      	ldr	r2, [r3, #12]
 8001cb0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001cb4:	60da      	str	r2, [r3, #12]
          __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8001cb6:	695a      	ldr	r2, [r3, #20]
 8001cb8:	f022 0201 	bic.w	r2, r2, #1
 8001cbc:	615a      	str	r2, [r3, #20]
          huart->State= HAL_UART_STATE_READY;
 8001cbe:	2301      	movs	r3, #1
 8001cc0:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
          __HAL_UNLOCK(huart);
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
 8001cca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 8001ccc:	f7fe ff18 	bl	8000b00 <HAL_GetTick>
 8001cd0:	1bc0      	subs	r0, r0, r7
 8001cd2:	4285      	cmp	r5, r0
 8001cd4:	d2d7      	bcs.n	8001c86 <UART_WaitOnFlagUntilTimeout.constprop.1+0xe>
 8001cd6:	e7e0      	b.n	8001c9a <UART_WaitOnFlagUntilTimeout.constprop.1+0x22>

08001cd8 <HAL_UART_Init>:
{
 8001cd8:	b510      	push	{r4, lr}
  if(huart == NULL)
 8001cda:	4604      	mov	r4, r0
 8001cdc:	b330      	cbz	r0, 8001d2c <HAL_UART_Init+0x54>
  if(huart->State == HAL_UART_STATE_RESET)
 8001cde:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8001ce2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001ce6:	b91b      	cbnz	r3, 8001cf0 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8001ce8:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8001cec:	f000 fa2c 	bl	8002148 <HAL_UART_MspInit>
  huart->State = HAL_UART_STATE_BUSY;
 8001cf0:	2302      	movs	r3, #2
  __HAL_UART_DISABLE(huart);
 8001cf2:	6822      	ldr	r2, [r4, #0]
  huart->State = HAL_UART_STATE_BUSY;
 8001cf4:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8001cf8:	68d3      	ldr	r3, [r2, #12]
  UART_SetConfig(huart);
 8001cfa:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 8001cfc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001d00:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8001d02:	f7ff fe97 	bl	8001a34 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001d06:	6823      	ldr	r3, [r4, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001d08:	2000      	movs	r0, #0
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001d0a:	691a      	ldr	r2, [r3, #16]
 8001d0c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001d10:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001d12:	695a      	ldr	r2, [r3, #20]
 8001d14:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001d18:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8001d1a:	68da      	ldr	r2, [r3, #12]
 8001d1c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001d20:	60da      	str	r2, [r3, #12]
  huart->State= HAL_UART_STATE_READY;
 8001d22:	2301      	movs	r3, #1
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001d24:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->State= HAL_UART_STATE_READY;
 8001d26:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  return HAL_OK;
 8001d2a:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001d2c:	2001      	movs	r0, #1
}
 8001d2e:	bd10      	pop	{r4, pc}

08001d30 <HAL_UART_Transmit>:
{
 8001d30:	b570      	push	{r4, r5, r6, lr}
 8001d32:	460d      	mov	r5, r1
  tmp_state = huart->State;
 8001d34:	f890 1039 	ldrb.w	r1, [r0, #57]	; 0x39
{
 8001d38:	4604      	mov	r4, r0
  tmp_state = huart->State;
 8001d3a:	b2c9      	uxtb	r1, r1
  if((tmp_state == HAL_UART_STATE_READY) || (tmp_state == HAL_UART_STATE_BUSY_RX))
 8001d3c:	2901      	cmp	r1, #1
{
 8001d3e:	461e      	mov	r6, r3
  if((tmp_state == HAL_UART_STATE_READY) || (tmp_state == HAL_UART_STATE_BUSY_RX))
 8001d40:	d001      	beq.n	8001d46 <HAL_UART_Transmit+0x16>
 8001d42:	2922      	cmp	r1, #34	; 0x22
 8001d44:	d14d      	bne.n	8001de2 <HAL_UART_Transmit+0xb2>
    if((pData == NULL) || (Size == 0))
 8001d46:	2d00      	cmp	r5, #0
 8001d48:	d049      	beq.n	8001dde <HAL_UART_Transmit+0xae>
 8001d4a:	2a00      	cmp	r2, #0
 8001d4c:	d047      	beq.n	8001dde <HAL_UART_Transmit+0xae>
    __HAL_LOCK(huart);
 8001d4e:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8001d52:	2b01      	cmp	r3, #1
 8001d54:	d045      	beq.n	8001de2 <HAL_UART_Transmit+0xb2>
 8001d56:	2301      	movs	r3, #1
 8001d58:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	63e3      	str	r3, [r4, #60]	; 0x3c
    if(huart->State == HAL_UART_STATE_BUSY_RX) 
 8001d60:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
    huart->TxXferSize = Size;
 8001d64:	84a2      	strh	r2, [r4, #36]	; 0x24
    if(huart->State == HAL_UART_STATE_BUSY_RX) 
 8001d66:	2b22      	cmp	r3, #34	; 0x22
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
 8001d68:	bf0c      	ite	eq
 8001d6a:	2332      	moveq	r3, #50	; 0x32
      huart->State = HAL_UART_STATE_BUSY_TX;
 8001d6c:	2312      	movne	r3, #18
    huart->TxXferCount = Size;
 8001d6e:	84e2      	strh	r2, [r4, #38]	; 0x26
      huart->State = HAL_UART_STATE_BUSY_TX;
 8001d70:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    while(huart->TxXferCount > 0)
 8001d74:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 8001d76:	b98a      	cbnz	r2, 8001d9c <HAL_UART_Transmit+0x6c>
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, Timeout) != HAL_OK)
 8001d78:	4632      	mov	r2, r6
 8001d7a:	2140      	movs	r1, #64	; 0x40
 8001d7c:	4620      	mov	r0, r4
 8001d7e:	f7ff ff7b 	bl	8001c78 <UART_WaitOnFlagUntilTimeout.constprop.1>
 8001d82:	b9c0      	cbnz	r0, 8001db6 <HAL_UART_Transmit+0x86>
    if(huart->State == HAL_UART_STATE_BUSY_TX_RX) 
 8001d84:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
 8001d88:	2b32      	cmp	r3, #50	; 0x32
      huart->State = HAL_UART_STATE_BUSY_RX;
 8001d8a:	bf0c      	ite	eq
 8001d8c:	2322      	moveq	r3, #34	; 0x22
      huart->State = HAL_UART_STATE_READY;
 8001d8e:	2301      	movne	r3, #1
 8001d90:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    __HAL_UNLOCK(huart);
 8001d94:	2300      	movs	r3, #0
 8001d96:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
    return HAL_OK;
 8001d9a:	bd70      	pop	{r4, r5, r6, pc}
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001d9c:	68a3      	ldr	r3, [r4, #8]
      huart->TxXferCount--;
 8001d9e:	3a01      	subs	r2, #1
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001da0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
      huart->TxXferCount--;
 8001da4:	84e2      	strh	r2, [r4, #38]	; 0x26
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, Timeout) != HAL_OK)
 8001da6:	f04f 0180 	mov.w	r1, #128	; 0x80
 8001daa:	4632      	mov	r2, r6
 8001dac:	4620      	mov	r0, r4
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001dae:	d10d      	bne.n	8001dcc <HAL_UART_Transmit+0x9c>
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, Timeout) != HAL_OK)
 8001db0:	f7ff ff62 	bl	8001c78 <UART_WaitOnFlagUntilTimeout.constprop.1>
 8001db4:	b108      	cbz	r0, 8001dba <HAL_UART_Transmit+0x8a>
          return HAL_TIMEOUT;
 8001db6:	2003      	movs	r0, #3
 8001db8:	bd70      	pop	{r4, r5, r6, pc}
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8001dba:	882b      	ldrh	r3, [r5, #0]
 8001dbc:	6822      	ldr	r2, [r4, #0]
 8001dbe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001dc2:	6053      	str	r3, [r2, #4]
        if(huart->Init.Parity == UART_PARITY_NONE)
 8001dc4:	6923      	ldr	r3, [r4, #16]
 8001dc6:	b943      	cbnz	r3, 8001dda <HAL_UART_Transmit+0xaa>
          pData +=2;
 8001dc8:	3502      	adds	r5, #2
 8001dca:	e7d3      	b.n	8001d74 <HAL_UART_Transmit+0x44>
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, Timeout) != HAL_OK)
 8001dcc:	f7ff ff54 	bl	8001c78 <UART_WaitOnFlagUntilTimeout.constprop.1>
 8001dd0:	2800      	cmp	r0, #0
 8001dd2:	d1f0      	bne.n	8001db6 <HAL_UART_Transmit+0x86>
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8001dd4:	6823      	ldr	r3, [r4, #0]
 8001dd6:	782a      	ldrb	r2, [r5, #0]
 8001dd8:	605a      	str	r2, [r3, #4]
 8001dda:	3501      	adds	r5, #1
 8001ddc:	e7ca      	b.n	8001d74 <HAL_UART_Transmit+0x44>
      return  HAL_ERROR;
 8001dde:	2001      	movs	r0, #1
 8001de0:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_BUSY;
 8001de2:	2002      	movs	r0, #2
}
 8001de4:	bd70      	pop	{r4, r5, r6, pc}
	...

08001de8 <SystemClock_Config>:
	RCC_OscInitTypeDef RCC_OscInitStruct;
	RCC_ClkInitTypeDef RCC_ClkInitStruct;

	/**Configure the main internal regulator output voltage
	 */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001de8:	4a1e      	ldr	r2, [pc, #120]	; (8001e64 <SystemClock_Config+0x7c>)
void SystemClock_Config(void) {
 8001dea:	b510      	push	{r4, lr}
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001dec:	6813      	ldr	r3, [r2, #0]
void SystemClock_Config(void) {
 8001dee:	b092      	sub	sp, #72	; 0x48
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001df0:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 8001df4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001df8:	6013      	str	r3, [r2, #0]

	/**Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001dfa:	2302      	movs	r3, #2
 8001dfc:	9305      	str	r3, [sp, #20]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
	RCC_OscInitStruct.HSICalibrationValue = 16;
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001dfe:	930e      	str	r3, [sp, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001e00:	2300      	movs	r3, #0
 8001e02:	930f      	str	r3, [sp, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8001e04:	f44f 2300 	mov.w	r3, #524288	; 0x80000
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001e08:	2401      	movs	r4, #1
	RCC_OscInitStruct.HSICalibrationValue = 16;
 8001e0a:	2210      	movs	r2, #16
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8001e0c:	9310      	str	r3, [sp, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV3;
 8001e0e:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8001e12:	a805      	add	r0, sp, #20
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001e14:	9408      	str	r4, [sp, #32]
	RCC_OscInitStruct.HSICalibrationValue = 16;
 8001e16:	9209      	str	r2, [sp, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV3;
 8001e18:	9311      	str	r3, [sp, #68]	; 0x44
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8001e1a:	f7ff f819 	bl	8000e50 <HAL_RCC_OscConfig>
 8001e1e:	b100      	cbz	r0, 8001e22 <SystemClock_Config+0x3a>
 8001e20:	e7fe      	b.n	8001e20 <SystemClock_Config+0x38>

	/**Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001e22:	220f      	movs	r2, #15
 8001e24:	2303      	movs	r3, #3
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001e26:	9002      	str	r0, [sp, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001e28:	9003      	str	r0, [sp, #12]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001e2a:	9004      	str	r0, [sp, #16]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK) {
 8001e2c:	4621      	mov	r1, r4
 8001e2e:	4668      	mov	r0, sp
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001e30:	e88d 000c 	stmia.w	sp, {r2, r3}
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK) {
 8001e34:	f7ff fba6 	bl	8001584 <HAL_RCC_ClockConfig>
 8001e38:	4604      	mov	r4, r0
 8001e3a:	b100      	cbz	r0, 8001e3e <SystemClock_Config+0x56>
 8001e3c:	e7fe      	b.n	8001e3c <SystemClock_Config+0x54>
		_Error_Handler(__FILE__, __LINE__);
	}

	/**Configure the Systick interrupt time
	 */
	HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / 1000);
 8001e3e:	f7ff fc7f 	bl	8001740 <HAL_RCC_GetHCLKFreq>
 8001e42:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e46:	fbb0 f0f3 	udiv	r0, r0, r3
 8001e4a:	f7fe feb1 	bl	8000bb0 <HAL_SYSTICK_Config>

	/**Configure the Systick
	 */
	HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8001e4e:	2004      	movs	r0, #4
 8001e50:	f7fe fec4 	bl	8000bdc <HAL_SYSTICK_CLKSourceConfig>

	/* SysTick_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8001e54:	4622      	mov	r2, r4
 8001e56:	4621      	mov	r1, r4
 8001e58:	f04f 30ff 	mov.w	r0, #4294967295
 8001e5c:	f7fe fe68 	bl	8000b30 <HAL_NVIC_SetPriority>
}
 8001e60:	b012      	add	sp, #72	; 0x48
 8001e62:	bd10      	pop	{r4, pc}
 8001e64:	40007000 	.word	0x40007000

08001e68 <delay_us>:

}

/* USER CODE BEGIN 4 */
void delay_us(uint32_t period) {
	__HAL_TIM_SET_COUNTER(&htim5, 0);
 8001e68:	2200      	movs	r2, #0
 8001e6a:	4b03      	ldr	r3, [pc, #12]	; (8001e78 <delay_us+0x10>)
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&htim5) < period) {
 8001e70:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001e72:	4282      	cmp	r2, r0
 8001e74:	d3fc      	bcc.n	8001e70 <delay_us+0x8>
	}
}
 8001e76:	4770      	bx	lr
 8001e78:	20000204 	.word	0x20000204

08001e7c <delay_ms>:

void delay_ms(uint32_t period) {
	uint32_t t = period / 2;
	__HAL_TIM_SET_COUNTER(&htim2, 0);
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	4b04      	ldr	r3, [pc, #16]	; (8001e90 <delay_ms+0x14>)
	uint32_t t = period / 2;
 8001e80:	0840      	lsrs	r0, r0, #1
	__HAL_TIM_SET_COUNTER(&htim2, 0);
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&htim2) < t) {
 8001e86:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001e88:	4290      	cmp	r0, r2
 8001e8a:	d8fc      	bhi.n	8001e86 <delay_ms+0xa>
	}
}
 8001e8c:	4770      	bx	lr
 8001e8e:	bf00      	nop
 8001e90:	2000023c 	.word	0x2000023c

08001e94 <main>:
int main(void) {
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b08c      	sub	sp, #48	; 0x30
	HAL_Init();
 8001e98:	f7fe fe1e 	bl	8000ad8 <HAL_Init>
	SystemClock_Config();
 8001e9c:	f7ff ffa4 	bl	8001de8 <SystemClock_Config>
	__HAL_RCC_GPIOC_CLK_ENABLE()
 8001ea0:	4b64      	ldr	r3, [pc, #400]	; (8002034 <main+0x1a0>)
	HAL_GPIO_WritePin(GPIOA, LD2_Pin | GPIO_PIN_7, GPIO_PIN_RESET);
 8001ea2:	21a0      	movs	r1, #160	; 0xa0
	__HAL_RCC_GPIOC_CLK_ENABLE()
 8001ea4:	69da      	ldr	r2, [r3, #28]
	HAL_GPIO_WritePin(GPIOA, LD2_Pin | GPIO_PIN_7, GPIO_PIN_RESET);
 8001ea6:	4864      	ldr	r0, [pc, #400]	; (8002038 <main+0x1a4>)
	__HAL_RCC_GPIOC_CLK_ENABLE()
 8001ea8:	f042 0204 	orr.w	r2, r2, #4
 8001eac:	61da      	str	r2, [r3, #28]
 8001eae:	69da      	ldr	r2, [r3, #28]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eb0:	2400      	movs	r4, #0
	__HAL_RCC_GPIOC_CLK_ENABLE()
 8001eb2:	f002 0204 	and.w	r2, r2, #4
 8001eb6:	9201      	str	r2, [sp, #4]
 8001eb8:	9a01      	ldr	r2, [sp, #4]
	__HAL_RCC_GPIOH_CLK_ENABLE()
 8001eba:	69da      	ldr	r2, [r3, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001ebc:	4d5f      	ldr	r5, [pc, #380]	; (800203c <main+0x1a8>)
	__HAL_RCC_GPIOH_CLK_ENABLE()
 8001ebe:	f042 0220 	orr.w	r2, r2, #32
 8001ec2:	61da      	str	r2, [r3, #28]
 8001ec4:	69da      	ldr	r2, [r3, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ec6:	2601      	movs	r6, #1
	__HAL_RCC_GPIOH_CLK_ENABLE()
 8001ec8:	f002 0220 	and.w	r2, r2, #32
 8001ecc:	9202      	str	r2, [sp, #8]
 8001ece:	9a02      	ldr	r2, [sp, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE()
 8001ed0:	69da      	ldr	r2, [r3, #28]
 8001ed2:	f042 0201 	orr.w	r2, r2, #1
 8001ed6:	61da      	str	r2, [r3, #28]
 8001ed8:	69da      	ldr	r2, [r3, #28]
 8001eda:	f002 0201 	and.w	r2, r2, #1
 8001ede:	9203      	str	r2, [sp, #12]
 8001ee0:	9a03      	ldr	r2, [sp, #12]
	__HAL_RCC_GPIOB_CLK_ENABLE()
 8001ee2:	69da      	ldr	r2, [r3, #28]
 8001ee4:	f042 0202 	orr.w	r2, r2, #2
 8001ee8:	61da      	str	r2, [r3, #28]
 8001eea:	69db      	ldr	r3, [r3, #28]
	HAL_GPIO_WritePin(GPIOA, LD2_Pin | GPIO_PIN_7, GPIO_PIN_RESET);
 8001eec:	2200      	movs	r2, #0
	__HAL_RCC_GPIOB_CLK_ENABLE()
 8001eee:	f003 0302 	and.w	r3, r3, #2
 8001ef2:	9304      	str	r3, [sp, #16]
 8001ef4:	9b04      	ldr	r3, [sp, #16]
	HAL_GPIO_WritePin(GPIOA, LD2_Pin | GPIO_PIN_7, GPIO_PIN_RESET);
 8001ef6:	f7fe ff55 	bl	8000da4 <HAL_GPIO_WritePin>
	GPIO_InitStruct.Pin = B1_Pin;
 8001efa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001efe:	a907      	add	r1, sp, #28
 8001f00:	484f      	ldr	r0, [pc, #316]	; (8002040 <main+0x1ac>)
	GPIO_InitStruct.Pin = B1_Pin;
 8001f02:	9307      	str	r3, [sp, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001f04:	9508      	str	r5, [sp, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f06:	9409      	str	r4, [sp, #36]	; 0x24
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001f08:	f7fe fe7a 	bl	8000c00 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = LD2_Pin | GPIO_PIN_7;
 8001f0c:	23a0      	movs	r3, #160	; 0xa0
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f0e:	a907      	add	r1, sp, #28
 8001f10:	4849      	ldr	r0, [pc, #292]	; (8002038 <main+0x1a4>)
	GPIO_InitStruct.Pin = LD2_Pin | GPIO_PIN_7;
 8001f12:	9307      	str	r3, [sp, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f14:	9608      	str	r6, [sp, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f16:	9409      	str	r4, [sp, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f18:	940a      	str	r4, [sp, #40]	; 0x28
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f1a:	f7fe fe71 	bl	8000c00 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001f1e:	2340      	movs	r3, #64	; 0x40
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001f20:	9508      	str	r5, [sp, #32]
	huart2.Init.BaudRate = 115200;
 8001f22:	f44f 35e1 	mov.w	r5, #115200	; 0x1c200
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f26:	a907      	add	r1, sp, #28
 8001f28:	4843      	ldr	r0, [pc, #268]	; (8002038 <main+0x1a4>)
	GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001f2a:	9307      	str	r3, [sp, #28]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f2c:	9409      	str	r4, [sp, #36]	; 0x24
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f2e:	f7fe fe67 	bl	8000c00 <HAL_GPIO_Init>
	HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001f32:	4622      	mov	r2, r4
 8001f34:	4621      	mov	r1, r4
 8001f36:	2017      	movs	r0, #23
 8001f38:	f7fe fdfa 	bl	8000b30 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001f3c:	2017      	movs	r0, #23
 8001f3e:	f7fe fe2b 	bl	8000b98 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001f42:	4622      	mov	r2, r4
 8001f44:	4621      	mov	r1, r4
 8001f46:	2028      	movs	r0, #40	; 0x28
 8001f48:	f7fe fdf2 	bl	8000b30 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001f4c:	2028      	movs	r0, #40	; 0x28
 8001f4e:	f7fe fe23 	bl	8000b98 <HAL_NVIC_EnableIRQ>
	huart2.Instance = USART2;
 8001f52:	483c      	ldr	r0, [pc, #240]	; (8002044 <main+0x1b0>)
	huart2.Init.BaudRate = 115200;
 8001f54:	4b3c      	ldr	r3, [pc, #240]	; (8002048 <main+0x1b4>)
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001f56:	6084      	str	r4, [r0, #8]
	huart2.Init.BaudRate = 115200;
 8001f58:	e880 0028 	stmia.w	r0, {r3, r5}
	huart2.Init.Mode = UART_MODE_TX_RX;
 8001f5c:	230c      	movs	r3, #12
	huart2.Init.StopBits = UART_STOPBITS_1;
 8001f5e:	60c4      	str	r4, [r0, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8001f60:	6104      	str	r4, [r0, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8001f62:	6143      	str	r3, [r0, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f64:	6184      	str	r4, [r0, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f66:	61c4      	str	r4, [r0, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 8001f68:	f7ff feb6 	bl	8001cd8 <HAL_UART_Init>
 8001f6c:	b100      	cbz	r0, 8001f70 <main+0xdc>
 8001f6e:	e7fe      	b.n	8001f6e <main+0xda>
	htim2.Init.Prescaler = 64000;
 8001f70:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001f74:	f44f 437a 	mov.w	r3, #64000	; 0xfa00
	htim2.Init.Period = 65535;
 8001f78:	f64f 78ff 	movw	r8, #65535	; 0xffff
	htim2.Instance = TIM2;
 8001f7c:	4d33      	ldr	r5, [pc, #204]	; (800204c <main+0x1b8>)
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f7e:	60a8      	str	r0, [r5, #8]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f80:	6128      	str	r0, [r5, #16]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK) {
 8001f82:	4628      	mov	r0, r5
	htim2.Init.Prescaler = 64000;
 8001f84:	e885 000a 	stmia.w	r5, {r1, r3}
	htim2.Init.Period = 65535;
 8001f88:	f8c5 800c 	str.w	r8, [r5, #12]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK) {
 8001f8c:	f7ff fc50 	bl	8001830 <HAL_TIM_Base_Init>
 8001f90:	b100      	cbz	r0, 8001f94 <main+0x100>
 8001f92:	e7fe      	b.n	8001f92 <main+0xfe>
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001f94:	f44f 5780 	mov.w	r7, #4096	; 0x1000
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 8001f98:	a907      	add	r1, sp, #28
 8001f9a:	4628      	mov	r0, r5
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001f9c:	9707      	str	r7, [sp, #28]
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 8001f9e:	f7ff fc6e 	bl	800187e <HAL_TIM_ConfigClockSource>
 8001fa2:	b100      	cbz	r0, 8001fa6 <main+0x112>
 8001fa4:	e7fe      	b.n	8001fa4 <main+0x110>
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001fa6:	9005      	str	r0, [sp, #20]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001fa8:	9006      	str	r0, [sp, #24]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 8001faa:	a905      	add	r1, sp, #20
 8001fac:	4628      	mov	r0, r5
 8001fae:	f7ff fd1f 	bl	80019f0 <HAL_TIMEx_MasterConfigSynchronization>
 8001fb2:	b100      	cbz	r0, 8001fb6 <main+0x122>
 8001fb4:	e7fe      	b.n	8001fb4 <main+0x120>
	htim5.Init.Prescaler = 32;
 8001fb6:	2320      	movs	r3, #32
	htim5.Instance = TIM5;
 8001fb8:	4c25      	ldr	r4, [pc, #148]	; (8002050 <main+0x1bc>)
	htim5.Init.Prescaler = 32;
 8001fba:	4a26      	ldr	r2, [pc, #152]	; (8002054 <main+0x1c0>)
	htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001fbc:	60a0      	str	r0, [r4, #8]
	htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001fbe:	6120      	str	r0, [r4, #16]
	if (HAL_TIM_Base_Init(&htim5) != HAL_OK) {
 8001fc0:	4620      	mov	r0, r4
	htim5.Init.Prescaler = 32;
 8001fc2:	e884 000c 	stmia.w	r4, {r2, r3}
	htim5.Init.Period = 0xffff;
 8001fc6:	f8c4 800c 	str.w	r8, [r4, #12]
	if (HAL_TIM_Base_Init(&htim5) != HAL_OK) {
 8001fca:	f7ff fc31 	bl	8001830 <HAL_TIM_Base_Init>
 8001fce:	b100      	cbz	r0, 8001fd2 <main+0x13e>
 8001fd0:	e7fe      	b.n	8001fd0 <main+0x13c>
	if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK) {
 8001fd2:	a907      	add	r1, sp, #28
 8001fd4:	4620      	mov	r0, r4
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001fd6:	9707      	str	r7, [sp, #28]
	if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK) {
 8001fd8:	f7ff fc51 	bl	800187e <HAL_TIM_ConfigClockSource>
 8001fdc:	b100      	cbz	r0, 8001fe0 <main+0x14c>
 8001fde:	e7fe      	b.n	8001fde <main+0x14a>
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001fe0:	9005      	str	r0, [sp, #20]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001fe2:	9006      	str	r0, [sp, #24]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig)
 8001fe4:	a905      	add	r1, sp, #20
 8001fe6:	4620      	mov	r0, r4
 8001fe8:	f7ff fd02 	bl	80019f0 <HAL_TIMEx_MasterConfigSynchronization>
 8001fec:	b100      	cbz	r0, 8001ff0 <main+0x15c>
 8001fee:	e7fe      	b.n	8001fee <main+0x15a>
	HAL_TIM_Base_Start(&htim2);
 8001ff0:	4628      	mov	r0, r5
 8001ff2:	f7ff fc37 	bl	8001864 <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start(&htim5);
 8001ff6:	4620      	mov	r0, r4
 8001ff8:	f7ff fc34 	bl	8001864 <HAL_TIM_Base_Start>
		flag = 1;
 8001ffc:	4634      	mov	r4, r6
 8001ffe:	4f16      	ldr	r7, [pc, #88]	; (8002058 <main+0x1c4>)
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_SET);
 8002000:	4e0d      	ldr	r6, [pc, #52]	; (8002038 <main+0x1a4>)
		ack = 1;
 8002002:	4d16      	ldr	r5, [pc, #88]	; (800205c <main+0x1c8>)
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_SET);
 8002004:	2201      	movs	r2, #1
 8002006:	2180      	movs	r1, #128	; 0x80
 8002008:	4630      	mov	r0, r6
		flag = 1;
 800200a:	603c      	str	r4, [r7, #0]
		ack = 1;
 800200c:	602c      	str	r4, [r5, #0]
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_SET);
 800200e:	f7fe fec9 	bl	8000da4 <HAL_GPIO_WritePin>
		delay_us(10);
 8002012:	200a      	movs	r0, #10
 8002014:	f7ff ff28 	bl	8001e68 <delay_us>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
 8002018:	2200      	movs	r2, #0
 800201a:	2180      	movs	r1, #128	; 0x80
 800201c:	4630      	mov	r0, r6
 800201e:	f7fe fec1 	bl	8000da4 <HAL_GPIO_WritePin>
		while (ack) {
 8002022:	682b      	ldr	r3, [r5, #0]
 8002024:	2b00      	cmp	r3, #0
 8002026:	d0ec      	beq.n	8002002 <main+0x16e>
			delay_ms(timeout);
 8002028:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800202c:	f7ff ff26 	bl	8001e7c <delay_ms>
 8002030:	e7f7      	b.n	8002022 <main+0x18e>
 8002032:	bf00      	nop
 8002034:	40023800 	.word	0x40023800
 8002038:	40020000 	.word	0x40020000
 800203c:	10310000 	.word	0x10310000
 8002040:	40020800 	.word	0x40020800
 8002044:	20000274 	.word	0x20000274
 8002048:	40004400 	.word	0x40004400
 800204c:	2000023c 	.word	0x2000023c
 8002050:	20000204 	.word	0x20000204
 8002054:	40000c00 	.word	0x40000c00
 8002058:	200002bc 	.word	0x200002bc
 800205c:	200002b8 	.word	0x200002b8

08002060 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002060:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 8002062:	4b26      	ldr	r3, [pc, #152]	; (80020fc <HAL_MspInit+0x9c>)
  __HAL_RCC_SYSCFG_CLK_ENABLE();
  __HAL_RCC_PWR_CLK_ENABLE();

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002064:	2007      	movs	r0, #7
  __HAL_RCC_COMP_CLK_ENABLE();
 8002066:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002068:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800206c:	625a      	str	r2, [r3, #36]	; 0x24
 800206e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002070:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8002074:	9201      	str	r2, [sp, #4]
 8002076:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002078:	6a1a      	ldr	r2, [r3, #32]
 800207a:	f042 0201 	orr.w	r2, r2, #1
 800207e:	621a      	str	r2, [r3, #32]
 8002080:	6a1a      	ldr	r2, [r3, #32]
 8002082:	f002 0201 	and.w	r2, r2, #1
 8002086:	9202      	str	r2, [sp, #8]
 8002088:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800208a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800208c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002090:	625a      	str	r2, [r3, #36]	; 0x24
 8002092:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002094:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002098:	9303      	str	r3, [sp, #12]
 800209a:	9b03      	ldr	r3, [sp, #12]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800209c:	f7fe fd36 	bl	8000b0c <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 80020a0:	2200      	movs	r2, #0
 80020a2:	f06f 000b 	mvn.w	r0, #11
 80020a6:	4611      	mov	r1, r2
 80020a8:	f7fe fd42 	bl	8000b30 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 80020ac:	2200      	movs	r2, #0
 80020ae:	f06f 000a 	mvn.w	r0, #10
 80020b2:	4611      	mov	r1, r2
 80020b4:	f7fe fd3c 	bl	8000b30 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 80020b8:	2200      	movs	r2, #0
 80020ba:	f06f 0009 	mvn.w	r0, #9
 80020be:	4611      	mov	r1, r2
 80020c0:	f7fe fd36 	bl	8000b30 <HAL_NVIC_SetPriority>
  /* SVC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVC_IRQn, 0, 0);
 80020c4:	2200      	movs	r2, #0
 80020c6:	f06f 0004 	mvn.w	r0, #4
 80020ca:	4611      	mov	r1, r2
 80020cc:	f7fe fd30 	bl	8000b30 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 80020d0:	2200      	movs	r2, #0
 80020d2:	f06f 0003 	mvn.w	r0, #3
 80020d6:	4611      	mov	r1, r2
 80020d8:	f7fe fd2a 	bl	8000b30 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 80020dc:	2200      	movs	r2, #0
 80020de:	f06f 0001 	mvn.w	r0, #1
 80020e2:	4611      	mov	r1, r2
 80020e4:	f7fe fd24 	bl	8000b30 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 80020e8:	2200      	movs	r2, #0
 80020ea:	f04f 30ff 	mov.w	r0, #4294967295
 80020ee:	4611      	mov	r1, r2
 80020f0:	f7fe fd1e 	bl	8000b30 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80020f4:	b005      	add	sp, #20
 80020f6:	f85d fb04 	ldr.w	pc, [sp], #4
 80020fa:	bf00      	nop
 80020fc:	40023800 	.word	0x40023800

08002100 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{

  if(htim_base->Instance==TIM2)
 8002100:	6803      	ldr	r3, [r0, #0]
{
 8002102:	b082      	sub	sp, #8
  if(htim_base->Instance==TIM2)
 8002104:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002108:	d10c      	bne.n	8002124 <HAL_TIM_Base_MspInit+0x24>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800210a:	f503 330e 	add.w	r3, r3, #145408	; 0x23800
 800210e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002110:	f042 0201 	orr.w	r2, r2, #1
 8002114:	625a      	str	r2, [r3, #36]	; 0x24
 8002116:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002118:	f003 0301 	and.w	r3, r3, #1
 800211c:	9300      	str	r3, [sp, #0]
 800211e:	9b00      	ldr	r3, [sp, #0]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8002120:	b002      	add	sp, #8
 8002122:	4770      	bx	lr
  else if(htim_base->Instance==TIM5)
 8002124:	4a06      	ldr	r2, [pc, #24]	; (8002140 <HAL_TIM_Base_MspInit+0x40>)
 8002126:	4293      	cmp	r3, r2
 8002128:	d1fa      	bne.n	8002120 <HAL_TIM_Base_MspInit+0x20>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800212a:	4b06      	ldr	r3, [pc, #24]	; (8002144 <HAL_TIM_Base_MspInit+0x44>)
 800212c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800212e:	f042 0208 	orr.w	r2, r2, #8
 8002132:	625a      	str	r2, [r3, #36]	; 0x24
 8002134:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002136:	f003 0308 	and.w	r3, r3, #8
 800213a:	9301      	str	r3, [sp, #4]
 800213c:	9b01      	ldr	r3, [sp, #4]
}
 800213e:	e7ef      	b.n	8002120 <HAL_TIM_Base_MspInit+0x20>
 8002140:	40000c00 	.word	0x40000c00
 8002144:	40023800 	.word	0x40023800

08002148 <HAL_UART_MspInit>:
  }

}

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002148:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==USART2)
 800214a:	6802      	ldr	r2, [r0, #0]
 800214c:	4b0f      	ldr	r3, [pc, #60]	; (800218c <HAL_UART_MspInit+0x44>)
 800214e:	429a      	cmp	r2, r3
 8002150:	d118      	bne.n	8002184 <HAL_UART_MspInit+0x3c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002152:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 8002156:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002158:	a901      	add	r1, sp, #4
    __HAL_RCC_USART2_CLK_ENABLE();
 800215a:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800215e:	625a      	str	r2, [r3, #36]	; 0x24
 8002160:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002162:	480b      	ldr	r0, [pc, #44]	; (8002190 <HAL_UART_MspInit+0x48>)
    __HAL_RCC_USART2_CLK_ENABLE();
 8002164:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002168:	9300      	str	r3, [sp, #0]
 800216a:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800216c:	230c      	movs	r3, #12
 800216e:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002170:	2302      	movs	r3, #2
 8002172:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002174:	2301      	movs	r3, #1
 8002176:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002178:	2303      	movs	r3, #3
 800217a:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800217c:	2307      	movs	r3, #7
 800217e:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002180:	f7fe fd3e 	bl	8000c00 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002184:	b007      	add	sp, #28
 8002186:	f85d fb04 	ldr.w	pc, [sp], #4
 800218a:	bf00      	nop
 800218c:	40004400 	.word	0x40004400
 8002190:	40020000 	.word	0x40020000

08002194 <send_message>:
double distance;

extern TIM_HandleTypeDef htim5;
extern UART_HandleTypeDef huart2;

void send_message(char* caption, double value, char* unit){
 8002194:	b510      	push	{r4, lr}
 8002196:	b08e      	sub	sp, #56	; 0x38
	uint8_t data[40];

	sprintf(data, "%s: %8.2lf %2s \n", caption, value, unit);
 8002198:	9910      	ldr	r1, [sp, #64]	; 0x40
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 800219a:	4c0f      	ldr	r4, [pc, #60]	; (80021d8 <send_message+0x44>)
	sprintf(data, "%s: %8.2lf %2s \n", caption, value, unit);
 800219c:	e9cd 2300 	strd	r2, r3, [sp]
 80021a0:	9102      	str	r1, [sp, #8]
 80021a2:	4602      	mov	r2, r0
 80021a4:	490d      	ldr	r1, [pc, #52]	; (80021dc <send_message+0x48>)
 80021a6:	a804      	add	r0, sp, #16
 80021a8:	f000 fd5a 	bl	8002c60 <siprintf>
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 80021ac:	2201      	movs	r2, #1
 80021ae:	2120      	movs	r1, #32
 80021b0:	4620      	mov	r0, r4
 80021b2:	f7fe fdf7 	bl	8000da4 <HAL_GPIO_WritePin>
	HAL_UART_Transmit(&huart2, data, (uint16_t) strlen(data), 100);
 80021b6:	a804      	add	r0, sp, #16
 80021b8:	f7fd ffe2 	bl	8000180 <strlen>
 80021bc:	2364      	movs	r3, #100	; 0x64
 80021be:	b282      	uxth	r2, r0
 80021c0:	a904      	add	r1, sp, #16
 80021c2:	4807      	ldr	r0, [pc, #28]	; (80021e0 <send_message+0x4c>)
 80021c4:	f7ff fdb4 	bl	8001d30 <HAL_UART_Transmit>
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80021c8:	2200      	movs	r2, #0
 80021ca:	2120      	movs	r1, #32
 80021cc:	4620      	mov	r0, r4
 80021ce:	f7fe fde9 	bl	8000da4 <HAL_GPIO_WritePin>
}
 80021d2:	b00e      	add	sp, #56	; 0x38
 80021d4:	bd10      	pop	{r4, pc}
 80021d6:	bf00      	nop
 80021d8:	40020000 	.word	0x40020000
 80021dc:	080044cd 	.word	0x080044cd
 80021e0:	20000274 	.word	0x20000274

080021e4 <SysTick_Handler>:
/******************************************************************************/

/**
 * @brief This function handles System tick timer.
 */
void SysTick_Handler(void) {
 80021e4:	b508      	push	{r3, lr}
	/* USER CODE BEGIN SysTick_IRQn 0 */

	/* USER CODE END SysTick_IRQn 0 */
	HAL_IncTick();
 80021e6:	f7fe fc83 	bl	8000af0 <HAL_IncTick>
	HAL_SYSTICK_IRQHandler();
	/* USER CODE BEGIN SysTick_IRQn 1 */

	/* USER CODE END SysTick_IRQn 1 */
}
 80021ea:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	HAL_SYSTICK_IRQHandler();
 80021ee:	f7fe bd02 	b.w	8000bf6 <HAL_SYSTICK_IRQHandler>
	...

080021f4 <EXTI9_5_IRQHandler>:
/******************************************************************************/

/**
 * @brief This function handles EXTI line[9:5] interrupts.
 */
void EXTI9_5_IRQHandler(void) {
 80021f4:	b5d3      	push	{r0, r1, r4, r6, r7, lr}
	/* USER CODE BEGIN EXTI9_5_IRQn 0 */
	if (flag) {
 80021f6:	491f      	ldr	r1, [pc, #124]	; (8002274 <EXTI9_5_IRQHandler+0x80>)
 80021f8:	4b1f      	ldr	r3, [pc, #124]	; (8002278 <EXTI9_5_IRQHandler+0x84>)
 80021fa:	680a      	ldr	r2, [r1, #0]
 80021fc:	b14a      	cbz	r2, 8002212 <EXTI9_5_IRQHandler+0x1e>
		__HAL_TIM_SET_COUNTER(&htim5, 0);
 80021fe:	681a      	ldr	r2, [r3, #0]
 8002200:	2300      	movs	r3, #0
 8002202:	6253      	str	r3, [r2, #36]	; 0x24
		flag = 0;
 8002204:	600b      	str	r3, [r1, #0]
			HAL_UART_Transmit(&huart2, "Echo timeout.\n", (uint16_t) strlen("Echo timeout.\n"), 100);
			HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
		}
	}
	/* USER CODE END EXTI9_5_IRQn 0 */
	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8002206:	2040      	movs	r0, #64	; 0x40
	/* USER CODE BEGIN EXTI9_5_IRQn 1 */

	/* USER CODE END EXTI9_5_IRQn 1 */
}
 8002208:	b002      	add	sp, #8
 800220a:	e8bd 40d0 	ldmia.w	sp!, {r4, r6, r7, lr}
	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 800220e:	f7fe bdd3 	b.w	8000db8 <HAL_GPIO_EXTI_IRQHandler>
		tick = __HAL_TIM_GET_COUNTER(&htim5);
 8002212:	681b      	ldr	r3, [r3, #0]
		ack = 0;
 8002214:	4919      	ldr	r1, [pc, #100]	; (800227c <EXTI9_5_IRQHandler+0x88>)
		tick = __HAL_TIM_GET_COUNTER(&htim5);
 8002216:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8002218:	4b19      	ldr	r3, [pc, #100]	; (8002280 <EXTI9_5_IRQHandler+0x8c>)
		ack = 0;
 800221a:	600a      	str	r2, [r1, #0]
		tick = __HAL_TIM_GET_COUNTER(&htim5);
 800221c:	6018      	str	r0, [r3, #0]
		distance = (double) tick / 58;
 800221e:	f7fe f8f9 	bl	8000414 <__aeabi_ui2d>
 8002222:	2200      	movs	r2, #0
 8002224:	4b17      	ldr	r3, [pc, #92]	; (8002284 <EXTI9_5_IRQHandler+0x90>)
 8002226:	f7fe fa95 	bl	8000754 <__aeabi_ddiv>
 800222a:	4606      	mov	r6, r0
 800222c:	460f      	mov	r7, r1
 800222e:	4b16      	ldr	r3, [pc, #88]	; (8002288 <EXTI9_5_IRQHandler+0x94>)
		if (distance < 1000) {
 8002230:	2200      	movs	r2, #0
		distance = (double) tick / 58;
 8002232:	e9c3 6700 	strd	r6, r7, [r3]
		if (distance < 1000) {
 8002236:	4b15      	ldr	r3, [pc, #84]	; (800228c <EXTI9_5_IRQHandler+0x98>)
 8002238:	f7fe fbd4 	bl	80009e4 <__aeabi_dcmplt>
 800223c:	4604      	mov	r4, r0
 800223e:	b138      	cbz	r0, 8002250 <EXTI9_5_IRQHandler+0x5c>
			send_message("Distance: ", distance, "cm");
 8002240:	4b13      	ldr	r3, [pc, #76]	; (8002290 <EXTI9_5_IRQHandler+0x9c>)
 8002242:	4632      	mov	r2, r6
 8002244:	9300      	str	r3, [sp, #0]
 8002246:	4813      	ldr	r0, [pc, #76]	; (8002294 <EXTI9_5_IRQHandler+0xa0>)
 8002248:	463b      	mov	r3, r7
 800224a:	f7ff ffa3 	bl	8002194 <send_message>
 800224e:	e7da      	b.n	8002206 <EXTI9_5_IRQHandler+0x12>
			HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8002250:	2201      	movs	r2, #1
 8002252:	2120      	movs	r1, #32
 8002254:	4810      	ldr	r0, [pc, #64]	; (8002298 <EXTI9_5_IRQHandler+0xa4>)
 8002256:	f7fe fda5 	bl	8000da4 <HAL_GPIO_WritePin>
			HAL_UART_Transmit(&huart2, "Echo timeout.\n", (uint16_t) strlen("Echo timeout.\n"), 100);
 800225a:	2364      	movs	r3, #100	; 0x64
 800225c:	220e      	movs	r2, #14
 800225e:	490f      	ldr	r1, [pc, #60]	; (800229c <EXTI9_5_IRQHandler+0xa8>)
 8002260:	480f      	ldr	r0, [pc, #60]	; (80022a0 <EXTI9_5_IRQHandler+0xac>)
 8002262:	f7ff fd65 	bl	8001d30 <HAL_UART_Transmit>
			HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8002266:	4622      	mov	r2, r4
 8002268:	2120      	movs	r1, #32
 800226a:	480b      	ldr	r0, [pc, #44]	; (8002298 <EXTI9_5_IRQHandler+0xa4>)
 800226c:	f7fe fd9a 	bl	8000da4 <HAL_GPIO_WritePin>
 8002270:	e7c9      	b.n	8002206 <EXTI9_5_IRQHandler+0x12>
 8002272:	bf00      	nop
 8002274:	200002bc 	.word	0x200002bc
 8002278:	20000204 	.word	0x20000204
 800227c:	200002b8 	.word	0x200002b8
 8002280:	200002c8 	.word	0x200002c8
 8002284:	404d0000 	.word	0x404d0000
 8002288:	200002c0 	.word	0x200002c0
 800228c:	408f4000 	.word	0x408f4000
 8002290:	080044bb 	.word	0x080044bb
 8002294:	080044b0 	.word	0x080044b0
 8002298:	40020000 	.word	0x40020000
 800229c:	080044be 	.word	0x080044be
 80022a0:	20000274 	.word	0x20000274

080022a4 <EXTI15_10_IRQHandler>:

/**
 * @brief This function handles EXTI line[15:10] interrupts.
 */
void EXTI15_10_IRQHandler(void) {
 80022a4:	b508      	push	{r3, lr}
	/* USER CODE BEGIN EXTI15_10_IRQn 0 */
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 80022a6:	4805      	ldr	r0, [pc, #20]	; (80022bc <EXTI15_10_IRQHandler+0x18>)
 80022a8:	2120      	movs	r1, #32
 80022aa:	f7fe fd80 	bl	8000dae <HAL_GPIO_TogglePin>
	/* USER CODE END EXTI15_10_IRQn 0 */
	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
	/* USER CODE BEGIN EXTI15_10_IRQn 1 */

	/* USER CODE END EXTI15_10_IRQn 1 */
}
 80022ae:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80022b2:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80022b6:	f7fe bd7f 	b.w	8000db8 <HAL_GPIO_EXTI_IRQHandler>
 80022ba:	bf00      	nop
 80022bc:	40020000 	.word	0x40020000

080022c0 <SystemInit>:
  * @retval None
  */
void SystemInit (void)
{
  /*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100;
 80022c0:	4b0e      	ldr	r3, [pc, #56]	; (80022fc <SystemInit+0x3c>)
 80022c2:	681a      	ldr	r2, [r3, #0]
 80022c4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80022c8:	601a      	str	r2, [r3, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t)0x88FFC00C;
 80022ca:	6899      	ldr	r1, [r3, #8]
 80022cc:	4a0c      	ldr	r2, [pc, #48]	; (8002300 <SystemInit+0x40>)
 80022ce:	400a      	ands	r2, r1
 80022d0:	609a      	str	r2, [r3, #8]
  
  /*!< Reset HSION, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xEEFEFFFE;
 80022d2:	681a      	ldr	r2, [r3, #0]
 80022d4:	f022 5288 	bic.w	r2, r2, #285212672	; 0x11000000
 80022d8:	f022 1201 	bic.w	r2, r2, #65537	; 0x10001
 80022dc:	601a      	str	r2, [r3, #0]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80022de:	681a      	ldr	r2, [r3, #0]
 80022e0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80022e4:	601a      	str	r2, [r3, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFF;
 80022e6:	689a      	ldr	r2, [r3, #8]
 80022e8:	f422 027d 	bic.w	r2, r2, #16580608	; 0xfd0000
 80022ec:	609a      	str	r2, [r3, #8]

  /*!< Disable all interrupts */
  RCC->CIR = 0x00000000;
 80022ee:	2200      	movs	r2, #0
 80022f0:	60da      	str	r2, [r3, #12]
#endif /* DATA_IN_ExtSRAM */
    
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80022f2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80022f6:	4b03      	ldr	r3, [pc, #12]	; (8002304 <SystemInit+0x44>)
 80022f8:	609a      	str	r2, [r3, #8]
 80022fa:	4770      	bx	lr
 80022fc:	40023800 	.word	0x40023800
 8002300:	88ffc00c 	.word	0x88ffc00c
 8002304:	e000ed00 	.word	0xe000ed00

08002308 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8002308:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800230a:	e003      	b.n	8002314 <LoopCopyDataInit>

0800230c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 800230c:	4b0b      	ldr	r3, [pc, #44]	; (800233c <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800230e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8002310:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8002312:	3104      	adds	r1, #4

08002314 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8002314:	480a      	ldr	r0, [pc, #40]	; (8002340 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8002316:	4b0b      	ldr	r3, [pc, #44]	; (8002344 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8002318:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800231a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 800231c:	d3f6      	bcc.n	800230c <CopyDataInit>
  ldr r2, =_sbss
 800231e:	4a0a      	ldr	r2, [pc, #40]	; (8002348 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8002320:	e002      	b.n	8002328 <LoopFillZerobss>

08002322 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8002322:	2300      	movs	r3, #0
  str r3, [r2], #4
 8002324:	f842 3b04 	str.w	r3, [r2], #4

08002328 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8002328:	4b08      	ldr	r3, [pc, #32]	; (800234c <LoopFillZerobss+0x24>)
  cmp r2, r3
 800232a:	429a      	cmp	r2, r3
  bcc FillZerobss
 800232c:	d3f9      	bcc.n	8002322 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800232e:	f7ff ffc7 	bl	80022c0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002332:	f000 f80f 	bl	8002354 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002336:	f7ff fdad 	bl	8001e94 <main>
  bx lr
 800233a:	4770      	bx	lr
  ldr r3, =_sidata
 800233c:	08004760 	.word	0x08004760
  ldr r0, =_sdata
 8002340:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8002344:	200001d4 	.word	0x200001d4
  ldr r2, =_sbss
 8002348:	200001d8 	.word	0x200001d8
  ldr r3, = _ebss
 800234c:	200002d0 	.word	0x200002d0

08002350 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002350:	e7fe      	b.n	8002350 <ADC1_IRQHandler>
	...

08002354 <__libc_init_array>:
 8002354:	b570      	push	{r4, r5, r6, lr}
 8002356:	2500      	movs	r5, #0
 8002358:	4e0c      	ldr	r6, [pc, #48]	; (800238c <__libc_init_array+0x38>)
 800235a:	4c0d      	ldr	r4, [pc, #52]	; (8002390 <__libc_init_array+0x3c>)
 800235c:	1ba4      	subs	r4, r4, r6
 800235e:	10a4      	asrs	r4, r4, #2
 8002360:	42a5      	cmp	r5, r4
 8002362:	d109      	bne.n	8002378 <__libc_init_array+0x24>
 8002364:	f002 f898 	bl	8004498 <_init>
 8002368:	2500      	movs	r5, #0
 800236a:	4e0a      	ldr	r6, [pc, #40]	; (8002394 <__libc_init_array+0x40>)
 800236c:	4c0a      	ldr	r4, [pc, #40]	; (8002398 <__libc_init_array+0x44>)
 800236e:	1ba4      	subs	r4, r4, r6
 8002370:	10a4      	asrs	r4, r4, #2
 8002372:	42a5      	cmp	r5, r4
 8002374:	d105      	bne.n	8002382 <__libc_init_array+0x2e>
 8002376:	bd70      	pop	{r4, r5, r6, pc}
 8002378:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800237c:	4798      	blx	r3
 800237e:	3501      	adds	r5, #1
 8002380:	e7ee      	b.n	8002360 <__libc_init_array+0xc>
 8002382:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002386:	4798      	blx	r3
 8002388:	3501      	adds	r5, #1
 800238a:	e7f2      	b.n	8002372 <__libc_init_array+0x1e>
 800238c:	08004758 	.word	0x08004758
 8002390:	08004758 	.word	0x08004758
 8002394:	08004758 	.word	0x08004758
 8002398:	0800475c 	.word	0x0800475c

0800239c <__cvt>:
 800239c:	2b00      	cmp	r3, #0
 800239e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80023a2:	461e      	mov	r6, r3
 80023a4:	bfbb      	ittet	lt
 80023a6:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 80023aa:	461e      	movlt	r6, r3
 80023ac:	2300      	movge	r3, #0
 80023ae:	232d      	movlt	r3, #45	; 0x2d
 80023b0:	b088      	sub	sp, #32
 80023b2:	9f14      	ldr	r7, [sp, #80]	; 0x50
 80023b4:	9912      	ldr	r1, [sp, #72]	; 0x48
 80023b6:	f027 0720 	bic.w	r7, r7, #32
 80023ba:	2f46      	cmp	r7, #70	; 0x46
 80023bc:	4614      	mov	r4, r2
 80023be:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80023c0:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 80023c4:	700b      	strb	r3, [r1, #0]
 80023c6:	d004      	beq.n	80023d2 <__cvt+0x36>
 80023c8:	2f45      	cmp	r7, #69	; 0x45
 80023ca:	d100      	bne.n	80023ce <__cvt+0x32>
 80023cc:	3501      	adds	r5, #1
 80023ce:	2302      	movs	r3, #2
 80023d0:	e000      	b.n	80023d4 <__cvt+0x38>
 80023d2:	2303      	movs	r3, #3
 80023d4:	aa07      	add	r2, sp, #28
 80023d6:	9204      	str	r2, [sp, #16]
 80023d8:	aa06      	add	r2, sp, #24
 80023da:	9203      	str	r2, [sp, #12]
 80023dc:	e88d 0428 	stmia.w	sp, {r3, r5, sl}
 80023e0:	4622      	mov	r2, r4
 80023e2:	4633      	mov	r3, r6
 80023e4:	f000 fcec 	bl	8002dc0 <_dtoa_r>
 80023e8:	2f47      	cmp	r7, #71	; 0x47
 80023ea:	4680      	mov	r8, r0
 80023ec:	d102      	bne.n	80023f4 <__cvt+0x58>
 80023ee:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80023f0:	07db      	lsls	r3, r3, #31
 80023f2:	d526      	bpl.n	8002442 <__cvt+0xa6>
 80023f4:	2f46      	cmp	r7, #70	; 0x46
 80023f6:	eb08 0905 	add.w	r9, r8, r5
 80023fa:	d111      	bne.n	8002420 <__cvt+0x84>
 80023fc:	f898 3000 	ldrb.w	r3, [r8]
 8002400:	2b30      	cmp	r3, #48	; 0x30
 8002402:	d10a      	bne.n	800241a <__cvt+0x7e>
 8002404:	2200      	movs	r2, #0
 8002406:	2300      	movs	r3, #0
 8002408:	4620      	mov	r0, r4
 800240a:	4631      	mov	r1, r6
 800240c:	f7fe fae0 	bl	80009d0 <__aeabi_dcmpeq>
 8002410:	b918      	cbnz	r0, 800241a <__cvt+0x7e>
 8002412:	f1c5 0501 	rsb	r5, r5, #1
 8002416:	f8ca 5000 	str.w	r5, [sl]
 800241a:	f8da 3000 	ldr.w	r3, [sl]
 800241e:	4499      	add	r9, r3
 8002420:	2200      	movs	r2, #0
 8002422:	2300      	movs	r3, #0
 8002424:	4620      	mov	r0, r4
 8002426:	4631      	mov	r1, r6
 8002428:	f7fe fad2 	bl	80009d0 <__aeabi_dcmpeq>
 800242c:	b938      	cbnz	r0, 800243e <__cvt+0xa2>
 800242e:	2230      	movs	r2, #48	; 0x30
 8002430:	9b07      	ldr	r3, [sp, #28]
 8002432:	4599      	cmp	r9, r3
 8002434:	d905      	bls.n	8002442 <__cvt+0xa6>
 8002436:	1c59      	adds	r1, r3, #1
 8002438:	9107      	str	r1, [sp, #28]
 800243a:	701a      	strb	r2, [r3, #0]
 800243c:	e7f8      	b.n	8002430 <__cvt+0x94>
 800243e:	f8cd 901c 	str.w	r9, [sp, #28]
 8002442:	4640      	mov	r0, r8
 8002444:	9b07      	ldr	r3, [sp, #28]
 8002446:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8002448:	eba3 0308 	sub.w	r3, r3, r8
 800244c:	6013      	str	r3, [r2, #0]
 800244e:	b008      	add	sp, #32
 8002450:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08002454 <__exponent>:
 8002454:	4603      	mov	r3, r0
 8002456:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002458:	2900      	cmp	r1, #0
 800245a:	f803 2b02 	strb.w	r2, [r3], #2
 800245e:	bfb6      	itet	lt
 8002460:	222d      	movlt	r2, #45	; 0x2d
 8002462:	222b      	movge	r2, #43	; 0x2b
 8002464:	4249      	neglt	r1, r1
 8002466:	2909      	cmp	r1, #9
 8002468:	7042      	strb	r2, [r0, #1]
 800246a:	dd21      	ble.n	80024b0 <__exponent+0x5c>
 800246c:	f10d 0207 	add.w	r2, sp, #7
 8002470:	4617      	mov	r7, r2
 8002472:	260a      	movs	r6, #10
 8002474:	fb91 f5f6 	sdiv	r5, r1, r6
 8002478:	fb06 1115 	mls	r1, r6, r5, r1
 800247c:	2d09      	cmp	r5, #9
 800247e:	f101 0130 	add.w	r1, r1, #48	; 0x30
 8002482:	f802 1c01 	strb.w	r1, [r2, #-1]
 8002486:	f102 34ff 	add.w	r4, r2, #4294967295
 800248a:	4629      	mov	r1, r5
 800248c:	dc09      	bgt.n	80024a2 <__exponent+0x4e>
 800248e:	3130      	adds	r1, #48	; 0x30
 8002490:	3a02      	subs	r2, #2
 8002492:	f804 1c01 	strb.w	r1, [r4, #-1]
 8002496:	42ba      	cmp	r2, r7
 8002498:	461c      	mov	r4, r3
 800249a:	d304      	bcc.n	80024a6 <__exponent+0x52>
 800249c:	1a20      	subs	r0, r4, r0
 800249e:	b003      	add	sp, #12
 80024a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80024a2:	4622      	mov	r2, r4
 80024a4:	e7e6      	b.n	8002474 <__exponent+0x20>
 80024a6:	f812 1b01 	ldrb.w	r1, [r2], #1
 80024aa:	f803 1b01 	strb.w	r1, [r3], #1
 80024ae:	e7f2      	b.n	8002496 <__exponent+0x42>
 80024b0:	2230      	movs	r2, #48	; 0x30
 80024b2:	461c      	mov	r4, r3
 80024b4:	4411      	add	r1, r2
 80024b6:	f804 2b02 	strb.w	r2, [r4], #2
 80024ba:	7059      	strb	r1, [r3, #1]
 80024bc:	e7ee      	b.n	800249c <__exponent+0x48>
	...

080024c0 <_printf_float>:
 80024c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80024c4:	b091      	sub	sp, #68	; 0x44
 80024c6:	460c      	mov	r4, r1
 80024c8:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 80024ca:	4693      	mov	fp, r2
 80024cc:	461e      	mov	r6, r3
 80024ce:	4605      	mov	r5, r0
 80024d0:	f001 fa4a 	bl	8003968 <_localeconv_r>
 80024d4:	6803      	ldr	r3, [r0, #0]
 80024d6:	4618      	mov	r0, r3
 80024d8:	9309      	str	r3, [sp, #36]	; 0x24
 80024da:	f7fd fe51 	bl	8000180 <strlen>
 80024de:	2300      	movs	r3, #0
 80024e0:	930e      	str	r3, [sp, #56]	; 0x38
 80024e2:	683b      	ldr	r3, [r7, #0]
 80024e4:	900a      	str	r0, [sp, #40]	; 0x28
 80024e6:	3307      	adds	r3, #7
 80024e8:	f023 0307 	bic.w	r3, r3, #7
 80024ec:	f103 0208 	add.w	r2, r3, #8
 80024f0:	f894 8018 	ldrb.w	r8, [r4, #24]
 80024f4:	f8d4 a000 	ldr.w	sl, [r4]
 80024f8:	603a      	str	r2, [r7, #0]
 80024fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024fe:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8002502:	f8d4 904c 	ldr.w	r9, [r4, #76]	; 0x4c
 8002506:	6ca7      	ldr	r7, [r4, #72]	; 0x48
 8002508:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800250c:	930b      	str	r3, [sp, #44]	; 0x2c
 800250e:	f04f 32ff 	mov.w	r2, #4294967295
 8002512:	4ba6      	ldr	r3, [pc, #664]	; (80027ac <_printf_float+0x2ec>)
 8002514:	4638      	mov	r0, r7
 8002516:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8002518:	f7fe fa8c 	bl	8000a34 <__aeabi_dcmpun>
 800251c:	2800      	cmp	r0, #0
 800251e:	f040 81f7 	bne.w	8002910 <_printf_float+0x450>
 8002522:	f04f 32ff 	mov.w	r2, #4294967295
 8002526:	4ba1      	ldr	r3, [pc, #644]	; (80027ac <_printf_float+0x2ec>)
 8002528:	4638      	mov	r0, r7
 800252a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800252c:	f7fe fa64 	bl	80009f8 <__aeabi_dcmple>
 8002530:	2800      	cmp	r0, #0
 8002532:	f040 81ed 	bne.w	8002910 <_printf_float+0x450>
 8002536:	2200      	movs	r2, #0
 8002538:	2300      	movs	r3, #0
 800253a:	4638      	mov	r0, r7
 800253c:	4649      	mov	r1, r9
 800253e:	f7fe fa51 	bl	80009e4 <__aeabi_dcmplt>
 8002542:	b110      	cbz	r0, 800254a <_printf_float+0x8a>
 8002544:	232d      	movs	r3, #45	; 0x2d
 8002546:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800254a:	4b99      	ldr	r3, [pc, #612]	; (80027b0 <_printf_float+0x2f0>)
 800254c:	4f99      	ldr	r7, [pc, #612]	; (80027b4 <_printf_float+0x2f4>)
 800254e:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8002552:	bf98      	it	ls
 8002554:	461f      	movls	r7, r3
 8002556:	2303      	movs	r3, #3
 8002558:	f04f 0900 	mov.w	r9, #0
 800255c:	6123      	str	r3, [r4, #16]
 800255e:	f02a 0304 	bic.w	r3, sl, #4
 8002562:	6023      	str	r3, [r4, #0]
 8002564:	9600      	str	r6, [sp, #0]
 8002566:	465b      	mov	r3, fp
 8002568:	aa0f      	add	r2, sp, #60	; 0x3c
 800256a:	4621      	mov	r1, r4
 800256c:	4628      	mov	r0, r5
 800256e:	f000 f9df 	bl	8002930 <_printf_common>
 8002572:	3001      	adds	r0, #1
 8002574:	f040 809a 	bne.w	80026ac <_printf_float+0x1ec>
 8002578:	f04f 30ff 	mov.w	r0, #4294967295
 800257c:	b011      	add	sp, #68	; 0x44
 800257e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002582:	6862      	ldr	r2, [r4, #4]
 8002584:	a80e      	add	r0, sp, #56	; 0x38
 8002586:	1c53      	adds	r3, r2, #1
 8002588:	f10d 0e34 	add.w	lr, sp, #52	; 0x34
 800258c:	f44a 6380 	orr.w	r3, sl, #1024	; 0x400
 8002590:	d141      	bne.n	8002616 <_printf_float+0x156>
 8002592:	2206      	movs	r2, #6
 8002594:	6062      	str	r2, [r4, #4]
 8002596:	2100      	movs	r1, #0
 8002598:	6023      	str	r3, [r4, #0]
 800259a:	9301      	str	r3, [sp, #4]
 800259c:	6863      	ldr	r3, [r4, #4]
 800259e:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 80025a2:	9005      	str	r0, [sp, #20]
 80025a4:	9202      	str	r2, [sp, #8]
 80025a6:	9300      	str	r3, [sp, #0]
 80025a8:	463a      	mov	r2, r7
 80025aa:	464b      	mov	r3, r9
 80025ac:	9106      	str	r1, [sp, #24]
 80025ae:	f8cd 8010 	str.w	r8, [sp, #16]
 80025b2:	f8cd e00c 	str.w	lr, [sp, #12]
 80025b6:	4628      	mov	r0, r5
 80025b8:	f7ff fef0 	bl	800239c <__cvt>
 80025bc:	f008 03df 	and.w	r3, r8, #223	; 0xdf
 80025c0:	2b47      	cmp	r3, #71	; 0x47
 80025c2:	4607      	mov	r7, r0
 80025c4:	d109      	bne.n	80025da <_printf_float+0x11a>
 80025c6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80025c8:	1cd8      	adds	r0, r3, #3
 80025ca:	db02      	blt.n	80025d2 <_printf_float+0x112>
 80025cc:	6862      	ldr	r2, [r4, #4]
 80025ce:	4293      	cmp	r3, r2
 80025d0:	dd59      	ble.n	8002686 <_printf_float+0x1c6>
 80025d2:	f1a8 0802 	sub.w	r8, r8, #2
 80025d6:	fa5f f888 	uxtb.w	r8, r8
 80025da:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 80025de:	990d      	ldr	r1, [sp, #52]	; 0x34
 80025e0:	d836      	bhi.n	8002650 <_printf_float+0x190>
 80025e2:	3901      	subs	r1, #1
 80025e4:	4642      	mov	r2, r8
 80025e6:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80025ea:	910d      	str	r1, [sp, #52]	; 0x34
 80025ec:	f7ff ff32 	bl	8002454 <__exponent>
 80025f0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80025f2:	4681      	mov	r9, r0
 80025f4:	1883      	adds	r3, r0, r2
 80025f6:	2a01      	cmp	r2, #1
 80025f8:	6123      	str	r3, [r4, #16]
 80025fa:	dc02      	bgt.n	8002602 <_printf_float+0x142>
 80025fc:	6822      	ldr	r2, [r4, #0]
 80025fe:	07d1      	lsls	r1, r2, #31
 8002600:	d501      	bpl.n	8002606 <_printf_float+0x146>
 8002602:	3301      	adds	r3, #1
 8002604:	6123      	str	r3, [r4, #16]
 8002606:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800260a:	2b00      	cmp	r3, #0
 800260c:	d0aa      	beq.n	8002564 <_printf_float+0xa4>
 800260e:	232d      	movs	r3, #45	; 0x2d
 8002610:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002614:	e7a6      	b.n	8002564 <_printf_float+0xa4>
 8002616:	f1b8 0f67 	cmp.w	r8, #103	; 0x67
 800261a:	d002      	beq.n	8002622 <_printf_float+0x162>
 800261c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8002620:	d1b9      	bne.n	8002596 <_printf_float+0xd6>
 8002622:	b19a      	cbz	r2, 800264c <_printf_float+0x18c>
 8002624:	2100      	movs	r1, #0
 8002626:	9106      	str	r1, [sp, #24]
 8002628:	f10d 0133 	add.w	r1, sp, #51	; 0x33
 800262c:	e88d 000c 	stmia.w	sp, {r2, r3}
 8002630:	6023      	str	r3, [r4, #0]
 8002632:	9005      	str	r0, [sp, #20]
 8002634:	463a      	mov	r2, r7
 8002636:	f8cd 8010 	str.w	r8, [sp, #16]
 800263a:	f8cd e00c 	str.w	lr, [sp, #12]
 800263e:	9102      	str	r1, [sp, #8]
 8002640:	464b      	mov	r3, r9
 8002642:	4628      	mov	r0, r5
 8002644:	f7ff feaa 	bl	800239c <__cvt>
 8002648:	4607      	mov	r7, r0
 800264a:	e7bc      	b.n	80025c6 <_printf_float+0x106>
 800264c:	2201      	movs	r2, #1
 800264e:	e7a1      	b.n	8002594 <_printf_float+0xd4>
 8002650:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
 8002654:	d119      	bne.n	800268a <_printf_float+0x1ca>
 8002656:	2900      	cmp	r1, #0
 8002658:	6863      	ldr	r3, [r4, #4]
 800265a:	dd0c      	ble.n	8002676 <_printf_float+0x1b6>
 800265c:	6121      	str	r1, [r4, #16]
 800265e:	b913      	cbnz	r3, 8002666 <_printf_float+0x1a6>
 8002660:	6822      	ldr	r2, [r4, #0]
 8002662:	07d2      	lsls	r2, r2, #31
 8002664:	d502      	bpl.n	800266c <_printf_float+0x1ac>
 8002666:	3301      	adds	r3, #1
 8002668:	440b      	add	r3, r1
 800266a:	6123      	str	r3, [r4, #16]
 800266c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800266e:	f04f 0900 	mov.w	r9, #0
 8002672:	65a3      	str	r3, [r4, #88]	; 0x58
 8002674:	e7c7      	b.n	8002606 <_printf_float+0x146>
 8002676:	b913      	cbnz	r3, 800267e <_printf_float+0x1be>
 8002678:	6822      	ldr	r2, [r4, #0]
 800267a:	07d0      	lsls	r0, r2, #31
 800267c:	d501      	bpl.n	8002682 <_printf_float+0x1c2>
 800267e:	3302      	adds	r3, #2
 8002680:	e7f3      	b.n	800266a <_printf_float+0x1aa>
 8002682:	2301      	movs	r3, #1
 8002684:	e7f1      	b.n	800266a <_printf_float+0x1aa>
 8002686:	f04f 0867 	mov.w	r8, #103	; 0x67
 800268a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800268c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800268e:	4293      	cmp	r3, r2
 8002690:	db05      	blt.n	800269e <_printf_float+0x1de>
 8002692:	6822      	ldr	r2, [r4, #0]
 8002694:	6123      	str	r3, [r4, #16]
 8002696:	07d1      	lsls	r1, r2, #31
 8002698:	d5e8      	bpl.n	800266c <_printf_float+0x1ac>
 800269a:	3301      	adds	r3, #1
 800269c:	e7e5      	b.n	800266a <_printf_float+0x1aa>
 800269e:	2b00      	cmp	r3, #0
 80026a0:	bfcc      	ite	gt
 80026a2:	2301      	movgt	r3, #1
 80026a4:	f1c3 0302 	rsble	r3, r3, #2
 80026a8:	4413      	add	r3, r2
 80026aa:	e7de      	b.n	800266a <_printf_float+0x1aa>
 80026ac:	6823      	ldr	r3, [r4, #0]
 80026ae:	055a      	lsls	r2, r3, #21
 80026b0:	d407      	bmi.n	80026c2 <_printf_float+0x202>
 80026b2:	6923      	ldr	r3, [r4, #16]
 80026b4:	463a      	mov	r2, r7
 80026b6:	4659      	mov	r1, fp
 80026b8:	4628      	mov	r0, r5
 80026ba:	47b0      	blx	r6
 80026bc:	3001      	adds	r0, #1
 80026be:	d12a      	bne.n	8002716 <_printf_float+0x256>
 80026c0:	e75a      	b.n	8002578 <_printf_float+0xb8>
 80026c2:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 80026c6:	f240 80dc 	bls.w	8002882 <_printf_float+0x3c2>
 80026ca:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80026ce:	2200      	movs	r2, #0
 80026d0:	2300      	movs	r3, #0
 80026d2:	f7fe f97d 	bl	80009d0 <__aeabi_dcmpeq>
 80026d6:	2800      	cmp	r0, #0
 80026d8:	d039      	beq.n	800274e <_printf_float+0x28e>
 80026da:	2301      	movs	r3, #1
 80026dc:	4a36      	ldr	r2, [pc, #216]	; (80027b8 <_printf_float+0x2f8>)
 80026de:	4659      	mov	r1, fp
 80026e0:	4628      	mov	r0, r5
 80026e2:	47b0      	blx	r6
 80026e4:	3001      	adds	r0, #1
 80026e6:	f43f af47 	beq.w	8002578 <_printf_float+0xb8>
 80026ea:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80026ec:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80026ee:	429a      	cmp	r2, r3
 80026f0:	db02      	blt.n	80026f8 <_printf_float+0x238>
 80026f2:	6823      	ldr	r3, [r4, #0]
 80026f4:	07d8      	lsls	r0, r3, #31
 80026f6:	d50e      	bpl.n	8002716 <_printf_float+0x256>
 80026f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80026fa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80026fc:	4659      	mov	r1, fp
 80026fe:	4628      	mov	r0, r5
 8002700:	47b0      	blx	r6
 8002702:	3001      	adds	r0, #1
 8002704:	f43f af38 	beq.w	8002578 <_printf_float+0xb8>
 8002708:	2700      	movs	r7, #0
 800270a:	f104 081a 	add.w	r8, r4, #26
 800270e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002710:	3b01      	subs	r3, #1
 8002712:	429f      	cmp	r7, r3
 8002714:	db11      	blt.n	800273a <_printf_float+0x27a>
 8002716:	6823      	ldr	r3, [r4, #0]
 8002718:	079f      	lsls	r7, r3, #30
 800271a:	d508      	bpl.n	800272e <_printf_float+0x26e>
 800271c:	2700      	movs	r7, #0
 800271e:	f104 0819 	add.w	r8, r4, #25
 8002722:	68e3      	ldr	r3, [r4, #12]
 8002724:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8002726:	1a9b      	subs	r3, r3, r2
 8002728:	429f      	cmp	r7, r3
 800272a:	f2c0 80e7 	blt.w	80028fc <_printf_float+0x43c>
 800272e:	68e0      	ldr	r0, [r4, #12]
 8002730:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8002732:	4298      	cmp	r0, r3
 8002734:	bfb8      	it	lt
 8002736:	4618      	movlt	r0, r3
 8002738:	e720      	b.n	800257c <_printf_float+0xbc>
 800273a:	2301      	movs	r3, #1
 800273c:	4642      	mov	r2, r8
 800273e:	4659      	mov	r1, fp
 8002740:	4628      	mov	r0, r5
 8002742:	47b0      	blx	r6
 8002744:	3001      	adds	r0, #1
 8002746:	f43f af17 	beq.w	8002578 <_printf_float+0xb8>
 800274a:	3701      	adds	r7, #1
 800274c:	e7df      	b.n	800270e <_printf_float+0x24e>
 800274e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8002750:	2b00      	cmp	r3, #0
 8002752:	dc33      	bgt.n	80027bc <_printf_float+0x2fc>
 8002754:	2301      	movs	r3, #1
 8002756:	4a18      	ldr	r2, [pc, #96]	; (80027b8 <_printf_float+0x2f8>)
 8002758:	4659      	mov	r1, fp
 800275a:	4628      	mov	r0, r5
 800275c:	47b0      	blx	r6
 800275e:	3001      	adds	r0, #1
 8002760:	f43f af0a 	beq.w	8002578 <_printf_float+0xb8>
 8002764:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8002766:	b923      	cbnz	r3, 8002772 <_printf_float+0x2b2>
 8002768:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800276a:	b913      	cbnz	r3, 8002772 <_printf_float+0x2b2>
 800276c:	6823      	ldr	r3, [r4, #0]
 800276e:	07d9      	lsls	r1, r3, #31
 8002770:	d5d1      	bpl.n	8002716 <_printf_float+0x256>
 8002772:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002774:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002776:	4659      	mov	r1, fp
 8002778:	4628      	mov	r0, r5
 800277a:	47b0      	blx	r6
 800277c:	3001      	adds	r0, #1
 800277e:	f43f aefb 	beq.w	8002578 <_printf_float+0xb8>
 8002782:	f04f 0800 	mov.w	r8, #0
 8002786:	f104 091a 	add.w	r9, r4, #26
 800278a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800278c:	425b      	negs	r3, r3
 800278e:	4598      	cmp	r8, r3
 8002790:	db01      	blt.n	8002796 <_printf_float+0x2d6>
 8002792:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002794:	e78e      	b.n	80026b4 <_printf_float+0x1f4>
 8002796:	2301      	movs	r3, #1
 8002798:	464a      	mov	r2, r9
 800279a:	4659      	mov	r1, fp
 800279c:	4628      	mov	r0, r5
 800279e:	47b0      	blx	r6
 80027a0:	3001      	adds	r0, #1
 80027a2:	f43f aee9 	beq.w	8002578 <_printf_float+0xb8>
 80027a6:	f108 0801 	add.w	r8, r8, #1
 80027aa:	e7ee      	b.n	800278a <_printf_float+0x2ca>
 80027ac:	7fefffff 	.word	0x7fefffff
 80027b0:	080044ff 	.word	0x080044ff
 80027b4:	08004503 	.word	0x08004503
 80027b8:	0800450f 	.word	0x0800450f
 80027bc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80027be:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80027c0:	429a      	cmp	r2, r3
 80027c2:	bfa8      	it	ge
 80027c4:	461a      	movge	r2, r3
 80027c6:	2a00      	cmp	r2, #0
 80027c8:	4690      	mov	r8, r2
 80027ca:	dc36      	bgt.n	800283a <_printf_float+0x37a>
 80027cc:	f04f 0a00 	mov.w	sl, #0
 80027d0:	f104 031a 	add.w	r3, r4, #26
 80027d4:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
 80027d8:	930b      	str	r3, [sp, #44]	; 0x2c
 80027da:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 80027de:	eba9 0308 	sub.w	r3, r9, r8
 80027e2:	459a      	cmp	sl, r3
 80027e4:	db31      	blt.n	800284a <_printf_float+0x38a>
 80027e6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80027e8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80027ea:	429a      	cmp	r2, r3
 80027ec:	db38      	blt.n	8002860 <_printf_float+0x3a0>
 80027ee:	6823      	ldr	r3, [r4, #0]
 80027f0:	07da      	lsls	r2, r3, #31
 80027f2:	d435      	bmi.n	8002860 <_printf_float+0x3a0>
 80027f4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80027f6:	990d      	ldr	r1, [sp, #52]	; 0x34
 80027f8:	eba3 0209 	sub.w	r2, r3, r9
 80027fc:	eba3 0801 	sub.w	r8, r3, r1
 8002800:	4590      	cmp	r8, r2
 8002802:	bfa8      	it	ge
 8002804:	4690      	movge	r8, r2
 8002806:	f1b8 0f00 	cmp.w	r8, #0
 800280a:	dc31      	bgt.n	8002870 <_printf_float+0x3b0>
 800280c:	2700      	movs	r7, #0
 800280e:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
 8002812:	f104 091a 	add.w	r9, r4, #26
 8002816:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8002818:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800281a:	1a9b      	subs	r3, r3, r2
 800281c:	eba3 0308 	sub.w	r3, r3, r8
 8002820:	429f      	cmp	r7, r3
 8002822:	f6bf af78 	bge.w	8002716 <_printf_float+0x256>
 8002826:	2301      	movs	r3, #1
 8002828:	464a      	mov	r2, r9
 800282a:	4659      	mov	r1, fp
 800282c:	4628      	mov	r0, r5
 800282e:	47b0      	blx	r6
 8002830:	3001      	adds	r0, #1
 8002832:	f43f aea1 	beq.w	8002578 <_printf_float+0xb8>
 8002836:	3701      	adds	r7, #1
 8002838:	e7ed      	b.n	8002816 <_printf_float+0x356>
 800283a:	4613      	mov	r3, r2
 800283c:	4659      	mov	r1, fp
 800283e:	463a      	mov	r2, r7
 8002840:	4628      	mov	r0, r5
 8002842:	47b0      	blx	r6
 8002844:	3001      	adds	r0, #1
 8002846:	d1c1      	bne.n	80027cc <_printf_float+0x30c>
 8002848:	e696      	b.n	8002578 <_printf_float+0xb8>
 800284a:	2301      	movs	r3, #1
 800284c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800284e:	4659      	mov	r1, fp
 8002850:	4628      	mov	r0, r5
 8002852:	47b0      	blx	r6
 8002854:	3001      	adds	r0, #1
 8002856:	f43f ae8f 	beq.w	8002578 <_printf_float+0xb8>
 800285a:	f10a 0a01 	add.w	sl, sl, #1
 800285e:	e7bc      	b.n	80027da <_printf_float+0x31a>
 8002860:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002862:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002864:	4659      	mov	r1, fp
 8002866:	4628      	mov	r0, r5
 8002868:	47b0      	blx	r6
 800286a:	3001      	adds	r0, #1
 800286c:	d1c2      	bne.n	80027f4 <_printf_float+0x334>
 800286e:	e683      	b.n	8002578 <_printf_float+0xb8>
 8002870:	4643      	mov	r3, r8
 8002872:	eb07 0209 	add.w	r2, r7, r9
 8002876:	4659      	mov	r1, fp
 8002878:	4628      	mov	r0, r5
 800287a:	47b0      	blx	r6
 800287c:	3001      	adds	r0, #1
 800287e:	d1c5      	bne.n	800280c <_printf_float+0x34c>
 8002880:	e67a      	b.n	8002578 <_printf_float+0xb8>
 8002882:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8002884:	2a01      	cmp	r2, #1
 8002886:	dc01      	bgt.n	800288c <_printf_float+0x3cc>
 8002888:	07db      	lsls	r3, r3, #31
 800288a:	d534      	bpl.n	80028f6 <_printf_float+0x436>
 800288c:	2301      	movs	r3, #1
 800288e:	463a      	mov	r2, r7
 8002890:	4659      	mov	r1, fp
 8002892:	4628      	mov	r0, r5
 8002894:	47b0      	blx	r6
 8002896:	3001      	adds	r0, #1
 8002898:	f43f ae6e 	beq.w	8002578 <_printf_float+0xb8>
 800289c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800289e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80028a0:	4659      	mov	r1, fp
 80028a2:	4628      	mov	r0, r5
 80028a4:	47b0      	blx	r6
 80028a6:	3001      	adds	r0, #1
 80028a8:	f43f ae66 	beq.w	8002578 <_printf_float+0xb8>
 80028ac:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80028b0:	2200      	movs	r2, #0
 80028b2:	2300      	movs	r3, #0
 80028b4:	f7fe f88c 	bl	80009d0 <__aeabi_dcmpeq>
 80028b8:	b150      	cbz	r0, 80028d0 <_printf_float+0x410>
 80028ba:	2700      	movs	r7, #0
 80028bc:	f104 081a 	add.w	r8, r4, #26
 80028c0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80028c2:	3b01      	subs	r3, #1
 80028c4:	429f      	cmp	r7, r3
 80028c6:	db0c      	blt.n	80028e2 <_printf_float+0x422>
 80028c8:	464b      	mov	r3, r9
 80028ca:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80028ce:	e6f2      	b.n	80026b6 <_printf_float+0x1f6>
 80028d0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80028d2:	1c7a      	adds	r2, r7, #1
 80028d4:	3b01      	subs	r3, #1
 80028d6:	4659      	mov	r1, fp
 80028d8:	4628      	mov	r0, r5
 80028da:	47b0      	blx	r6
 80028dc:	3001      	adds	r0, #1
 80028de:	d1f3      	bne.n	80028c8 <_printf_float+0x408>
 80028e0:	e64a      	b.n	8002578 <_printf_float+0xb8>
 80028e2:	2301      	movs	r3, #1
 80028e4:	4642      	mov	r2, r8
 80028e6:	4659      	mov	r1, fp
 80028e8:	4628      	mov	r0, r5
 80028ea:	47b0      	blx	r6
 80028ec:	3001      	adds	r0, #1
 80028ee:	f43f ae43 	beq.w	8002578 <_printf_float+0xb8>
 80028f2:	3701      	adds	r7, #1
 80028f4:	e7e4      	b.n	80028c0 <_printf_float+0x400>
 80028f6:	2301      	movs	r3, #1
 80028f8:	463a      	mov	r2, r7
 80028fa:	e7ec      	b.n	80028d6 <_printf_float+0x416>
 80028fc:	2301      	movs	r3, #1
 80028fe:	4642      	mov	r2, r8
 8002900:	4659      	mov	r1, fp
 8002902:	4628      	mov	r0, r5
 8002904:	47b0      	blx	r6
 8002906:	3001      	adds	r0, #1
 8002908:	f43f ae36 	beq.w	8002578 <_printf_float+0xb8>
 800290c:	3701      	adds	r7, #1
 800290e:	e708      	b.n	8002722 <_printf_float+0x262>
 8002910:	463a      	mov	r2, r7
 8002912:	464b      	mov	r3, r9
 8002914:	4638      	mov	r0, r7
 8002916:	4649      	mov	r1, r9
 8002918:	f7fe f88c 	bl	8000a34 <__aeabi_dcmpun>
 800291c:	2800      	cmp	r0, #0
 800291e:	f43f ae30 	beq.w	8002582 <_printf_float+0xc2>
 8002922:	4b01      	ldr	r3, [pc, #4]	; (8002928 <_printf_float+0x468>)
 8002924:	4f01      	ldr	r7, [pc, #4]	; (800292c <_printf_float+0x46c>)
 8002926:	e612      	b.n	800254e <_printf_float+0x8e>
 8002928:	08004507 	.word	0x08004507
 800292c:	0800450b 	.word	0x0800450b

08002930 <_printf_common>:
 8002930:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002934:	4691      	mov	r9, r2
 8002936:	461f      	mov	r7, r3
 8002938:	688a      	ldr	r2, [r1, #8]
 800293a:	690b      	ldr	r3, [r1, #16]
 800293c:	4606      	mov	r6, r0
 800293e:	4293      	cmp	r3, r2
 8002940:	bfb8      	it	lt
 8002942:	4613      	movlt	r3, r2
 8002944:	f8c9 3000 	str.w	r3, [r9]
 8002948:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800294c:	460c      	mov	r4, r1
 800294e:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002952:	b112      	cbz	r2, 800295a <_printf_common+0x2a>
 8002954:	3301      	adds	r3, #1
 8002956:	f8c9 3000 	str.w	r3, [r9]
 800295a:	6823      	ldr	r3, [r4, #0]
 800295c:	0699      	lsls	r1, r3, #26
 800295e:	bf42      	ittt	mi
 8002960:	f8d9 3000 	ldrmi.w	r3, [r9]
 8002964:	3302      	addmi	r3, #2
 8002966:	f8c9 3000 	strmi.w	r3, [r9]
 800296a:	6825      	ldr	r5, [r4, #0]
 800296c:	f015 0506 	ands.w	r5, r5, #6
 8002970:	d107      	bne.n	8002982 <_printf_common+0x52>
 8002972:	f104 0a19 	add.w	sl, r4, #25
 8002976:	68e3      	ldr	r3, [r4, #12]
 8002978:	f8d9 2000 	ldr.w	r2, [r9]
 800297c:	1a9b      	subs	r3, r3, r2
 800297e:	429d      	cmp	r5, r3
 8002980:	db2a      	blt.n	80029d8 <_printf_common+0xa8>
 8002982:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8002986:	6822      	ldr	r2, [r4, #0]
 8002988:	3300      	adds	r3, #0
 800298a:	bf18      	it	ne
 800298c:	2301      	movne	r3, #1
 800298e:	0692      	lsls	r2, r2, #26
 8002990:	d42f      	bmi.n	80029f2 <_printf_common+0xc2>
 8002992:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002996:	4639      	mov	r1, r7
 8002998:	4630      	mov	r0, r6
 800299a:	47c0      	blx	r8
 800299c:	3001      	adds	r0, #1
 800299e:	d022      	beq.n	80029e6 <_printf_common+0xb6>
 80029a0:	6823      	ldr	r3, [r4, #0]
 80029a2:	68e5      	ldr	r5, [r4, #12]
 80029a4:	f003 0306 	and.w	r3, r3, #6
 80029a8:	2b04      	cmp	r3, #4
 80029aa:	bf18      	it	ne
 80029ac:	2500      	movne	r5, #0
 80029ae:	f8d9 2000 	ldr.w	r2, [r9]
 80029b2:	f04f 0900 	mov.w	r9, #0
 80029b6:	bf08      	it	eq
 80029b8:	1aad      	subeq	r5, r5, r2
 80029ba:	68a3      	ldr	r3, [r4, #8]
 80029bc:	6922      	ldr	r2, [r4, #16]
 80029be:	bf08      	it	eq
 80029c0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80029c4:	4293      	cmp	r3, r2
 80029c6:	bfc4      	itt	gt
 80029c8:	1a9b      	subgt	r3, r3, r2
 80029ca:	18ed      	addgt	r5, r5, r3
 80029cc:	341a      	adds	r4, #26
 80029ce:	454d      	cmp	r5, r9
 80029d0:	d11b      	bne.n	8002a0a <_printf_common+0xda>
 80029d2:	2000      	movs	r0, #0
 80029d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80029d8:	2301      	movs	r3, #1
 80029da:	4652      	mov	r2, sl
 80029dc:	4639      	mov	r1, r7
 80029de:	4630      	mov	r0, r6
 80029e0:	47c0      	blx	r8
 80029e2:	3001      	adds	r0, #1
 80029e4:	d103      	bne.n	80029ee <_printf_common+0xbe>
 80029e6:	f04f 30ff 	mov.w	r0, #4294967295
 80029ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80029ee:	3501      	adds	r5, #1
 80029f0:	e7c1      	b.n	8002976 <_printf_common+0x46>
 80029f2:	2030      	movs	r0, #48	; 0x30
 80029f4:	18e1      	adds	r1, r4, r3
 80029f6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80029fa:	1c5a      	adds	r2, r3, #1
 80029fc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002a00:	4422      	add	r2, r4
 8002a02:	3302      	adds	r3, #2
 8002a04:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002a08:	e7c3      	b.n	8002992 <_printf_common+0x62>
 8002a0a:	2301      	movs	r3, #1
 8002a0c:	4622      	mov	r2, r4
 8002a0e:	4639      	mov	r1, r7
 8002a10:	4630      	mov	r0, r6
 8002a12:	47c0      	blx	r8
 8002a14:	3001      	adds	r0, #1
 8002a16:	d0e6      	beq.n	80029e6 <_printf_common+0xb6>
 8002a18:	f109 0901 	add.w	r9, r9, #1
 8002a1c:	e7d7      	b.n	80029ce <_printf_common+0x9e>
	...

08002a20 <_printf_i>:
 8002a20:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002a24:	4617      	mov	r7, r2
 8002a26:	7e0a      	ldrb	r2, [r1, #24]
 8002a28:	b085      	sub	sp, #20
 8002a2a:	2a6e      	cmp	r2, #110	; 0x6e
 8002a2c:	4698      	mov	r8, r3
 8002a2e:	4606      	mov	r6, r0
 8002a30:	460c      	mov	r4, r1
 8002a32:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8002a34:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 8002a38:	f000 80bc 	beq.w	8002bb4 <_printf_i+0x194>
 8002a3c:	d81a      	bhi.n	8002a74 <_printf_i+0x54>
 8002a3e:	2a63      	cmp	r2, #99	; 0x63
 8002a40:	d02e      	beq.n	8002aa0 <_printf_i+0x80>
 8002a42:	d80a      	bhi.n	8002a5a <_printf_i+0x3a>
 8002a44:	2a00      	cmp	r2, #0
 8002a46:	f000 80c8 	beq.w	8002bda <_printf_i+0x1ba>
 8002a4a:	2a58      	cmp	r2, #88	; 0x58
 8002a4c:	f000 808a 	beq.w	8002b64 <_printf_i+0x144>
 8002a50:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002a54:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 8002a58:	e02a      	b.n	8002ab0 <_printf_i+0x90>
 8002a5a:	2a64      	cmp	r2, #100	; 0x64
 8002a5c:	d001      	beq.n	8002a62 <_printf_i+0x42>
 8002a5e:	2a69      	cmp	r2, #105	; 0x69
 8002a60:	d1f6      	bne.n	8002a50 <_printf_i+0x30>
 8002a62:	6821      	ldr	r1, [r4, #0]
 8002a64:	681a      	ldr	r2, [r3, #0]
 8002a66:	f011 0f80 	tst.w	r1, #128	; 0x80
 8002a6a:	d023      	beq.n	8002ab4 <_printf_i+0x94>
 8002a6c:	1d11      	adds	r1, r2, #4
 8002a6e:	6019      	str	r1, [r3, #0]
 8002a70:	6813      	ldr	r3, [r2, #0]
 8002a72:	e027      	b.n	8002ac4 <_printf_i+0xa4>
 8002a74:	2a73      	cmp	r2, #115	; 0x73
 8002a76:	f000 80b4 	beq.w	8002be2 <_printf_i+0x1c2>
 8002a7a:	d808      	bhi.n	8002a8e <_printf_i+0x6e>
 8002a7c:	2a6f      	cmp	r2, #111	; 0x6f
 8002a7e:	d02a      	beq.n	8002ad6 <_printf_i+0xb6>
 8002a80:	2a70      	cmp	r2, #112	; 0x70
 8002a82:	d1e5      	bne.n	8002a50 <_printf_i+0x30>
 8002a84:	680a      	ldr	r2, [r1, #0]
 8002a86:	f042 0220 	orr.w	r2, r2, #32
 8002a8a:	600a      	str	r2, [r1, #0]
 8002a8c:	e003      	b.n	8002a96 <_printf_i+0x76>
 8002a8e:	2a75      	cmp	r2, #117	; 0x75
 8002a90:	d021      	beq.n	8002ad6 <_printf_i+0xb6>
 8002a92:	2a78      	cmp	r2, #120	; 0x78
 8002a94:	d1dc      	bne.n	8002a50 <_printf_i+0x30>
 8002a96:	2278      	movs	r2, #120	; 0x78
 8002a98:	496f      	ldr	r1, [pc, #444]	; (8002c58 <_printf_i+0x238>)
 8002a9a:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 8002a9e:	e064      	b.n	8002b6a <_printf_i+0x14a>
 8002aa0:	681a      	ldr	r2, [r3, #0]
 8002aa2:	f101 0542 	add.w	r5, r1, #66	; 0x42
 8002aa6:	1d11      	adds	r1, r2, #4
 8002aa8:	6019      	str	r1, [r3, #0]
 8002aaa:	6813      	ldr	r3, [r2, #0]
 8002aac:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002ab0:	2301      	movs	r3, #1
 8002ab2:	e0a3      	b.n	8002bfc <_printf_i+0x1dc>
 8002ab4:	f011 0f40 	tst.w	r1, #64	; 0x40
 8002ab8:	f102 0104 	add.w	r1, r2, #4
 8002abc:	6019      	str	r1, [r3, #0]
 8002abe:	d0d7      	beq.n	8002a70 <_printf_i+0x50>
 8002ac0:	f9b2 3000 	ldrsh.w	r3, [r2]
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	da03      	bge.n	8002ad0 <_printf_i+0xb0>
 8002ac8:	222d      	movs	r2, #45	; 0x2d
 8002aca:	425b      	negs	r3, r3
 8002acc:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8002ad0:	4962      	ldr	r1, [pc, #392]	; (8002c5c <_printf_i+0x23c>)
 8002ad2:	220a      	movs	r2, #10
 8002ad4:	e017      	b.n	8002b06 <_printf_i+0xe6>
 8002ad6:	6820      	ldr	r0, [r4, #0]
 8002ad8:	6819      	ldr	r1, [r3, #0]
 8002ada:	f010 0f80 	tst.w	r0, #128	; 0x80
 8002ade:	d003      	beq.n	8002ae8 <_printf_i+0xc8>
 8002ae0:	1d08      	adds	r0, r1, #4
 8002ae2:	6018      	str	r0, [r3, #0]
 8002ae4:	680b      	ldr	r3, [r1, #0]
 8002ae6:	e006      	b.n	8002af6 <_printf_i+0xd6>
 8002ae8:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002aec:	f101 0004 	add.w	r0, r1, #4
 8002af0:	6018      	str	r0, [r3, #0]
 8002af2:	d0f7      	beq.n	8002ae4 <_printf_i+0xc4>
 8002af4:	880b      	ldrh	r3, [r1, #0]
 8002af6:	2a6f      	cmp	r2, #111	; 0x6f
 8002af8:	bf14      	ite	ne
 8002afa:	220a      	movne	r2, #10
 8002afc:	2208      	moveq	r2, #8
 8002afe:	4957      	ldr	r1, [pc, #348]	; (8002c5c <_printf_i+0x23c>)
 8002b00:	2000      	movs	r0, #0
 8002b02:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 8002b06:	6865      	ldr	r5, [r4, #4]
 8002b08:	2d00      	cmp	r5, #0
 8002b0a:	60a5      	str	r5, [r4, #8]
 8002b0c:	f2c0 809c 	blt.w	8002c48 <_printf_i+0x228>
 8002b10:	6820      	ldr	r0, [r4, #0]
 8002b12:	f020 0004 	bic.w	r0, r0, #4
 8002b16:	6020      	str	r0, [r4, #0]
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d13f      	bne.n	8002b9c <_printf_i+0x17c>
 8002b1c:	2d00      	cmp	r5, #0
 8002b1e:	f040 8095 	bne.w	8002c4c <_printf_i+0x22c>
 8002b22:	4675      	mov	r5, lr
 8002b24:	2a08      	cmp	r2, #8
 8002b26:	d10b      	bne.n	8002b40 <_printf_i+0x120>
 8002b28:	6823      	ldr	r3, [r4, #0]
 8002b2a:	07da      	lsls	r2, r3, #31
 8002b2c:	d508      	bpl.n	8002b40 <_printf_i+0x120>
 8002b2e:	6923      	ldr	r3, [r4, #16]
 8002b30:	6862      	ldr	r2, [r4, #4]
 8002b32:	429a      	cmp	r2, r3
 8002b34:	bfde      	ittt	le
 8002b36:	2330      	movle	r3, #48	; 0x30
 8002b38:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002b3c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8002b40:	ebae 0305 	sub.w	r3, lr, r5
 8002b44:	6123      	str	r3, [r4, #16]
 8002b46:	f8cd 8000 	str.w	r8, [sp]
 8002b4a:	463b      	mov	r3, r7
 8002b4c:	aa03      	add	r2, sp, #12
 8002b4e:	4621      	mov	r1, r4
 8002b50:	4630      	mov	r0, r6
 8002b52:	f7ff feed 	bl	8002930 <_printf_common>
 8002b56:	3001      	adds	r0, #1
 8002b58:	d155      	bne.n	8002c06 <_printf_i+0x1e6>
 8002b5a:	f04f 30ff 	mov.w	r0, #4294967295
 8002b5e:	b005      	add	sp, #20
 8002b60:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002b64:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 8002b68:	493c      	ldr	r1, [pc, #240]	; (8002c5c <_printf_i+0x23c>)
 8002b6a:	6822      	ldr	r2, [r4, #0]
 8002b6c:	6818      	ldr	r0, [r3, #0]
 8002b6e:	f012 0f80 	tst.w	r2, #128	; 0x80
 8002b72:	f100 0504 	add.w	r5, r0, #4
 8002b76:	601d      	str	r5, [r3, #0]
 8002b78:	d001      	beq.n	8002b7e <_printf_i+0x15e>
 8002b7a:	6803      	ldr	r3, [r0, #0]
 8002b7c:	e002      	b.n	8002b84 <_printf_i+0x164>
 8002b7e:	0655      	lsls	r5, r2, #25
 8002b80:	d5fb      	bpl.n	8002b7a <_printf_i+0x15a>
 8002b82:	8803      	ldrh	r3, [r0, #0]
 8002b84:	07d0      	lsls	r0, r2, #31
 8002b86:	bf44      	itt	mi
 8002b88:	f042 0220 	orrmi.w	r2, r2, #32
 8002b8c:	6022      	strmi	r2, [r4, #0]
 8002b8e:	b91b      	cbnz	r3, 8002b98 <_printf_i+0x178>
 8002b90:	6822      	ldr	r2, [r4, #0]
 8002b92:	f022 0220 	bic.w	r2, r2, #32
 8002b96:	6022      	str	r2, [r4, #0]
 8002b98:	2210      	movs	r2, #16
 8002b9a:	e7b1      	b.n	8002b00 <_printf_i+0xe0>
 8002b9c:	4675      	mov	r5, lr
 8002b9e:	fbb3 f0f2 	udiv	r0, r3, r2
 8002ba2:	fb02 3310 	mls	r3, r2, r0, r3
 8002ba6:	5ccb      	ldrb	r3, [r1, r3]
 8002ba8:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8002bac:	4603      	mov	r3, r0
 8002bae:	2800      	cmp	r0, #0
 8002bb0:	d1f5      	bne.n	8002b9e <_printf_i+0x17e>
 8002bb2:	e7b7      	b.n	8002b24 <_printf_i+0x104>
 8002bb4:	6808      	ldr	r0, [r1, #0]
 8002bb6:	681a      	ldr	r2, [r3, #0]
 8002bb8:	f010 0f80 	tst.w	r0, #128	; 0x80
 8002bbc:	6949      	ldr	r1, [r1, #20]
 8002bbe:	d004      	beq.n	8002bca <_printf_i+0x1aa>
 8002bc0:	1d10      	adds	r0, r2, #4
 8002bc2:	6018      	str	r0, [r3, #0]
 8002bc4:	6813      	ldr	r3, [r2, #0]
 8002bc6:	6019      	str	r1, [r3, #0]
 8002bc8:	e007      	b.n	8002bda <_printf_i+0x1ba>
 8002bca:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002bce:	f102 0004 	add.w	r0, r2, #4
 8002bd2:	6018      	str	r0, [r3, #0]
 8002bd4:	6813      	ldr	r3, [r2, #0]
 8002bd6:	d0f6      	beq.n	8002bc6 <_printf_i+0x1a6>
 8002bd8:	8019      	strh	r1, [r3, #0]
 8002bda:	2300      	movs	r3, #0
 8002bdc:	4675      	mov	r5, lr
 8002bde:	6123      	str	r3, [r4, #16]
 8002be0:	e7b1      	b.n	8002b46 <_printf_i+0x126>
 8002be2:	681a      	ldr	r2, [r3, #0]
 8002be4:	1d11      	adds	r1, r2, #4
 8002be6:	6019      	str	r1, [r3, #0]
 8002be8:	6815      	ldr	r5, [r2, #0]
 8002bea:	2100      	movs	r1, #0
 8002bec:	6862      	ldr	r2, [r4, #4]
 8002bee:	4628      	mov	r0, r5
 8002bf0:	f000 fed0 	bl	8003994 <memchr>
 8002bf4:	b108      	cbz	r0, 8002bfa <_printf_i+0x1da>
 8002bf6:	1b40      	subs	r0, r0, r5
 8002bf8:	6060      	str	r0, [r4, #4]
 8002bfa:	6863      	ldr	r3, [r4, #4]
 8002bfc:	6123      	str	r3, [r4, #16]
 8002bfe:	2300      	movs	r3, #0
 8002c00:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002c04:	e79f      	b.n	8002b46 <_printf_i+0x126>
 8002c06:	6923      	ldr	r3, [r4, #16]
 8002c08:	462a      	mov	r2, r5
 8002c0a:	4639      	mov	r1, r7
 8002c0c:	4630      	mov	r0, r6
 8002c0e:	47c0      	blx	r8
 8002c10:	3001      	adds	r0, #1
 8002c12:	d0a2      	beq.n	8002b5a <_printf_i+0x13a>
 8002c14:	6823      	ldr	r3, [r4, #0]
 8002c16:	079b      	lsls	r3, r3, #30
 8002c18:	d507      	bpl.n	8002c2a <_printf_i+0x20a>
 8002c1a:	2500      	movs	r5, #0
 8002c1c:	f104 0919 	add.w	r9, r4, #25
 8002c20:	68e3      	ldr	r3, [r4, #12]
 8002c22:	9a03      	ldr	r2, [sp, #12]
 8002c24:	1a9b      	subs	r3, r3, r2
 8002c26:	429d      	cmp	r5, r3
 8002c28:	db05      	blt.n	8002c36 <_printf_i+0x216>
 8002c2a:	68e0      	ldr	r0, [r4, #12]
 8002c2c:	9b03      	ldr	r3, [sp, #12]
 8002c2e:	4298      	cmp	r0, r3
 8002c30:	bfb8      	it	lt
 8002c32:	4618      	movlt	r0, r3
 8002c34:	e793      	b.n	8002b5e <_printf_i+0x13e>
 8002c36:	2301      	movs	r3, #1
 8002c38:	464a      	mov	r2, r9
 8002c3a:	4639      	mov	r1, r7
 8002c3c:	4630      	mov	r0, r6
 8002c3e:	47c0      	blx	r8
 8002c40:	3001      	adds	r0, #1
 8002c42:	d08a      	beq.n	8002b5a <_printf_i+0x13a>
 8002c44:	3501      	adds	r5, #1
 8002c46:	e7eb      	b.n	8002c20 <_printf_i+0x200>
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d1a7      	bne.n	8002b9c <_printf_i+0x17c>
 8002c4c:	780b      	ldrb	r3, [r1, #0]
 8002c4e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002c52:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002c56:	e765      	b.n	8002b24 <_printf_i+0x104>
 8002c58:	08004522 	.word	0x08004522
 8002c5c:	08004511 	.word	0x08004511

08002c60 <siprintf>:
 8002c60:	b40e      	push	{r1, r2, r3}
 8002c62:	f44f 7102 	mov.w	r1, #520	; 0x208
 8002c66:	b500      	push	{lr}
 8002c68:	b09c      	sub	sp, #112	; 0x70
 8002c6a:	f8ad 1014 	strh.w	r1, [sp, #20]
 8002c6e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8002c72:	9104      	str	r1, [sp, #16]
 8002c74:	9107      	str	r1, [sp, #28]
 8002c76:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002c7a:	ab1d      	add	r3, sp, #116	; 0x74
 8002c7c:	9002      	str	r0, [sp, #8]
 8002c7e:	9006      	str	r0, [sp, #24]
 8002c80:	4808      	ldr	r0, [pc, #32]	; (8002ca4 <siprintf+0x44>)
 8002c82:	f853 2b04 	ldr.w	r2, [r3], #4
 8002c86:	f8ad 1016 	strh.w	r1, [sp, #22]
 8002c8a:	6800      	ldr	r0, [r0, #0]
 8002c8c:	a902      	add	r1, sp, #8
 8002c8e:	9301      	str	r3, [sp, #4]
 8002c90:	f001 fa7e 	bl	8004190 <_svfiprintf_r>
 8002c94:	2200      	movs	r2, #0
 8002c96:	9b02      	ldr	r3, [sp, #8]
 8002c98:	701a      	strb	r2, [r3, #0]
 8002c9a:	b01c      	add	sp, #112	; 0x70
 8002c9c:	f85d eb04 	ldr.w	lr, [sp], #4
 8002ca0:	b003      	add	sp, #12
 8002ca2:	4770      	bx	lr
 8002ca4:	20000004 	.word	0x20000004

08002ca8 <quorem>:
 8002ca8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002cac:	6903      	ldr	r3, [r0, #16]
 8002cae:	690c      	ldr	r4, [r1, #16]
 8002cb0:	4680      	mov	r8, r0
 8002cb2:	429c      	cmp	r4, r3
 8002cb4:	f300 8082 	bgt.w	8002dbc <quorem+0x114>
 8002cb8:	3c01      	subs	r4, #1
 8002cba:	f101 0714 	add.w	r7, r1, #20
 8002cbe:	f100 0614 	add.w	r6, r0, #20
 8002cc2:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8002cc6:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8002cca:	3501      	adds	r5, #1
 8002ccc:	fbb0 f5f5 	udiv	r5, r0, r5
 8002cd0:	ea4f 0e84 	mov.w	lr, r4, lsl #2
 8002cd4:	eb06 030e 	add.w	r3, r6, lr
 8002cd8:	eb07 090e 	add.w	r9, r7, lr
 8002cdc:	9301      	str	r3, [sp, #4]
 8002cde:	b38d      	cbz	r5, 8002d44 <quorem+0x9c>
 8002ce0:	f04f 0a00 	mov.w	sl, #0
 8002ce4:	4638      	mov	r0, r7
 8002ce6:	46b4      	mov	ip, r6
 8002ce8:	46d3      	mov	fp, sl
 8002cea:	f850 2b04 	ldr.w	r2, [r0], #4
 8002cee:	b293      	uxth	r3, r2
 8002cf0:	fb05 a303 	mla	r3, r5, r3, sl
 8002cf4:	0c12      	lsrs	r2, r2, #16
 8002cf6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8002cfa:	fb05 a202 	mla	r2, r5, r2, sl
 8002cfe:	b29b      	uxth	r3, r3
 8002d00:	ebab 0303 	sub.w	r3, fp, r3
 8002d04:	f8bc b000 	ldrh.w	fp, [ip]
 8002d08:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8002d0c:	445b      	add	r3, fp
 8002d0e:	fa1f fb82 	uxth.w	fp, r2
 8002d12:	f8dc 2000 	ldr.w	r2, [ip]
 8002d16:	4581      	cmp	r9, r0
 8002d18:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8002d1c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8002d20:	b29b      	uxth	r3, r3
 8002d22:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8002d26:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8002d2a:	f84c 3b04 	str.w	r3, [ip], #4
 8002d2e:	d2dc      	bcs.n	8002cea <quorem+0x42>
 8002d30:	f856 300e 	ldr.w	r3, [r6, lr]
 8002d34:	b933      	cbnz	r3, 8002d44 <quorem+0x9c>
 8002d36:	9b01      	ldr	r3, [sp, #4]
 8002d38:	3b04      	subs	r3, #4
 8002d3a:	429e      	cmp	r6, r3
 8002d3c:	461a      	mov	r2, r3
 8002d3e:	d331      	bcc.n	8002da4 <quorem+0xfc>
 8002d40:	f8c8 4010 	str.w	r4, [r8, #16]
 8002d44:	4640      	mov	r0, r8
 8002d46:	f001 f846 	bl	8003dd6 <__mcmp>
 8002d4a:	2800      	cmp	r0, #0
 8002d4c:	db26      	blt.n	8002d9c <quorem+0xf4>
 8002d4e:	4630      	mov	r0, r6
 8002d50:	f04f 0e00 	mov.w	lr, #0
 8002d54:	3501      	adds	r5, #1
 8002d56:	f857 1b04 	ldr.w	r1, [r7], #4
 8002d5a:	f8d0 c000 	ldr.w	ip, [r0]
 8002d5e:	b28b      	uxth	r3, r1
 8002d60:	ebae 0303 	sub.w	r3, lr, r3
 8002d64:	fa1f f28c 	uxth.w	r2, ip
 8002d68:	4413      	add	r3, r2
 8002d6a:	0c0a      	lsrs	r2, r1, #16
 8002d6c:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8002d70:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8002d74:	b29b      	uxth	r3, r3
 8002d76:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8002d7a:	45b9      	cmp	r9, r7
 8002d7c:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8002d80:	f840 3b04 	str.w	r3, [r0], #4
 8002d84:	d2e7      	bcs.n	8002d56 <quorem+0xae>
 8002d86:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8002d8a:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8002d8e:	b92a      	cbnz	r2, 8002d9c <quorem+0xf4>
 8002d90:	3b04      	subs	r3, #4
 8002d92:	429e      	cmp	r6, r3
 8002d94:	461a      	mov	r2, r3
 8002d96:	d30b      	bcc.n	8002db0 <quorem+0x108>
 8002d98:	f8c8 4010 	str.w	r4, [r8, #16]
 8002d9c:	4628      	mov	r0, r5
 8002d9e:	b003      	add	sp, #12
 8002da0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002da4:	6812      	ldr	r2, [r2, #0]
 8002da6:	3b04      	subs	r3, #4
 8002da8:	2a00      	cmp	r2, #0
 8002daa:	d1c9      	bne.n	8002d40 <quorem+0x98>
 8002dac:	3c01      	subs	r4, #1
 8002dae:	e7c4      	b.n	8002d3a <quorem+0x92>
 8002db0:	6812      	ldr	r2, [r2, #0]
 8002db2:	3b04      	subs	r3, #4
 8002db4:	2a00      	cmp	r2, #0
 8002db6:	d1ef      	bne.n	8002d98 <quorem+0xf0>
 8002db8:	3c01      	subs	r4, #1
 8002dba:	e7ea      	b.n	8002d92 <quorem+0xea>
 8002dbc:	2000      	movs	r0, #0
 8002dbe:	e7ee      	b.n	8002d9e <quorem+0xf6>

08002dc0 <_dtoa_r>:
 8002dc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002dc4:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8002dc6:	b095      	sub	sp, #84	; 0x54
 8002dc8:	4604      	mov	r4, r0
 8002dca:	9d21      	ldr	r5, [sp, #132]	; 0x84
 8002dcc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002dd0:	b93e      	cbnz	r6, 8002de2 <_dtoa_r+0x22>
 8002dd2:	2010      	movs	r0, #16
 8002dd4:	f000 fdd6 	bl	8003984 <malloc>
 8002dd8:	6260      	str	r0, [r4, #36]	; 0x24
 8002dda:	6046      	str	r6, [r0, #4]
 8002ddc:	6086      	str	r6, [r0, #8]
 8002dde:	6006      	str	r6, [r0, #0]
 8002de0:	60c6      	str	r6, [r0, #12]
 8002de2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002de4:	6819      	ldr	r1, [r3, #0]
 8002de6:	b151      	cbz	r1, 8002dfe <_dtoa_r+0x3e>
 8002de8:	685a      	ldr	r2, [r3, #4]
 8002dea:	2301      	movs	r3, #1
 8002dec:	4093      	lsls	r3, r2
 8002dee:	604a      	str	r2, [r1, #4]
 8002df0:	608b      	str	r3, [r1, #8]
 8002df2:	4620      	mov	r0, r4
 8002df4:	f000 fe1b 	bl	8003a2e <_Bfree>
 8002df8:	2200      	movs	r2, #0
 8002dfa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002dfc:	601a      	str	r2, [r3, #0]
 8002dfe:	9b03      	ldr	r3, [sp, #12]
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	bfb7      	itett	lt
 8002e04:	2301      	movlt	r3, #1
 8002e06:	2300      	movge	r3, #0
 8002e08:	602b      	strlt	r3, [r5, #0]
 8002e0a:	9b03      	ldrlt	r3, [sp, #12]
 8002e0c:	bfae      	itee	ge
 8002e0e:	602b      	strge	r3, [r5, #0]
 8002e10:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8002e14:	9303      	strlt	r3, [sp, #12]
 8002e16:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8002e1a:	4bab      	ldr	r3, [pc, #684]	; (80030c8 <_dtoa_r+0x308>)
 8002e1c:	ea33 0309 	bics.w	r3, r3, r9
 8002e20:	d11b      	bne.n	8002e5a <_dtoa_r+0x9a>
 8002e22:	f242 730f 	movw	r3, #9999	; 0x270f
 8002e26:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8002e28:	6013      	str	r3, [r2, #0]
 8002e2a:	9b02      	ldr	r3, [sp, #8]
 8002e2c:	b923      	cbnz	r3, 8002e38 <_dtoa_r+0x78>
 8002e2e:	f3c9 0013 	ubfx	r0, r9, #0, #20
 8002e32:	2800      	cmp	r0, #0
 8002e34:	f000 8583 	beq.w	800393e <_dtoa_r+0xb7e>
 8002e38:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8002e3a:	b953      	cbnz	r3, 8002e52 <_dtoa_r+0x92>
 8002e3c:	4ba3      	ldr	r3, [pc, #652]	; (80030cc <_dtoa_r+0x30c>)
 8002e3e:	e021      	b.n	8002e84 <_dtoa_r+0xc4>
 8002e40:	4ba3      	ldr	r3, [pc, #652]	; (80030d0 <_dtoa_r+0x310>)
 8002e42:	9306      	str	r3, [sp, #24]
 8002e44:	3308      	adds	r3, #8
 8002e46:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8002e48:	6013      	str	r3, [r2, #0]
 8002e4a:	9806      	ldr	r0, [sp, #24]
 8002e4c:	b015      	add	sp, #84	; 0x54
 8002e4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002e52:	4b9e      	ldr	r3, [pc, #632]	; (80030cc <_dtoa_r+0x30c>)
 8002e54:	9306      	str	r3, [sp, #24]
 8002e56:	3303      	adds	r3, #3
 8002e58:	e7f5      	b.n	8002e46 <_dtoa_r+0x86>
 8002e5a:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8002e5e:	2200      	movs	r2, #0
 8002e60:	2300      	movs	r3, #0
 8002e62:	4630      	mov	r0, r6
 8002e64:	4639      	mov	r1, r7
 8002e66:	f7fd fdb3 	bl	80009d0 <__aeabi_dcmpeq>
 8002e6a:	4680      	mov	r8, r0
 8002e6c:	b160      	cbz	r0, 8002e88 <_dtoa_r+0xc8>
 8002e6e:	2301      	movs	r3, #1
 8002e70:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8002e72:	6013      	str	r3, [r2, #0]
 8002e74:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	f000 855e 	beq.w	8003938 <_dtoa_r+0xb78>
 8002e7c:	4b95      	ldr	r3, [pc, #596]	; (80030d4 <_dtoa_r+0x314>)
 8002e7e:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8002e80:	6013      	str	r3, [r2, #0]
 8002e82:	3b01      	subs	r3, #1
 8002e84:	9306      	str	r3, [sp, #24]
 8002e86:	e7e0      	b.n	8002e4a <_dtoa_r+0x8a>
 8002e88:	ab12      	add	r3, sp, #72	; 0x48
 8002e8a:	9301      	str	r3, [sp, #4]
 8002e8c:	ab13      	add	r3, sp, #76	; 0x4c
 8002e8e:	9300      	str	r3, [sp, #0]
 8002e90:	4632      	mov	r2, r6
 8002e92:	463b      	mov	r3, r7
 8002e94:	4620      	mov	r0, r4
 8002e96:	f001 f817 	bl	8003ec8 <__d2b>
 8002e9a:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8002e9e:	4682      	mov	sl, r0
 8002ea0:	2d00      	cmp	r5, #0
 8002ea2:	d07d      	beq.n	8002fa0 <_dtoa_r+0x1e0>
 8002ea4:	4630      	mov	r0, r6
 8002ea6:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8002eaa:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8002eae:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8002eb2:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8002eb6:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8002eba:	2200      	movs	r2, #0
 8002ebc:	4b86      	ldr	r3, [pc, #536]	; (80030d8 <_dtoa_r+0x318>)
 8002ebe:	f7fd f96b 	bl	8000198 <__aeabi_dsub>
 8002ec2:	a37b      	add	r3, pc, #492	; (adr r3, 80030b0 <_dtoa_r+0x2f0>)
 8002ec4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ec8:	f7fd fb1a 	bl	8000500 <__aeabi_dmul>
 8002ecc:	a37a      	add	r3, pc, #488	; (adr r3, 80030b8 <_dtoa_r+0x2f8>)
 8002ece:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ed2:	f7fd f963 	bl	800019c <__adddf3>
 8002ed6:	4606      	mov	r6, r0
 8002ed8:	4628      	mov	r0, r5
 8002eda:	460f      	mov	r7, r1
 8002edc:	f7fd faaa 	bl	8000434 <__aeabi_i2d>
 8002ee0:	a377      	add	r3, pc, #476	; (adr r3, 80030c0 <_dtoa_r+0x300>)
 8002ee2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ee6:	f7fd fb0b 	bl	8000500 <__aeabi_dmul>
 8002eea:	4602      	mov	r2, r0
 8002eec:	460b      	mov	r3, r1
 8002eee:	4630      	mov	r0, r6
 8002ef0:	4639      	mov	r1, r7
 8002ef2:	f7fd f953 	bl	800019c <__adddf3>
 8002ef6:	4606      	mov	r6, r0
 8002ef8:	460f      	mov	r7, r1
 8002efa:	f7fd fdb1 	bl	8000a60 <__aeabi_d2iz>
 8002efe:	2200      	movs	r2, #0
 8002f00:	4683      	mov	fp, r0
 8002f02:	2300      	movs	r3, #0
 8002f04:	4630      	mov	r0, r6
 8002f06:	4639      	mov	r1, r7
 8002f08:	f7fd fd6c 	bl	80009e4 <__aeabi_dcmplt>
 8002f0c:	b158      	cbz	r0, 8002f26 <_dtoa_r+0x166>
 8002f0e:	4658      	mov	r0, fp
 8002f10:	f7fd fa90 	bl	8000434 <__aeabi_i2d>
 8002f14:	4602      	mov	r2, r0
 8002f16:	460b      	mov	r3, r1
 8002f18:	4630      	mov	r0, r6
 8002f1a:	4639      	mov	r1, r7
 8002f1c:	f7fd fd58 	bl	80009d0 <__aeabi_dcmpeq>
 8002f20:	b908      	cbnz	r0, 8002f26 <_dtoa_r+0x166>
 8002f22:	f10b 3bff 	add.w	fp, fp, #4294967295
 8002f26:	f1bb 0f16 	cmp.w	fp, #22
 8002f2a:	d858      	bhi.n	8002fde <_dtoa_r+0x21e>
 8002f2c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8002f30:	496a      	ldr	r1, [pc, #424]	; (80030dc <_dtoa_r+0x31c>)
 8002f32:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
 8002f36:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002f3a:	f7fd fd71 	bl	8000a20 <__aeabi_dcmpgt>
 8002f3e:	2800      	cmp	r0, #0
 8002f40:	d04f      	beq.n	8002fe2 <_dtoa_r+0x222>
 8002f42:	2300      	movs	r3, #0
 8002f44:	f10b 3bff 	add.w	fp, fp, #4294967295
 8002f48:	930d      	str	r3, [sp, #52]	; 0x34
 8002f4a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8002f4c:	1b5d      	subs	r5, r3, r5
 8002f4e:	1e6b      	subs	r3, r5, #1
 8002f50:	9307      	str	r3, [sp, #28]
 8002f52:	bf43      	ittte	mi
 8002f54:	2300      	movmi	r3, #0
 8002f56:	f1c5 0801 	rsbmi	r8, r5, #1
 8002f5a:	9307      	strmi	r3, [sp, #28]
 8002f5c:	f04f 0800 	movpl.w	r8, #0
 8002f60:	f1bb 0f00 	cmp.w	fp, #0
 8002f64:	db3f      	blt.n	8002fe6 <_dtoa_r+0x226>
 8002f66:	9b07      	ldr	r3, [sp, #28]
 8002f68:	f8cd b030 	str.w	fp, [sp, #48]	; 0x30
 8002f6c:	445b      	add	r3, fp
 8002f6e:	9307      	str	r3, [sp, #28]
 8002f70:	2300      	movs	r3, #0
 8002f72:	9308      	str	r3, [sp, #32]
 8002f74:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8002f76:	2b09      	cmp	r3, #9
 8002f78:	f200 80b4 	bhi.w	80030e4 <_dtoa_r+0x324>
 8002f7c:	2b05      	cmp	r3, #5
 8002f7e:	bfc4      	itt	gt
 8002f80:	3b04      	subgt	r3, #4
 8002f82:	931e      	strgt	r3, [sp, #120]	; 0x78
 8002f84:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8002f86:	bfc8      	it	gt
 8002f88:	2600      	movgt	r6, #0
 8002f8a:	f1a3 0302 	sub.w	r3, r3, #2
 8002f8e:	bfd8      	it	le
 8002f90:	2601      	movle	r6, #1
 8002f92:	2b03      	cmp	r3, #3
 8002f94:	f200 80b2 	bhi.w	80030fc <_dtoa_r+0x33c>
 8002f98:	e8df f003 	tbb	[pc, r3]
 8002f9c:	782d8684 	.word	0x782d8684
 8002fa0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8002fa2:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8002fa4:	441d      	add	r5, r3
 8002fa6:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8002faa:	2b20      	cmp	r3, #32
 8002fac:	dd11      	ble.n	8002fd2 <_dtoa_r+0x212>
 8002fae:	9a02      	ldr	r2, [sp, #8]
 8002fb0:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8002fb4:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8002fb8:	fa22 f000 	lsr.w	r0, r2, r0
 8002fbc:	fa09 f303 	lsl.w	r3, r9, r3
 8002fc0:	4318      	orrs	r0, r3
 8002fc2:	f7fd fa27 	bl	8000414 <__aeabi_ui2d>
 8002fc6:	2301      	movs	r3, #1
 8002fc8:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8002fcc:	3d01      	subs	r5, #1
 8002fce:	9310      	str	r3, [sp, #64]	; 0x40
 8002fd0:	e773      	b.n	8002eba <_dtoa_r+0xfa>
 8002fd2:	f1c3 0020 	rsb	r0, r3, #32
 8002fd6:	9b02      	ldr	r3, [sp, #8]
 8002fd8:	fa03 f000 	lsl.w	r0, r3, r0
 8002fdc:	e7f1      	b.n	8002fc2 <_dtoa_r+0x202>
 8002fde:	2301      	movs	r3, #1
 8002fe0:	e7b2      	b.n	8002f48 <_dtoa_r+0x188>
 8002fe2:	900d      	str	r0, [sp, #52]	; 0x34
 8002fe4:	e7b1      	b.n	8002f4a <_dtoa_r+0x18a>
 8002fe6:	f1cb 0300 	rsb	r3, fp, #0
 8002fea:	9308      	str	r3, [sp, #32]
 8002fec:	2300      	movs	r3, #0
 8002fee:	eba8 080b 	sub.w	r8, r8, fp
 8002ff2:	930c      	str	r3, [sp, #48]	; 0x30
 8002ff4:	e7be      	b.n	8002f74 <_dtoa_r+0x1b4>
 8002ff6:	2301      	movs	r3, #1
 8002ff8:	9309      	str	r3, [sp, #36]	; 0x24
 8002ffa:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	f340 8080 	ble.w	8003102 <_dtoa_r+0x342>
 8003002:	4699      	mov	r9, r3
 8003004:	9304      	str	r3, [sp, #16]
 8003006:	2200      	movs	r2, #0
 8003008:	2104      	movs	r1, #4
 800300a:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800300c:	606a      	str	r2, [r5, #4]
 800300e:	f101 0214 	add.w	r2, r1, #20
 8003012:	429a      	cmp	r2, r3
 8003014:	d97a      	bls.n	800310c <_dtoa_r+0x34c>
 8003016:	6869      	ldr	r1, [r5, #4]
 8003018:	4620      	mov	r0, r4
 800301a:	f000 fcd4 	bl	80039c6 <_Balloc>
 800301e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003020:	6028      	str	r0, [r5, #0]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f1b9 0f0e 	cmp.w	r9, #14
 8003028:	9306      	str	r3, [sp, #24]
 800302a:	f200 80f0 	bhi.w	800320e <_dtoa_r+0x44e>
 800302e:	2e00      	cmp	r6, #0
 8003030:	f000 80ed 	beq.w	800320e <_dtoa_r+0x44e>
 8003034:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003038:	f1bb 0f00 	cmp.w	fp, #0
 800303c:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8003040:	dd79      	ble.n	8003136 <_dtoa_r+0x376>
 8003042:	4a26      	ldr	r2, [pc, #152]	; (80030dc <_dtoa_r+0x31c>)
 8003044:	f00b 030f 	and.w	r3, fp, #15
 8003048:	ea4f 162b 	mov.w	r6, fp, asr #4
 800304c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8003050:	06f0      	lsls	r0, r6, #27
 8003052:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003056:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800305a:	d55c      	bpl.n	8003116 <_dtoa_r+0x356>
 800305c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8003060:	4b1f      	ldr	r3, [pc, #124]	; (80030e0 <_dtoa_r+0x320>)
 8003062:	2503      	movs	r5, #3
 8003064:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8003068:	f7fd fb74 	bl	8000754 <__aeabi_ddiv>
 800306c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003070:	f006 060f 	and.w	r6, r6, #15
 8003074:	4f1a      	ldr	r7, [pc, #104]	; (80030e0 <_dtoa_r+0x320>)
 8003076:	2e00      	cmp	r6, #0
 8003078:	d14f      	bne.n	800311a <_dtoa_r+0x35a>
 800307a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800307e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003082:	f7fd fb67 	bl	8000754 <__aeabi_ddiv>
 8003086:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800308a:	e06e      	b.n	800316a <_dtoa_r+0x3aa>
 800308c:	2301      	movs	r3, #1
 800308e:	9309      	str	r3, [sp, #36]	; 0x24
 8003090:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8003092:	445b      	add	r3, fp
 8003094:	f103 0901 	add.w	r9, r3, #1
 8003098:	9304      	str	r3, [sp, #16]
 800309a:	464b      	mov	r3, r9
 800309c:	2b01      	cmp	r3, #1
 800309e:	bfb8      	it	lt
 80030a0:	2301      	movlt	r3, #1
 80030a2:	e7b0      	b.n	8003006 <_dtoa_r+0x246>
 80030a4:	2300      	movs	r3, #0
 80030a6:	e7a7      	b.n	8002ff8 <_dtoa_r+0x238>
 80030a8:	2300      	movs	r3, #0
 80030aa:	e7f0      	b.n	800308e <_dtoa_r+0x2ce>
 80030ac:	f3af 8000 	nop.w
 80030b0:	636f4361 	.word	0x636f4361
 80030b4:	3fd287a7 	.word	0x3fd287a7
 80030b8:	8b60c8b3 	.word	0x8b60c8b3
 80030bc:	3fc68a28 	.word	0x3fc68a28
 80030c0:	509f79fb 	.word	0x509f79fb
 80030c4:	3fd34413 	.word	0x3fd34413
 80030c8:	7ff00000 	.word	0x7ff00000
 80030cc:	0800453c 	.word	0x0800453c
 80030d0:	08004533 	.word	0x08004533
 80030d4:	08004510 	.word	0x08004510
 80030d8:	3ff80000 	.word	0x3ff80000
 80030dc:	08004568 	.word	0x08004568
 80030e0:	08004540 	.word	0x08004540
 80030e4:	2601      	movs	r6, #1
 80030e6:	2300      	movs	r3, #0
 80030e8:	9609      	str	r6, [sp, #36]	; 0x24
 80030ea:	931e      	str	r3, [sp, #120]	; 0x78
 80030ec:	f04f 33ff 	mov.w	r3, #4294967295
 80030f0:	2200      	movs	r2, #0
 80030f2:	9304      	str	r3, [sp, #16]
 80030f4:	4699      	mov	r9, r3
 80030f6:	2312      	movs	r3, #18
 80030f8:	921f      	str	r2, [sp, #124]	; 0x7c
 80030fa:	e784      	b.n	8003006 <_dtoa_r+0x246>
 80030fc:	2301      	movs	r3, #1
 80030fe:	9309      	str	r3, [sp, #36]	; 0x24
 8003100:	e7f4      	b.n	80030ec <_dtoa_r+0x32c>
 8003102:	2301      	movs	r3, #1
 8003104:	9304      	str	r3, [sp, #16]
 8003106:	4699      	mov	r9, r3
 8003108:	461a      	mov	r2, r3
 800310a:	e7f5      	b.n	80030f8 <_dtoa_r+0x338>
 800310c:	686a      	ldr	r2, [r5, #4]
 800310e:	0049      	lsls	r1, r1, #1
 8003110:	3201      	adds	r2, #1
 8003112:	606a      	str	r2, [r5, #4]
 8003114:	e77b      	b.n	800300e <_dtoa_r+0x24e>
 8003116:	2502      	movs	r5, #2
 8003118:	e7ac      	b.n	8003074 <_dtoa_r+0x2b4>
 800311a:	07f1      	lsls	r1, r6, #31
 800311c:	d508      	bpl.n	8003130 <_dtoa_r+0x370>
 800311e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8003122:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003126:	f7fd f9eb 	bl	8000500 <__aeabi_dmul>
 800312a:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800312e:	3501      	adds	r5, #1
 8003130:	1076      	asrs	r6, r6, #1
 8003132:	3708      	adds	r7, #8
 8003134:	e79f      	b.n	8003076 <_dtoa_r+0x2b6>
 8003136:	f000 80a5 	beq.w	8003284 <_dtoa_r+0x4c4>
 800313a:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800313e:	f1cb 0600 	rsb	r6, fp, #0
 8003142:	4ba2      	ldr	r3, [pc, #648]	; (80033cc <_dtoa_r+0x60c>)
 8003144:	f006 020f 	and.w	r2, r6, #15
 8003148:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800314c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003150:	f7fd f9d6 	bl	8000500 <__aeabi_dmul>
 8003154:	2502      	movs	r5, #2
 8003156:	2300      	movs	r3, #0
 8003158:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800315c:	4f9c      	ldr	r7, [pc, #624]	; (80033d0 <_dtoa_r+0x610>)
 800315e:	1136      	asrs	r6, r6, #4
 8003160:	2e00      	cmp	r6, #0
 8003162:	f040 8084 	bne.w	800326e <_dtoa_r+0x4ae>
 8003166:	2b00      	cmp	r3, #0
 8003168:	d18d      	bne.n	8003086 <_dtoa_r+0x2c6>
 800316a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800316c:	2b00      	cmp	r3, #0
 800316e:	f000 808b 	beq.w	8003288 <_dtoa_r+0x4c8>
 8003172:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003176:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800317a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800317e:	2200      	movs	r2, #0
 8003180:	4b94      	ldr	r3, [pc, #592]	; (80033d4 <_dtoa_r+0x614>)
 8003182:	f7fd fc2f 	bl	80009e4 <__aeabi_dcmplt>
 8003186:	2800      	cmp	r0, #0
 8003188:	d07e      	beq.n	8003288 <_dtoa_r+0x4c8>
 800318a:	f1b9 0f00 	cmp.w	r9, #0
 800318e:	d07b      	beq.n	8003288 <_dtoa_r+0x4c8>
 8003190:	9b04      	ldr	r3, [sp, #16]
 8003192:	2b00      	cmp	r3, #0
 8003194:	dd37      	ble.n	8003206 <_dtoa_r+0x446>
 8003196:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800319a:	2200      	movs	r2, #0
 800319c:	4b8e      	ldr	r3, [pc, #568]	; (80033d8 <_dtoa_r+0x618>)
 800319e:	f7fd f9af 	bl	8000500 <__aeabi_dmul>
 80031a2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80031a6:	9e04      	ldr	r6, [sp, #16]
 80031a8:	f10b 37ff 	add.w	r7, fp, #4294967295
 80031ac:	3501      	adds	r5, #1
 80031ae:	4628      	mov	r0, r5
 80031b0:	f7fd f940 	bl	8000434 <__aeabi_i2d>
 80031b4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80031b8:	f7fd f9a2 	bl	8000500 <__aeabi_dmul>
 80031bc:	4b87      	ldr	r3, [pc, #540]	; (80033dc <_dtoa_r+0x61c>)
 80031be:	2200      	movs	r2, #0
 80031c0:	f7fc ffec 	bl	800019c <__adddf3>
 80031c4:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80031c8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80031ca:	f1a3 7550 	sub.w	r5, r3, #54525952	; 0x3400000
 80031ce:	950b      	str	r5, [sp, #44]	; 0x2c
 80031d0:	2e00      	cmp	r6, #0
 80031d2:	d15c      	bne.n	800328e <_dtoa_r+0x4ce>
 80031d4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80031d8:	2200      	movs	r2, #0
 80031da:	4b81      	ldr	r3, [pc, #516]	; (80033e0 <_dtoa_r+0x620>)
 80031dc:	f7fc ffdc 	bl	8000198 <__aeabi_dsub>
 80031e0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80031e2:	462b      	mov	r3, r5
 80031e4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80031e8:	f7fd fc1a 	bl	8000a20 <__aeabi_dcmpgt>
 80031ec:	2800      	cmp	r0, #0
 80031ee:	f040 82f7 	bne.w	80037e0 <_dtoa_r+0xa20>
 80031f2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80031f6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80031f8:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 80031fc:	f7fd fbf2 	bl	80009e4 <__aeabi_dcmplt>
 8003200:	2800      	cmp	r0, #0
 8003202:	f040 82eb 	bne.w	80037dc <_dtoa_r+0xa1c>
 8003206:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800320a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800320e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8003210:	2b00      	cmp	r3, #0
 8003212:	f2c0 8150 	blt.w	80034b6 <_dtoa_r+0x6f6>
 8003216:	f1bb 0f0e 	cmp.w	fp, #14
 800321a:	f300 814c 	bgt.w	80034b6 <_dtoa_r+0x6f6>
 800321e:	4b6b      	ldr	r3, [pc, #428]	; (80033cc <_dtoa_r+0x60c>)
 8003220:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8003224:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003228:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800322c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800322e:	2b00      	cmp	r3, #0
 8003230:	f280 80da 	bge.w	80033e8 <_dtoa_r+0x628>
 8003234:	f1b9 0f00 	cmp.w	r9, #0
 8003238:	f300 80d6 	bgt.w	80033e8 <_dtoa_r+0x628>
 800323c:	f040 82cd 	bne.w	80037da <_dtoa_r+0xa1a>
 8003240:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003244:	2200      	movs	r2, #0
 8003246:	4b66      	ldr	r3, [pc, #408]	; (80033e0 <_dtoa_r+0x620>)
 8003248:	f7fd f95a 	bl	8000500 <__aeabi_dmul>
 800324c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003250:	f7fd fbdc 	bl	8000a0c <__aeabi_dcmpge>
 8003254:	464e      	mov	r6, r9
 8003256:	464f      	mov	r7, r9
 8003258:	2800      	cmp	r0, #0
 800325a:	f040 82a4 	bne.w	80037a6 <_dtoa_r+0x9e6>
 800325e:	9b06      	ldr	r3, [sp, #24]
 8003260:	9a06      	ldr	r2, [sp, #24]
 8003262:	1c5d      	adds	r5, r3, #1
 8003264:	2331      	movs	r3, #49	; 0x31
 8003266:	f10b 0b01 	add.w	fp, fp, #1
 800326a:	7013      	strb	r3, [r2, #0]
 800326c:	e29f      	b.n	80037ae <_dtoa_r+0x9ee>
 800326e:	07f2      	lsls	r2, r6, #31
 8003270:	d505      	bpl.n	800327e <_dtoa_r+0x4be>
 8003272:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003276:	f7fd f943 	bl	8000500 <__aeabi_dmul>
 800327a:	2301      	movs	r3, #1
 800327c:	3501      	adds	r5, #1
 800327e:	1076      	asrs	r6, r6, #1
 8003280:	3708      	adds	r7, #8
 8003282:	e76d      	b.n	8003160 <_dtoa_r+0x3a0>
 8003284:	2502      	movs	r5, #2
 8003286:	e770      	b.n	800316a <_dtoa_r+0x3aa>
 8003288:	465f      	mov	r7, fp
 800328a:	464e      	mov	r6, r9
 800328c:	e78f      	b.n	80031ae <_dtoa_r+0x3ee>
 800328e:	9a06      	ldr	r2, [sp, #24]
 8003290:	4b4e      	ldr	r3, [pc, #312]	; (80033cc <_dtoa_r+0x60c>)
 8003292:	4432      	add	r2, r6
 8003294:	9211      	str	r2, [sp, #68]	; 0x44
 8003296:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003298:	1e71      	subs	r1, r6, #1
 800329a:	2a00      	cmp	r2, #0
 800329c:	d048      	beq.n	8003330 <_dtoa_r+0x570>
 800329e:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 80032a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032a6:	2000      	movs	r0, #0
 80032a8:	494e      	ldr	r1, [pc, #312]	; (80033e4 <_dtoa_r+0x624>)
 80032aa:	f7fd fa53 	bl	8000754 <__aeabi_ddiv>
 80032ae:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80032b2:	f7fc ff71 	bl	8000198 <__aeabi_dsub>
 80032b6:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80032ba:	9d06      	ldr	r5, [sp, #24]
 80032bc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80032c0:	f7fd fbce 	bl	8000a60 <__aeabi_d2iz>
 80032c4:	4606      	mov	r6, r0
 80032c6:	f7fd f8b5 	bl	8000434 <__aeabi_i2d>
 80032ca:	4602      	mov	r2, r0
 80032cc:	460b      	mov	r3, r1
 80032ce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80032d2:	f7fc ff61 	bl	8000198 <__aeabi_dsub>
 80032d6:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80032da:	3630      	adds	r6, #48	; 0x30
 80032dc:	f805 6b01 	strb.w	r6, [r5], #1
 80032e0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80032e4:	f7fd fb7e 	bl	80009e4 <__aeabi_dcmplt>
 80032e8:	2800      	cmp	r0, #0
 80032ea:	d164      	bne.n	80033b6 <_dtoa_r+0x5f6>
 80032ec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80032f0:	2000      	movs	r0, #0
 80032f2:	4938      	ldr	r1, [pc, #224]	; (80033d4 <_dtoa_r+0x614>)
 80032f4:	f7fc ff50 	bl	8000198 <__aeabi_dsub>
 80032f8:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80032fc:	f7fd fb72 	bl	80009e4 <__aeabi_dcmplt>
 8003300:	2800      	cmp	r0, #0
 8003302:	f040 80b9 	bne.w	8003478 <_dtoa_r+0x6b8>
 8003306:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8003308:	429d      	cmp	r5, r3
 800330a:	f43f af7c 	beq.w	8003206 <_dtoa_r+0x446>
 800330e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8003312:	2200      	movs	r2, #0
 8003314:	4b30      	ldr	r3, [pc, #192]	; (80033d8 <_dtoa_r+0x618>)
 8003316:	f7fd f8f3 	bl	8000500 <__aeabi_dmul>
 800331a:	2200      	movs	r2, #0
 800331c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8003320:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003324:	4b2c      	ldr	r3, [pc, #176]	; (80033d8 <_dtoa_r+0x618>)
 8003326:	f7fd f8eb 	bl	8000500 <__aeabi_dmul>
 800332a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800332e:	e7c5      	b.n	80032bc <_dtoa_r+0x4fc>
 8003330:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 8003334:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003338:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800333c:	f7fd f8e0 	bl	8000500 <__aeabi_dmul>
 8003340:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8003344:	9d06      	ldr	r5, [sp, #24]
 8003346:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800334a:	f7fd fb89 	bl	8000a60 <__aeabi_d2iz>
 800334e:	4606      	mov	r6, r0
 8003350:	f7fd f870 	bl	8000434 <__aeabi_i2d>
 8003354:	4602      	mov	r2, r0
 8003356:	460b      	mov	r3, r1
 8003358:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800335c:	f7fc ff1c 	bl	8000198 <__aeabi_dsub>
 8003360:	3630      	adds	r6, #48	; 0x30
 8003362:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8003364:	f805 6b01 	strb.w	r6, [r5], #1
 8003368:	42ab      	cmp	r3, r5
 800336a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800336e:	f04f 0200 	mov.w	r2, #0
 8003372:	d124      	bne.n	80033be <_dtoa_r+0x5fe>
 8003374:	4b1b      	ldr	r3, [pc, #108]	; (80033e4 <_dtoa_r+0x624>)
 8003376:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800337a:	f7fc ff0f 	bl	800019c <__adddf3>
 800337e:	4602      	mov	r2, r0
 8003380:	460b      	mov	r3, r1
 8003382:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003386:	f7fd fb4b 	bl	8000a20 <__aeabi_dcmpgt>
 800338a:	2800      	cmp	r0, #0
 800338c:	d174      	bne.n	8003478 <_dtoa_r+0x6b8>
 800338e:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8003392:	2000      	movs	r0, #0
 8003394:	4913      	ldr	r1, [pc, #76]	; (80033e4 <_dtoa_r+0x624>)
 8003396:	f7fc feff 	bl	8000198 <__aeabi_dsub>
 800339a:	4602      	mov	r2, r0
 800339c:	460b      	mov	r3, r1
 800339e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80033a2:	f7fd fb1f 	bl	80009e4 <__aeabi_dcmplt>
 80033a6:	2800      	cmp	r0, #0
 80033a8:	f43f af2d 	beq.w	8003206 <_dtoa_r+0x446>
 80033ac:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80033b0:	1e6a      	subs	r2, r5, #1
 80033b2:	2b30      	cmp	r3, #48	; 0x30
 80033b4:	d001      	beq.n	80033ba <_dtoa_r+0x5fa>
 80033b6:	46bb      	mov	fp, r7
 80033b8:	e04d      	b.n	8003456 <_dtoa_r+0x696>
 80033ba:	4615      	mov	r5, r2
 80033bc:	e7f6      	b.n	80033ac <_dtoa_r+0x5ec>
 80033be:	4b06      	ldr	r3, [pc, #24]	; (80033d8 <_dtoa_r+0x618>)
 80033c0:	f7fd f89e 	bl	8000500 <__aeabi_dmul>
 80033c4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80033c8:	e7bd      	b.n	8003346 <_dtoa_r+0x586>
 80033ca:	bf00      	nop
 80033cc:	08004568 	.word	0x08004568
 80033d0:	08004540 	.word	0x08004540
 80033d4:	3ff00000 	.word	0x3ff00000
 80033d8:	40240000 	.word	0x40240000
 80033dc:	401c0000 	.word	0x401c0000
 80033e0:	40140000 	.word	0x40140000
 80033e4:	3fe00000 	.word	0x3fe00000
 80033e8:	9d06      	ldr	r5, [sp, #24]
 80033ea:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80033ee:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80033f2:	4630      	mov	r0, r6
 80033f4:	4639      	mov	r1, r7
 80033f6:	f7fd f9ad 	bl	8000754 <__aeabi_ddiv>
 80033fa:	f7fd fb31 	bl	8000a60 <__aeabi_d2iz>
 80033fe:	4680      	mov	r8, r0
 8003400:	f7fd f818 	bl	8000434 <__aeabi_i2d>
 8003404:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003408:	f7fd f87a 	bl	8000500 <__aeabi_dmul>
 800340c:	4602      	mov	r2, r0
 800340e:	460b      	mov	r3, r1
 8003410:	4630      	mov	r0, r6
 8003412:	4639      	mov	r1, r7
 8003414:	f7fc fec0 	bl	8000198 <__aeabi_dsub>
 8003418:	f108 0630 	add.w	r6, r8, #48	; 0x30
 800341c:	f805 6b01 	strb.w	r6, [r5], #1
 8003420:	9e06      	ldr	r6, [sp, #24]
 8003422:	4602      	mov	r2, r0
 8003424:	1bae      	subs	r6, r5, r6
 8003426:	45b1      	cmp	r9, r6
 8003428:	460b      	mov	r3, r1
 800342a:	d137      	bne.n	800349c <_dtoa_r+0x6dc>
 800342c:	f7fc feb6 	bl	800019c <__adddf3>
 8003430:	4606      	mov	r6, r0
 8003432:	460f      	mov	r7, r1
 8003434:	4602      	mov	r2, r0
 8003436:	460b      	mov	r3, r1
 8003438:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800343c:	f7fd fad2 	bl	80009e4 <__aeabi_dcmplt>
 8003440:	b9c8      	cbnz	r0, 8003476 <_dtoa_r+0x6b6>
 8003442:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003446:	4632      	mov	r2, r6
 8003448:	463b      	mov	r3, r7
 800344a:	f7fd fac1 	bl	80009d0 <__aeabi_dcmpeq>
 800344e:	b110      	cbz	r0, 8003456 <_dtoa_r+0x696>
 8003450:	f018 0f01 	tst.w	r8, #1
 8003454:	d10f      	bne.n	8003476 <_dtoa_r+0x6b6>
 8003456:	4651      	mov	r1, sl
 8003458:	4620      	mov	r0, r4
 800345a:	f000 fae8 	bl	8003a2e <_Bfree>
 800345e:	2300      	movs	r3, #0
 8003460:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8003462:	702b      	strb	r3, [r5, #0]
 8003464:	f10b 0301 	add.w	r3, fp, #1
 8003468:	6013      	str	r3, [r2, #0]
 800346a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800346c:	2b00      	cmp	r3, #0
 800346e:	f43f acec 	beq.w	8002e4a <_dtoa_r+0x8a>
 8003472:	601d      	str	r5, [r3, #0]
 8003474:	e4e9      	b.n	8002e4a <_dtoa_r+0x8a>
 8003476:	465f      	mov	r7, fp
 8003478:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800347c:	1e6b      	subs	r3, r5, #1
 800347e:	2a39      	cmp	r2, #57	; 0x39
 8003480:	d106      	bne.n	8003490 <_dtoa_r+0x6d0>
 8003482:	9a06      	ldr	r2, [sp, #24]
 8003484:	429a      	cmp	r2, r3
 8003486:	d107      	bne.n	8003498 <_dtoa_r+0x6d8>
 8003488:	2330      	movs	r3, #48	; 0x30
 800348a:	7013      	strb	r3, [r2, #0]
 800348c:	4613      	mov	r3, r2
 800348e:	3701      	adds	r7, #1
 8003490:	781a      	ldrb	r2, [r3, #0]
 8003492:	3201      	adds	r2, #1
 8003494:	701a      	strb	r2, [r3, #0]
 8003496:	e78e      	b.n	80033b6 <_dtoa_r+0x5f6>
 8003498:	461d      	mov	r5, r3
 800349a:	e7ed      	b.n	8003478 <_dtoa_r+0x6b8>
 800349c:	2200      	movs	r2, #0
 800349e:	4bb5      	ldr	r3, [pc, #724]	; (8003774 <_dtoa_r+0x9b4>)
 80034a0:	f7fd f82e 	bl	8000500 <__aeabi_dmul>
 80034a4:	2200      	movs	r2, #0
 80034a6:	2300      	movs	r3, #0
 80034a8:	4606      	mov	r6, r0
 80034aa:	460f      	mov	r7, r1
 80034ac:	f7fd fa90 	bl	80009d0 <__aeabi_dcmpeq>
 80034b0:	2800      	cmp	r0, #0
 80034b2:	d09c      	beq.n	80033ee <_dtoa_r+0x62e>
 80034b4:	e7cf      	b.n	8003456 <_dtoa_r+0x696>
 80034b6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80034b8:	2a00      	cmp	r2, #0
 80034ba:	f000 8129 	beq.w	8003710 <_dtoa_r+0x950>
 80034be:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80034c0:	2a01      	cmp	r2, #1
 80034c2:	f300 810e 	bgt.w	80036e2 <_dtoa_r+0x922>
 80034c6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80034c8:	2a00      	cmp	r2, #0
 80034ca:	f000 8106 	beq.w	80036da <_dtoa_r+0x91a>
 80034ce:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80034d2:	4645      	mov	r5, r8
 80034d4:	9e08      	ldr	r6, [sp, #32]
 80034d6:	9a07      	ldr	r2, [sp, #28]
 80034d8:	2101      	movs	r1, #1
 80034da:	441a      	add	r2, r3
 80034dc:	4620      	mov	r0, r4
 80034de:	4498      	add	r8, r3
 80034e0:	9207      	str	r2, [sp, #28]
 80034e2:	f000 fb44 	bl	8003b6e <__i2b>
 80034e6:	4607      	mov	r7, r0
 80034e8:	2d00      	cmp	r5, #0
 80034ea:	dd0b      	ble.n	8003504 <_dtoa_r+0x744>
 80034ec:	9b07      	ldr	r3, [sp, #28]
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	dd08      	ble.n	8003504 <_dtoa_r+0x744>
 80034f2:	42ab      	cmp	r3, r5
 80034f4:	bfa8      	it	ge
 80034f6:	462b      	movge	r3, r5
 80034f8:	9a07      	ldr	r2, [sp, #28]
 80034fa:	eba8 0803 	sub.w	r8, r8, r3
 80034fe:	1aed      	subs	r5, r5, r3
 8003500:	1ad3      	subs	r3, r2, r3
 8003502:	9307      	str	r3, [sp, #28]
 8003504:	9b08      	ldr	r3, [sp, #32]
 8003506:	b1fb      	cbz	r3, 8003548 <_dtoa_r+0x788>
 8003508:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800350a:	2b00      	cmp	r3, #0
 800350c:	f000 8104 	beq.w	8003718 <_dtoa_r+0x958>
 8003510:	2e00      	cmp	r6, #0
 8003512:	dd11      	ble.n	8003538 <_dtoa_r+0x778>
 8003514:	4639      	mov	r1, r7
 8003516:	4632      	mov	r2, r6
 8003518:	4620      	mov	r0, r4
 800351a:	f000 fbbd 	bl	8003c98 <__pow5mult>
 800351e:	4652      	mov	r2, sl
 8003520:	4601      	mov	r1, r0
 8003522:	4607      	mov	r7, r0
 8003524:	4620      	mov	r0, r4
 8003526:	f000 fb2b 	bl	8003b80 <__multiply>
 800352a:	4651      	mov	r1, sl
 800352c:	900a      	str	r0, [sp, #40]	; 0x28
 800352e:	4620      	mov	r0, r4
 8003530:	f000 fa7d 	bl	8003a2e <_Bfree>
 8003534:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003536:	469a      	mov	sl, r3
 8003538:	9b08      	ldr	r3, [sp, #32]
 800353a:	1b9a      	subs	r2, r3, r6
 800353c:	d004      	beq.n	8003548 <_dtoa_r+0x788>
 800353e:	4651      	mov	r1, sl
 8003540:	4620      	mov	r0, r4
 8003542:	f000 fba9 	bl	8003c98 <__pow5mult>
 8003546:	4682      	mov	sl, r0
 8003548:	2101      	movs	r1, #1
 800354a:	4620      	mov	r0, r4
 800354c:	f000 fb0f 	bl	8003b6e <__i2b>
 8003550:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003552:	4606      	mov	r6, r0
 8003554:	2b00      	cmp	r3, #0
 8003556:	f340 80e1 	ble.w	800371c <_dtoa_r+0x95c>
 800355a:	461a      	mov	r2, r3
 800355c:	4601      	mov	r1, r0
 800355e:	4620      	mov	r0, r4
 8003560:	f000 fb9a 	bl	8003c98 <__pow5mult>
 8003564:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8003566:	4606      	mov	r6, r0
 8003568:	2b01      	cmp	r3, #1
 800356a:	f340 80da 	ble.w	8003722 <_dtoa_r+0x962>
 800356e:	2300      	movs	r3, #0
 8003570:	9308      	str	r3, [sp, #32]
 8003572:	6933      	ldr	r3, [r6, #16]
 8003574:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8003578:	6918      	ldr	r0, [r3, #16]
 800357a:	f000 faaa 	bl	8003ad2 <__hi0bits>
 800357e:	f1c0 0020 	rsb	r0, r0, #32
 8003582:	9b07      	ldr	r3, [sp, #28]
 8003584:	4418      	add	r0, r3
 8003586:	f010 001f 	ands.w	r0, r0, #31
 800358a:	f000 80f0 	beq.w	800376e <_dtoa_r+0x9ae>
 800358e:	f1c0 0320 	rsb	r3, r0, #32
 8003592:	2b04      	cmp	r3, #4
 8003594:	f340 80e2 	ble.w	800375c <_dtoa_r+0x99c>
 8003598:	9b07      	ldr	r3, [sp, #28]
 800359a:	f1c0 001c 	rsb	r0, r0, #28
 800359e:	4480      	add	r8, r0
 80035a0:	4405      	add	r5, r0
 80035a2:	4403      	add	r3, r0
 80035a4:	9307      	str	r3, [sp, #28]
 80035a6:	f1b8 0f00 	cmp.w	r8, #0
 80035aa:	dd05      	ble.n	80035b8 <_dtoa_r+0x7f8>
 80035ac:	4651      	mov	r1, sl
 80035ae:	4642      	mov	r2, r8
 80035b0:	4620      	mov	r0, r4
 80035b2:	f000 fbbf 	bl	8003d34 <__lshift>
 80035b6:	4682      	mov	sl, r0
 80035b8:	9b07      	ldr	r3, [sp, #28]
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	dd05      	ble.n	80035ca <_dtoa_r+0x80a>
 80035be:	4631      	mov	r1, r6
 80035c0:	461a      	mov	r2, r3
 80035c2:	4620      	mov	r0, r4
 80035c4:	f000 fbb6 	bl	8003d34 <__lshift>
 80035c8:	4606      	mov	r6, r0
 80035ca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	f000 80d3 	beq.w	8003778 <_dtoa_r+0x9b8>
 80035d2:	4631      	mov	r1, r6
 80035d4:	4650      	mov	r0, sl
 80035d6:	f000 fbfe 	bl	8003dd6 <__mcmp>
 80035da:	2800      	cmp	r0, #0
 80035dc:	f280 80cc 	bge.w	8003778 <_dtoa_r+0x9b8>
 80035e0:	2300      	movs	r3, #0
 80035e2:	4651      	mov	r1, sl
 80035e4:	220a      	movs	r2, #10
 80035e6:	4620      	mov	r0, r4
 80035e8:	f000 fa38 	bl	8003a5c <__multadd>
 80035ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80035ee:	f10b 3bff 	add.w	fp, fp, #4294967295
 80035f2:	4682      	mov	sl, r0
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	f000 81a9 	beq.w	800394c <_dtoa_r+0xb8c>
 80035fa:	2300      	movs	r3, #0
 80035fc:	4639      	mov	r1, r7
 80035fe:	220a      	movs	r2, #10
 8003600:	4620      	mov	r0, r4
 8003602:	f000 fa2b 	bl	8003a5c <__multadd>
 8003606:	9b04      	ldr	r3, [sp, #16]
 8003608:	4607      	mov	r7, r0
 800360a:	2b00      	cmp	r3, #0
 800360c:	dc03      	bgt.n	8003616 <_dtoa_r+0x856>
 800360e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8003610:	2b02      	cmp	r3, #2
 8003612:	f300 80b9 	bgt.w	8003788 <_dtoa_r+0x9c8>
 8003616:	2d00      	cmp	r5, #0
 8003618:	dd05      	ble.n	8003626 <_dtoa_r+0x866>
 800361a:	4639      	mov	r1, r7
 800361c:	462a      	mov	r2, r5
 800361e:	4620      	mov	r0, r4
 8003620:	f000 fb88 	bl	8003d34 <__lshift>
 8003624:	4607      	mov	r7, r0
 8003626:	9b08      	ldr	r3, [sp, #32]
 8003628:	2b00      	cmp	r3, #0
 800362a:	f000 8110 	beq.w	800384e <_dtoa_r+0xa8e>
 800362e:	6879      	ldr	r1, [r7, #4]
 8003630:	4620      	mov	r0, r4
 8003632:	f000 f9c8 	bl	80039c6 <_Balloc>
 8003636:	4605      	mov	r5, r0
 8003638:	693a      	ldr	r2, [r7, #16]
 800363a:	f107 010c 	add.w	r1, r7, #12
 800363e:	3202      	adds	r2, #2
 8003640:	0092      	lsls	r2, r2, #2
 8003642:	300c      	adds	r0, #12
 8003644:	f000 f9b4 	bl	80039b0 <memcpy>
 8003648:	2201      	movs	r2, #1
 800364a:	4629      	mov	r1, r5
 800364c:	4620      	mov	r0, r4
 800364e:	f000 fb71 	bl	8003d34 <__lshift>
 8003652:	9707      	str	r7, [sp, #28]
 8003654:	4607      	mov	r7, r0
 8003656:	9b02      	ldr	r3, [sp, #8]
 8003658:	f8dd 8018 	ldr.w	r8, [sp, #24]
 800365c:	f003 0301 	and.w	r3, r3, #1
 8003660:	9308      	str	r3, [sp, #32]
 8003662:	4631      	mov	r1, r6
 8003664:	4650      	mov	r0, sl
 8003666:	f7ff fb1f 	bl	8002ca8 <quorem>
 800366a:	9907      	ldr	r1, [sp, #28]
 800366c:	4605      	mov	r5, r0
 800366e:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8003672:	4650      	mov	r0, sl
 8003674:	f000 fbaf 	bl	8003dd6 <__mcmp>
 8003678:	463a      	mov	r2, r7
 800367a:	9002      	str	r0, [sp, #8]
 800367c:	4631      	mov	r1, r6
 800367e:	4620      	mov	r0, r4
 8003680:	f000 fbc3 	bl	8003e0a <__mdiff>
 8003684:	68c3      	ldr	r3, [r0, #12]
 8003686:	4602      	mov	r2, r0
 8003688:	2b00      	cmp	r3, #0
 800368a:	f040 80e2 	bne.w	8003852 <_dtoa_r+0xa92>
 800368e:	4601      	mov	r1, r0
 8003690:	9009      	str	r0, [sp, #36]	; 0x24
 8003692:	4650      	mov	r0, sl
 8003694:	f000 fb9f 	bl	8003dd6 <__mcmp>
 8003698:	4603      	mov	r3, r0
 800369a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800369c:	4611      	mov	r1, r2
 800369e:	4620      	mov	r0, r4
 80036a0:	9309      	str	r3, [sp, #36]	; 0x24
 80036a2:	f000 f9c4 	bl	8003a2e <_Bfree>
 80036a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	f040 80d4 	bne.w	8003856 <_dtoa_r+0xa96>
 80036ae:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80036b0:	2a00      	cmp	r2, #0
 80036b2:	f040 80d0 	bne.w	8003856 <_dtoa_r+0xa96>
 80036b6:	9a08      	ldr	r2, [sp, #32]
 80036b8:	2a00      	cmp	r2, #0
 80036ba:	f040 80cc 	bne.w	8003856 <_dtoa_r+0xa96>
 80036be:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80036c2:	f000 80e8 	beq.w	8003896 <_dtoa_r+0xad6>
 80036c6:	9b02      	ldr	r3, [sp, #8]
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	dd01      	ble.n	80036d0 <_dtoa_r+0x910>
 80036cc:	f105 0931 	add.w	r9, r5, #49	; 0x31
 80036d0:	f108 0501 	add.w	r5, r8, #1
 80036d4:	f888 9000 	strb.w	r9, [r8]
 80036d8:	e06b      	b.n	80037b2 <_dtoa_r+0x9f2>
 80036da:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80036dc:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80036e0:	e6f7      	b.n	80034d2 <_dtoa_r+0x712>
 80036e2:	9b08      	ldr	r3, [sp, #32]
 80036e4:	f109 36ff 	add.w	r6, r9, #4294967295
 80036e8:	42b3      	cmp	r3, r6
 80036ea:	bfb7      	itett	lt
 80036ec:	9b08      	ldrlt	r3, [sp, #32]
 80036ee:	1b9e      	subge	r6, r3, r6
 80036f0:	1af2      	sublt	r2, r6, r3
 80036f2:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
 80036f4:	bfbf      	itttt	lt
 80036f6:	9608      	strlt	r6, [sp, #32]
 80036f8:	189b      	addlt	r3, r3, r2
 80036fa:	930c      	strlt	r3, [sp, #48]	; 0x30
 80036fc:	2600      	movlt	r6, #0
 80036fe:	f1b9 0f00 	cmp.w	r9, #0
 8003702:	bfb9      	ittee	lt
 8003704:	eba8 0509 	sublt.w	r5, r8, r9
 8003708:	2300      	movlt	r3, #0
 800370a:	4645      	movge	r5, r8
 800370c:	464b      	movge	r3, r9
 800370e:	e6e2      	b.n	80034d6 <_dtoa_r+0x716>
 8003710:	9e08      	ldr	r6, [sp, #32]
 8003712:	4645      	mov	r5, r8
 8003714:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8003716:	e6e7      	b.n	80034e8 <_dtoa_r+0x728>
 8003718:	9a08      	ldr	r2, [sp, #32]
 800371a:	e710      	b.n	800353e <_dtoa_r+0x77e>
 800371c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800371e:	2b01      	cmp	r3, #1
 8003720:	dc18      	bgt.n	8003754 <_dtoa_r+0x994>
 8003722:	9b02      	ldr	r3, [sp, #8]
 8003724:	b9b3      	cbnz	r3, 8003754 <_dtoa_r+0x994>
 8003726:	9b03      	ldr	r3, [sp, #12]
 8003728:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800372c:	b9a3      	cbnz	r3, 8003758 <_dtoa_r+0x998>
 800372e:	9b03      	ldr	r3, [sp, #12]
 8003730:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003734:	0d1b      	lsrs	r3, r3, #20
 8003736:	051b      	lsls	r3, r3, #20
 8003738:	b12b      	cbz	r3, 8003746 <_dtoa_r+0x986>
 800373a:	9b07      	ldr	r3, [sp, #28]
 800373c:	f108 0801 	add.w	r8, r8, #1
 8003740:	3301      	adds	r3, #1
 8003742:	9307      	str	r3, [sp, #28]
 8003744:	2301      	movs	r3, #1
 8003746:	9308      	str	r3, [sp, #32]
 8003748:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800374a:	2b00      	cmp	r3, #0
 800374c:	f47f af11 	bne.w	8003572 <_dtoa_r+0x7b2>
 8003750:	2001      	movs	r0, #1
 8003752:	e716      	b.n	8003582 <_dtoa_r+0x7c2>
 8003754:	2300      	movs	r3, #0
 8003756:	e7f6      	b.n	8003746 <_dtoa_r+0x986>
 8003758:	9b02      	ldr	r3, [sp, #8]
 800375a:	e7f4      	b.n	8003746 <_dtoa_r+0x986>
 800375c:	f43f af23 	beq.w	80035a6 <_dtoa_r+0x7e6>
 8003760:	9a07      	ldr	r2, [sp, #28]
 8003762:	331c      	adds	r3, #28
 8003764:	441a      	add	r2, r3
 8003766:	4498      	add	r8, r3
 8003768:	441d      	add	r5, r3
 800376a:	4613      	mov	r3, r2
 800376c:	e71a      	b.n	80035a4 <_dtoa_r+0x7e4>
 800376e:	4603      	mov	r3, r0
 8003770:	e7f6      	b.n	8003760 <_dtoa_r+0x9a0>
 8003772:	bf00      	nop
 8003774:	40240000 	.word	0x40240000
 8003778:	f1b9 0f00 	cmp.w	r9, #0
 800377c:	dc33      	bgt.n	80037e6 <_dtoa_r+0xa26>
 800377e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8003780:	2b02      	cmp	r3, #2
 8003782:	dd30      	ble.n	80037e6 <_dtoa_r+0xa26>
 8003784:	f8cd 9010 	str.w	r9, [sp, #16]
 8003788:	9b04      	ldr	r3, [sp, #16]
 800378a:	b963      	cbnz	r3, 80037a6 <_dtoa_r+0x9e6>
 800378c:	4631      	mov	r1, r6
 800378e:	2205      	movs	r2, #5
 8003790:	4620      	mov	r0, r4
 8003792:	f000 f963 	bl	8003a5c <__multadd>
 8003796:	4601      	mov	r1, r0
 8003798:	4606      	mov	r6, r0
 800379a:	4650      	mov	r0, sl
 800379c:	f000 fb1b 	bl	8003dd6 <__mcmp>
 80037a0:	2800      	cmp	r0, #0
 80037a2:	f73f ad5c 	bgt.w	800325e <_dtoa_r+0x49e>
 80037a6:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80037a8:	9d06      	ldr	r5, [sp, #24]
 80037aa:	ea6f 0b03 	mvn.w	fp, r3
 80037ae:	2300      	movs	r3, #0
 80037b0:	9307      	str	r3, [sp, #28]
 80037b2:	4631      	mov	r1, r6
 80037b4:	4620      	mov	r0, r4
 80037b6:	f000 f93a 	bl	8003a2e <_Bfree>
 80037ba:	2f00      	cmp	r7, #0
 80037bc:	f43f ae4b 	beq.w	8003456 <_dtoa_r+0x696>
 80037c0:	9b07      	ldr	r3, [sp, #28]
 80037c2:	b12b      	cbz	r3, 80037d0 <_dtoa_r+0xa10>
 80037c4:	42bb      	cmp	r3, r7
 80037c6:	d003      	beq.n	80037d0 <_dtoa_r+0xa10>
 80037c8:	4619      	mov	r1, r3
 80037ca:	4620      	mov	r0, r4
 80037cc:	f000 f92f 	bl	8003a2e <_Bfree>
 80037d0:	4639      	mov	r1, r7
 80037d2:	4620      	mov	r0, r4
 80037d4:	f000 f92b 	bl	8003a2e <_Bfree>
 80037d8:	e63d      	b.n	8003456 <_dtoa_r+0x696>
 80037da:	2600      	movs	r6, #0
 80037dc:	4637      	mov	r7, r6
 80037de:	e7e2      	b.n	80037a6 <_dtoa_r+0x9e6>
 80037e0:	46bb      	mov	fp, r7
 80037e2:	4637      	mov	r7, r6
 80037e4:	e53b      	b.n	800325e <_dtoa_r+0x49e>
 80037e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80037e8:	f8cd 9010 	str.w	r9, [sp, #16]
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	f47f af12 	bne.w	8003616 <_dtoa_r+0x856>
 80037f2:	9d06      	ldr	r5, [sp, #24]
 80037f4:	4631      	mov	r1, r6
 80037f6:	4650      	mov	r0, sl
 80037f8:	f7ff fa56 	bl	8002ca8 <quorem>
 80037fc:	9b06      	ldr	r3, [sp, #24]
 80037fe:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8003802:	f805 9b01 	strb.w	r9, [r5], #1
 8003806:	9a04      	ldr	r2, [sp, #16]
 8003808:	1aeb      	subs	r3, r5, r3
 800380a:	429a      	cmp	r2, r3
 800380c:	f300 8081 	bgt.w	8003912 <_dtoa_r+0xb52>
 8003810:	9b06      	ldr	r3, [sp, #24]
 8003812:	2a01      	cmp	r2, #1
 8003814:	bfac      	ite	ge
 8003816:	189b      	addge	r3, r3, r2
 8003818:	3301      	addlt	r3, #1
 800381a:	4698      	mov	r8, r3
 800381c:	2300      	movs	r3, #0
 800381e:	9307      	str	r3, [sp, #28]
 8003820:	4651      	mov	r1, sl
 8003822:	2201      	movs	r2, #1
 8003824:	4620      	mov	r0, r4
 8003826:	f000 fa85 	bl	8003d34 <__lshift>
 800382a:	4631      	mov	r1, r6
 800382c:	4682      	mov	sl, r0
 800382e:	f000 fad2 	bl	8003dd6 <__mcmp>
 8003832:	2800      	cmp	r0, #0
 8003834:	dc34      	bgt.n	80038a0 <_dtoa_r+0xae0>
 8003836:	d102      	bne.n	800383e <_dtoa_r+0xa7e>
 8003838:	f019 0f01 	tst.w	r9, #1
 800383c:	d130      	bne.n	80038a0 <_dtoa_r+0xae0>
 800383e:	4645      	mov	r5, r8
 8003840:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8003844:	1e6a      	subs	r2, r5, #1
 8003846:	2b30      	cmp	r3, #48	; 0x30
 8003848:	d1b3      	bne.n	80037b2 <_dtoa_r+0x9f2>
 800384a:	4615      	mov	r5, r2
 800384c:	e7f8      	b.n	8003840 <_dtoa_r+0xa80>
 800384e:	4638      	mov	r0, r7
 8003850:	e6ff      	b.n	8003652 <_dtoa_r+0x892>
 8003852:	2301      	movs	r3, #1
 8003854:	e722      	b.n	800369c <_dtoa_r+0x8dc>
 8003856:	9a02      	ldr	r2, [sp, #8]
 8003858:	2a00      	cmp	r2, #0
 800385a:	db04      	blt.n	8003866 <_dtoa_r+0xaa6>
 800385c:	d128      	bne.n	80038b0 <_dtoa_r+0xaf0>
 800385e:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8003860:	bb32      	cbnz	r2, 80038b0 <_dtoa_r+0xaf0>
 8003862:	9a08      	ldr	r2, [sp, #32]
 8003864:	bb22      	cbnz	r2, 80038b0 <_dtoa_r+0xaf0>
 8003866:	2b00      	cmp	r3, #0
 8003868:	f77f af32 	ble.w	80036d0 <_dtoa_r+0x910>
 800386c:	4651      	mov	r1, sl
 800386e:	2201      	movs	r2, #1
 8003870:	4620      	mov	r0, r4
 8003872:	f000 fa5f 	bl	8003d34 <__lshift>
 8003876:	4631      	mov	r1, r6
 8003878:	4682      	mov	sl, r0
 800387a:	f000 faac 	bl	8003dd6 <__mcmp>
 800387e:	2800      	cmp	r0, #0
 8003880:	dc05      	bgt.n	800388e <_dtoa_r+0xace>
 8003882:	f47f af25 	bne.w	80036d0 <_dtoa_r+0x910>
 8003886:	f019 0f01 	tst.w	r9, #1
 800388a:	f43f af21 	beq.w	80036d0 <_dtoa_r+0x910>
 800388e:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8003892:	f47f af1b 	bne.w	80036cc <_dtoa_r+0x90c>
 8003896:	2339      	movs	r3, #57	; 0x39
 8003898:	f108 0801 	add.w	r8, r8, #1
 800389c:	f808 3c01 	strb.w	r3, [r8, #-1]
 80038a0:	4645      	mov	r5, r8
 80038a2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80038a6:	1e6a      	subs	r2, r5, #1
 80038a8:	2b39      	cmp	r3, #57	; 0x39
 80038aa:	d03a      	beq.n	8003922 <_dtoa_r+0xb62>
 80038ac:	3301      	adds	r3, #1
 80038ae:	e03f      	b.n	8003930 <_dtoa_r+0xb70>
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	f108 0501 	add.w	r5, r8, #1
 80038b6:	dd05      	ble.n	80038c4 <_dtoa_r+0xb04>
 80038b8:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80038bc:	d0eb      	beq.n	8003896 <_dtoa_r+0xad6>
 80038be:	f109 0901 	add.w	r9, r9, #1
 80038c2:	e707      	b.n	80036d4 <_dtoa_r+0x914>
 80038c4:	9b06      	ldr	r3, [sp, #24]
 80038c6:	9a04      	ldr	r2, [sp, #16]
 80038c8:	1aeb      	subs	r3, r5, r3
 80038ca:	4293      	cmp	r3, r2
 80038cc:	46a8      	mov	r8, r5
 80038ce:	f805 9c01 	strb.w	r9, [r5, #-1]
 80038d2:	d0a5      	beq.n	8003820 <_dtoa_r+0xa60>
 80038d4:	4651      	mov	r1, sl
 80038d6:	2300      	movs	r3, #0
 80038d8:	220a      	movs	r2, #10
 80038da:	4620      	mov	r0, r4
 80038dc:	f000 f8be 	bl	8003a5c <__multadd>
 80038e0:	9b07      	ldr	r3, [sp, #28]
 80038e2:	4682      	mov	sl, r0
 80038e4:	42bb      	cmp	r3, r7
 80038e6:	f04f 020a 	mov.w	r2, #10
 80038ea:	f04f 0300 	mov.w	r3, #0
 80038ee:	9907      	ldr	r1, [sp, #28]
 80038f0:	4620      	mov	r0, r4
 80038f2:	d104      	bne.n	80038fe <_dtoa_r+0xb3e>
 80038f4:	f000 f8b2 	bl	8003a5c <__multadd>
 80038f8:	9007      	str	r0, [sp, #28]
 80038fa:	4607      	mov	r7, r0
 80038fc:	e6b1      	b.n	8003662 <_dtoa_r+0x8a2>
 80038fe:	f000 f8ad 	bl	8003a5c <__multadd>
 8003902:	2300      	movs	r3, #0
 8003904:	9007      	str	r0, [sp, #28]
 8003906:	220a      	movs	r2, #10
 8003908:	4639      	mov	r1, r7
 800390a:	4620      	mov	r0, r4
 800390c:	f000 f8a6 	bl	8003a5c <__multadd>
 8003910:	e7f3      	b.n	80038fa <_dtoa_r+0xb3a>
 8003912:	4651      	mov	r1, sl
 8003914:	2300      	movs	r3, #0
 8003916:	220a      	movs	r2, #10
 8003918:	4620      	mov	r0, r4
 800391a:	f000 f89f 	bl	8003a5c <__multadd>
 800391e:	4682      	mov	sl, r0
 8003920:	e768      	b.n	80037f4 <_dtoa_r+0xa34>
 8003922:	9b06      	ldr	r3, [sp, #24]
 8003924:	4293      	cmp	r3, r2
 8003926:	d105      	bne.n	8003934 <_dtoa_r+0xb74>
 8003928:	2331      	movs	r3, #49	; 0x31
 800392a:	9a06      	ldr	r2, [sp, #24]
 800392c:	f10b 0b01 	add.w	fp, fp, #1
 8003930:	7013      	strb	r3, [r2, #0]
 8003932:	e73e      	b.n	80037b2 <_dtoa_r+0x9f2>
 8003934:	4615      	mov	r5, r2
 8003936:	e7b4      	b.n	80038a2 <_dtoa_r+0xae2>
 8003938:	4b09      	ldr	r3, [pc, #36]	; (8003960 <_dtoa_r+0xba0>)
 800393a:	f7ff baa3 	b.w	8002e84 <_dtoa_r+0xc4>
 800393e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003940:	2b00      	cmp	r3, #0
 8003942:	f47f aa7d 	bne.w	8002e40 <_dtoa_r+0x80>
 8003946:	4b07      	ldr	r3, [pc, #28]	; (8003964 <_dtoa_r+0xba4>)
 8003948:	f7ff ba9c 	b.w	8002e84 <_dtoa_r+0xc4>
 800394c:	9b04      	ldr	r3, [sp, #16]
 800394e:	2b00      	cmp	r3, #0
 8003950:	f73f af4f 	bgt.w	80037f2 <_dtoa_r+0xa32>
 8003954:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8003956:	2b02      	cmp	r3, #2
 8003958:	f77f af4b 	ble.w	80037f2 <_dtoa_r+0xa32>
 800395c:	e714      	b.n	8003788 <_dtoa_r+0x9c8>
 800395e:	bf00      	nop
 8003960:	0800450f 	.word	0x0800450f
 8003964:	08004533 	.word	0x08004533

08003968 <_localeconv_r>:
 8003968:	4b04      	ldr	r3, [pc, #16]	; (800397c <_localeconv_r+0x14>)
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	6a18      	ldr	r0, [r3, #32]
 800396e:	4b04      	ldr	r3, [pc, #16]	; (8003980 <_localeconv_r+0x18>)
 8003970:	2800      	cmp	r0, #0
 8003972:	bf08      	it	eq
 8003974:	4618      	moveq	r0, r3
 8003976:	30f0      	adds	r0, #240	; 0xf0
 8003978:	4770      	bx	lr
 800397a:	bf00      	nop
 800397c:	20000004 	.word	0x20000004
 8003980:	20000068 	.word	0x20000068

08003984 <malloc>:
 8003984:	4b02      	ldr	r3, [pc, #8]	; (8003990 <malloc+0xc>)
 8003986:	4601      	mov	r1, r0
 8003988:	6818      	ldr	r0, [r3, #0]
 800398a:	f000 bb47 	b.w	800401c <_malloc_r>
 800398e:	bf00      	nop
 8003990:	20000004 	.word	0x20000004

08003994 <memchr>:
 8003994:	b510      	push	{r4, lr}
 8003996:	b2c9      	uxtb	r1, r1
 8003998:	4402      	add	r2, r0
 800399a:	4290      	cmp	r0, r2
 800399c:	4603      	mov	r3, r0
 800399e:	d101      	bne.n	80039a4 <memchr+0x10>
 80039a0:	2000      	movs	r0, #0
 80039a2:	bd10      	pop	{r4, pc}
 80039a4:	781c      	ldrb	r4, [r3, #0]
 80039a6:	3001      	adds	r0, #1
 80039a8:	428c      	cmp	r4, r1
 80039aa:	d1f6      	bne.n	800399a <memchr+0x6>
 80039ac:	4618      	mov	r0, r3
 80039ae:	bd10      	pop	{r4, pc}

080039b0 <memcpy>:
 80039b0:	b510      	push	{r4, lr}
 80039b2:	1e43      	subs	r3, r0, #1
 80039b4:	440a      	add	r2, r1
 80039b6:	4291      	cmp	r1, r2
 80039b8:	d100      	bne.n	80039bc <memcpy+0xc>
 80039ba:	bd10      	pop	{r4, pc}
 80039bc:	f811 4b01 	ldrb.w	r4, [r1], #1
 80039c0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80039c4:	e7f7      	b.n	80039b6 <memcpy+0x6>

080039c6 <_Balloc>:
 80039c6:	b570      	push	{r4, r5, r6, lr}
 80039c8:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80039ca:	4604      	mov	r4, r0
 80039cc:	460e      	mov	r6, r1
 80039ce:	b93d      	cbnz	r5, 80039e0 <_Balloc+0x1a>
 80039d0:	2010      	movs	r0, #16
 80039d2:	f7ff ffd7 	bl	8003984 <malloc>
 80039d6:	6260      	str	r0, [r4, #36]	; 0x24
 80039d8:	6045      	str	r5, [r0, #4]
 80039da:	6085      	str	r5, [r0, #8]
 80039dc:	6005      	str	r5, [r0, #0]
 80039de:	60c5      	str	r5, [r0, #12]
 80039e0:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80039e2:	68eb      	ldr	r3, [r5, #12]
 80039e4:	b183      	cbz	r3, 8003a08 <_Balloc+0x42>
 80039e6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80039e8:	68db      	ldr	r3, [r3, #12]
 80039ea:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80039ee:	b9b8      	cbnz	r0, 8003a20 <_Balloc+0x5a>
 80039f0:	2101      	movs	r1, #1
 80039f2:	fa01 f506 	lsl.w	r5, r1, r6
 80039f6:	1d6a      	adds	r2, r5, #5
 80039f8:	0092      	lsls	r2, r2, #2
 80039fa:	4620      	mov	r0, r4
 80039fc:	f000 fab3 	bl	8003f66 <_calloc_r>
 8003a00:	b160      	cbz	r0, 8003a1c <_Balloc+0x56>
 8003a02:	6046      	str	r6, [r0, #4]
 8003a04:	6085      	str	r5, [r0, #8]
 8003a06:	e00e      	b.n	8003a26 <_Balloc+0x60>
 8003a08:	2221      	movs	r2, #33	; 0x21
 8003a0a:	2104      	movs	r1, #4
 8003a0c:	4620      	mov	r0, r4
 8003a0e:	f000 faaa 	bl	8003f66 <_calloc_r>
 8003a12:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003a14:	60e8      	str	r0, [r5, #12]
 8003a16:	68db      	ldr	r3, [r3, #12]
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d1e4      	bne.n	80039e6 <_Balloc+0x20>
 8003a1c:	2000      	movs	r0, #0
 8003a1e:	bd70      	pop	{r4, r5, r6, pc}
 8003a20:	6802      	ldr	r2, [r0, #0]
 8003a22:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8003a26:	2300      	movs	r3, #0
 8003a28:	6103      	str	r3, [r0, #16]
 8003a2a:	60c3      	str	r3, [r0, #12]
 8003a2c:	bd70      	pop	{r4, r5, r6, pc}

08003a2e <_Bfree>:
 8003a2e:	b570      	push	{r4, r5, r6, lr}
 8003a30:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8003a32:	4606      	mov	r6, r0
 8003a34:	460d      	mov	r5, r1
 8003a36:	b93c      	cbnz	r4, 8003a48 <_Bfree+0x1a>
 8003a38:	2010      	movs	r0, #16
 8003a3a:	f7ff ffa3 	bl	8003984 <malloc>
 8003a3e:	6270      	str	r0, [r6, #36]	; 0x24
 8003a40:	6044      	str	r4, [r0, #4]
 8003a42:	6084      	str	r4, [r0, #8]
 8003a44:	6004      	str	r4, [r0, #0]
 8003a46:	60c4      	str	r4, [r0, #12]
 8003a48:	b13d      	cbz	r5, 8003a5a <_Bfree+0x2c>
 8003a4a:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8003a4c:	686a      	ldr	r2, [r5, #4]
 8003a4e:	68db      	ldr	r3, [r3, #12]
 8003a50:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003a54:	6029      	str	r1, [r5, #0]
 8003a56:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8003a5a:	bd70      	pop	{r4, r5, r6, pc}

08003a5c <__multadd>:
 8003a5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003a60:	461f      	mov	r7, r3
 8003a62:	4606      	mov	r6, r0
 8003a64:	460c      	mov	r4, r1
 8003a66:	2300      	movs	r3, #0
 8003a68:	690d      	ldr	r5, [r1, #16]
 8003a6a:	f101 0e14 	add.w	lr, r1, #20
 8003a6e:	f8de 0000 	ldr.w	r0, [lr]
 8003a72:	3301      	adds	r3, #1
 8003a74:	b281      	uxth	r1, r0
 8003a76:	fb02 7101 	mla	r1, r2, r1, r7
 8003a7a:	0c00      	lsrs	r0, r0, #16
 8003a7c:	0c0f      	lsrs	r7, r1, #16
 8003a7e:	fb02 7000 	mla	r0, r2, r0, r7
 8003a82:	b289      	uxth	r1, r1
 8003a84:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8003a88:	429d      	cmp	r5, r3
 8003a8a:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8003a8e:	f84e 1b04 	str.w	r1, [lr], #4
 8003a92:	dcec      	bgt.n	8003a6e <__multadd+0x12>
 8003a94:	b1d7      	cbz	r7, 8003acc <__multadd+0x70>
 8003a96:	68a3      	ldr	r3, [r4, #8]
 8003a98:	429d      	cmp	r5, r3
 8003a9a:	db12      	blt.n	8003ac2 <__multadd+0x66>
 8003a9c:	6861      	ldr	r1, [r4, #4]
 8003a9e:	4630      	mov	r0, r6
 8003aa0:	3101      	adds	r1, #1
 8003aa2:	f7ff ff90 	bl	80039c6 <_Balloc>
 8003aa6:	4680      	mov	r8, r0
 8003aa8:	6922      	ldr	r2, [r4, #16]
 8003aaa:	f104 010c 	add.w	r1, r4, #12
 8003aae:	3202      	adds	r2, #2
 8003ab0:	0092      	lsls	r2, r2, #2
 8003ab2:	300c      	adds	r0, #12
 8003ab4:	f7ff ff7c 	bl	80039b0 <memcpy>
 8003ab8:	4621      	mov	r1, r4
 8003aba:	4630      	mov	r0, r6
 8003abc:	f7ff ffb7 	bl	8003a2e <_Bfree>
 8003ac0:	4644      	mov	r4, r8
 8003ac2:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8003ac6:	3501      	adds	r5, #1
 8003ac8:	615f      	str	r7, [r3, #20]
 8003aca:	6125      	str	r5, [r4, #16]
 8003acc:	4620      	mov	r0, r4
 8003ace:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08003ad2 <__hi0bits>:
 8003ad2:	0c02      	lsrs	r2, r0, #16
 8003ad4:	0412      	lsls	r2, r2, #16
 8003ad6:	4603      	mov	r3, r0
 8003ad8:	b9b2      	cbnz	r2, 8003b08 <__hi0bits+0x36>
 8003ada:	0403      	lsls	r3, r0, #16
 8003adc:	2010      	movs	r0, #16
 8003ade:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8003ae2:	bf04      	itt	eq
 8003ae4:	021b      	lsleq	r3, r3, #8
 8003ae6:	3008      	addeq	r0, #8
 8003ae8:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8003aec:	bf04      	itt	eq
 8003aee:	011b      	lsleq	r3, r3, #4
 8003af0:	3004      	addeq	r0, #4
 8003af2:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8003af6:	bf04      	itt	eq
 8003af8:	009b      	lsleq	r3, r3, #2
 8003afa:	3002      	addeq	r0, #2
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	db06      	blt.n	8003b0e <__hi0bits+0x3c>
 8003b00:	005b      	lsls	r3, r3, #1
 8003b02:	d503      	bpl.n	8003b0c <__hi0bits+0x3a>
 8003b04:	3001      	adds	r0, #1
 8003b06:	4770      	bx	lr
 8003b08:	2000      	movs	r0, #0
 8003b0a:	e7e8      	b.n	8003ade <__hi0bits+0xc>
 8003b0c:	2020      	movs	r0, #32
 8003b0e:	4770      	bx	lr

08003b10 <__lo0bits>:
 8003b10:	6803      	ldr	r3, [r0, #0]
 8003b12:	4601      	mov	r1, r0
 8003b14:	f013 0207 	ands.w	r2, r3, #7
 8003b18:	d00b      	beq.n	8003b32 <__lo0bits+0x22>
 8003b1a:	07da      	lsls	r2, r3, #31
 8003b1c:	d423      	bmi.n	8003b66 <__lo0bits+0x56>
 8003b1e:	0798      	lsls	r0, r3, #30
 8003b20:	bf49      	itett	mi
 8003b22:	085b      	lsrmi	r3, r3, #1
 8003b24:	089b      	lsrpl	r3, r3, #2
 8003b26:	2001      	movmi	r0, #1
 8003b28:	600b      	strmi	r3, [r1, #0]
 8003b2a:	bf5c      	itt	pl
 8003b2c:	600b      	strpl	r3, [r1, #0]
 8003b2e:	2002      	movpl	r0, #2
 8003b30:	4770      	bx	lr
 8003b32:	b298      	uxth	r0, r3
 8003b34:	b9a8      	cbnz	r0, 8003b62 <__lo0bits+0x52>
 8003b36:	2010      	movs	r0, #16
 8003b38:	0c1b      	lsrs	r3, r3, #16
 8003b3a:	f013 0fff 	tst.w	r3, #255	; 0xff
 8003b3e:	bf04      	itt	eq
 8003b40:	0a1b      	lsreq	r3, r3, #8
 8003b42:	3008      	addeq	r0, #8
 8003b44:	071a      	lsls	r2, r3, #28
 8003b46:	bf04      	itt	eq
 8003b48:	091b      	lsreq	r3, r3, #4
 8003b4a:	3004      	addeq	r0, #4
 8003b4c:	079a      	lsls	r2, r3, #30
 8003b4e:	bf04      	itt	eq
 8003b50:	089b      	lsreq	r3, r3, #2
 8003b52:	3002      	addeq	r0, #2
 8003b54:	07da      	lsls	r2, r3, #31
 8003b56:	d402      	bmi.n	8003b5e <__lo0bits+0x4e>
 8003b58:	085b      	lsrs	r3, r3, #1
 8003b5a:	d006      	beq.n	8003b6a <__lo0bits+0x5a>
 8003b5c:	3001      	adds	r0, #1
 8003b5e:	600b      	str	r3, [r1, #0]
 8003b60:	4770      	bx	lr
 8003b62:	4610      	mov	r0, r2
 8003b64:	e7e9      	b.n	8003b3a <__lo0bits+0x2a>
 8003b66:	2000      	movs	r0, #0
 8003b68:	4770      	bx	lr
 8003b6a:	2020      	movs	r0, #32
 8003b6c:	4770      	bx	lr

08003b6e <__i2b>:
 8003b6e:	b510      	push	{r4, lr}
 8003b70:	460c      	mov	r4, r1
 8003b72:	2101      	movs	r1, #1
 8003b74:	f7ff ff27 	bl	80039c6 <_Balloc>
 8003b78:	2201      	movs	r2, #1
 8003b7a:	6144      	str	r4, [r0, #20]
 8003b7c:	6102      	str	r2, [r0, #16]
 8003b7e:	bd10      	pop	{r4, pc}

08003b80 <__multiply>:
 8003b80:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003b84:	4614      	mov	r4, r2
 8003b86:	690a      	ldr	r2, [r1, #16]
 8003b88:	6923      	ldr	r3, [r4, #16]
 8003b8a:	4689      	mov	r9, r1
 8003b8c:	429a      	cmp	r2, r3
 8003b8e:	bfbe      	ittt	lt
 8003b90:	460b      	movlt	r3, r1
 8003b92:	46a1      	movlt	r9, r4
 8003b94:	461c      	movlt	r4, r3
 8003b96:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8003b9a:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8003b9e:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8003ba2:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8003ba6:	eb07 060a 	add.w	r6, r7, sl
 8003baa:	429e      	cmp	r6, r3
 8003bac:	bfc8      	it	gt
 8003bae:	3101      	addgt	r1, #1
 8003bb0:	f7ff ff09 	bl	80039c6 <_Balloc>
 8003bb4:	f100 0514 	add.w	r5, r0, #20
 8003bb8:	462b      	mov	r3, r5
 8003bba:	2200      	movs	r2, #0
 8003bbc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8003bc0:	4543      	cmp	r3, r8
 8003bc2:	d316      	bcc.n	8003bf2 <__multiply+0x72>
 8003bc4:	f104 0214 	add.w	r2, r4, #20
 8003bc8:	f109 0114 	add.w	r1, r9, #20
 8003bcc:	eb02 038a 	add.w	r3, r2, sl, lsl #2
 8003bd0:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8003bd4:	9301      	str	r3, [sp, #4]
 8003bd6:	9c01      	ldr	r4, [sp, #4]
 8003bd8:	4613      	mov	r3, r2
 8003bda:	4294      	cmp	r4, r2
 8003bdc:	d80c      	bhi.n	8003bf8 <__multiply+0x78>
 8003bde:	2e00      	cmp	r6, #0
 8003be0:	dd03      	ble.n	8003bea <__multiply+0x6a>
 8003be2:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d054      	beq.n	8003c94 <__multiply+0x114>
 8003bea:	6106      	str	r6, [r0, #16]
 8003bec:	b003      	add	sp, #12
 8003bee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003bf2:	f843 2b04 	str.w	r2, [r3], #4
 8003bf6:	e7e3      	b.n	8003bc0 <__multiply+0x40>
 8003bf8:	f8b3 a000 	ldrh.w	sl, [r3]
 8003bfc:	3204      	adds	r2, #4
 8003bfe:	f1ba 0f00 	cmp.w	sl, #0
 8003c02:	d020      	beq.n	8003c46 <__multiply+0xc6>
 8003c04:	46ae      	mov	lr, r5
 8003c06:	4689      	mov	r9, r1
 8003c08:	f04f 0c00 	mov.w	ip, #0
 8003c0c:	f859 4b04 	ldr.w	r4, [r9], #4
 8003c10:	f8be b000 	ldrh.w	fp, [lr]
 8003c14:	b2a3      	uxth	r3, r4
 8003c16:	fb0a b303 	mla	r3, sl, r3, fp
 8003c1a:	ea4f 4b14 	mov.w	fp, r4, lsr #16
 8003c1e:	f8de 4000 	ldr.w	r4, [lr]
 8003c22:	4463      	add	r3, ip
 8003c24:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 8003c28:	fb0a c40b 	mla	r4, sl, fp, ip
 8003c2c:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8003c30:	b29b      	uxth	r3, r3
 8003c32:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8003c36:	454f      	cmp	r7, r9
 8003c38:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 8003c3c:	f84e 3b04 	str.w	r3, [lr], #4
 8003c40:	d8e4      	bhi.n	8003c0c <__multiply+0x8c>
 8003c42:	f8ce c000 	str.w	ip, [lr]
 8003c46:	f832 9c02 	ldrh.w	r9, [r2, #-2]
 8003c4a:	f1b9 0f00 	cmp.w	r9, #0
 8003c4e:	d01f      	beq.n	8003c90 <__multiply+0x110>
 8003c50:	46ae      	mov	lr, r5
 8003c52:	468c      	mov	ip, r1
 8003c54:	f04f 0a00 	mov.w	sl, #0
 8003c58:	682b      	ldr	r3, [r5, #0]
 8003c5a:	f8bc 4000 	ldrh.w	r4, [ip]
 8003c5e:	f8be b002 	ldrh.w	fp, [lr, #2]
 8003c62:	b29b      	uxth	r3, r3
 8003c64:	fb09 b404 	mla	r4, r9, r4, fp
 8003c68:	44a2      	add	sl, r4
 8003c6a:	ea43 430a 	orr.w	r3, r3, sl, lsl #16
 8003c6e:	f84e 3b04 	str.w	r3, [lr], #4
 8003c72:	f85c 3b04 	ldr.w	r3, [ip], #4
 8003c76:	f8be 4000 	ldrh.w	r4, [lr]
 8003c7a:	0c1b      	lsrs	r3, r3, #16
 8003c7c:	fb09 4303 	mla	r3, r9, r3, r4
 8003c80:	4567      	cmp	r7, ip
 8003c82:	eb03 431a 	add.w	r3, r3, sl, lsr #16
 8003c86:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8003c8a:	d8e6      	bhi.n	8003c5a <__multiply+0xda>
 8003c8c:	f8ce 3000 	str.w	r3, [lr]
 8003c90:	3504      	adds	r5, #4
 8003c92:	e7a0      	b.n	8003bd6 <__multiply+0x56>
 8003c94:	3e01      	subs	r6, #1
 8003c96:	e7a2      	b.n	8003bde <__multiply+0x5e>

08003c98 <__pow5mult>:
 8003c98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003c9c:	4615      	mov	r5, r2
 8003c9e:	f012 0203 	ands.w	r2, r2, #3
 8003ca2:	4606      	mov	r6, r0
 8003ca4:	460f      	mov	r7, r1
 8003ca6:	d007      	beq.n	8003cb8 <__pow5mult+0x20>
 8003ca8:	4c21      	ldr	r4, [pc, #132]	; (8003d30 <__pow5mult+0x98>)
 8003caa:	3a01      	subs	r2, #1
 8003cac:	2300      	movs	r3, #0
 8003cae:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8003cb2:	f7ff fed3 	bl	8003a5c <__multadd>
 8003cb6:	4607      	mov	r7, r0
 8003cb8:	10ad      	asrs	r5, r5, #2
 8003cba:	d035      	beq.n	8003d28 <__pow5mult+0x90>
 8003cbc:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8003cbe:	b93c      	cbnz	r4, 8003cd0 <__pow5mult+0x38>
 8003cc0:	2010      	movs	r0, #16
 8003cc2:	f7ff fe5f 	bl	8003984 <malloc>
 8003cc6:	6270      	str	r0, [r6, #36]	; 0x24
 8003cc8:	6044      	str	r4, [r0, #4]
 8003cca:	6084      	str	r4, [r0, #8]
 8003ccc:	6004      	str	r4, [r0, #0]
 8003cce:	60c4      	str	r4, [r0, #12]
 8003cd0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8003cd4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8003cd8:	b94c      	cbnz	r4, 8003cee <__pow5mult+0x56>
 8003cda:	f240 2171 	movw	r1, #625	; 0x271
 8003cde:	4630      	mov	r0, r6
 8003ce0:	f7ff ff45 	bl	8003b6e <__i2b>
 8003ce4:	2300      	movs	r3, #0
 8003ce6:	4604      	mov	r4, r0
 8003ce8:	f8c8 0008 	str.w	r0, [r8, #8]
 8003cec:	6003      	str	r3, [r0, #0]
 8003cee:	f04f 0800 	mov.w	r8, #0
 8003cf2:	07eb      	lsls	r3, r5, #31
 8003cf4:	d50a      	bpl.n	8003d0c <__pow5mult+0x74>
 8003cf6:	4639      	mov	r1, r7
 8003cf8:	4622      	mov	r2, r4
 8003cfa:	4630      	mov	r0, r6
 8003cfc:	f7ff ff40 	bl	8003b80 <__multiply>
 8003d00:	4681      	mov	r9, r0
 8003d02:	4639      	mov	r1, r7
 8003d04:	4630      	mov	r0, r6
 8003d06:	f7ff fe92 	bl	8003a2e <_Bfree>
 8003d0a:	464f      	mov	r7, r9
 8003d0c:	106d      	asrs	r5, r5, #1
 8003d0e:	d00b      	beq.n	8003d28 <__pow5mult+0x90>
 8003d10:	6820      	ldr	r0, [r4, #0]
 8003d12:	b938      	cbnz	r0, 8003d24 <__pow5mult+0x8c>
 8003d14:	4622      	mov	r2, r4
 8003d16:	4621      	mov	r1, r4
 8003d18:	4630      	mov	r0, r6
 8003d1a:	f7ff ff31 	bl	8003b80 <__multiply>
 8003d1e:	6020      	str	r0, [r4, #0]
 8003d20:	f8c0 8000 	str.w	r8, [r0]
 8003d24:	4604      	mov	r4, r0
 8003d26:	e7e4      	b.n	8003cf2 <__pow5mult+0x5a>
 8003d28:	4638      	mov	r0, r7
 8003d2a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003d2e:	bf00      	nop
 8003d30:	08004630 	.word	0x08004630

08003d34 <__lshift>:
 8003d34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003d38:	460c      	mov	r4, r1
 8003d3a:	4607      	mov	r7, r0
 8003d3c:	4616      	mov	r6, r2
 8003d3e:	6923      	ldr	r3, [r4, #16]
 8003d40:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8003d44:	eb0a 0903 	add.w	r9, sl, r3
 8003d48:	6849      	ldr	r1, [r1, #4]
 8003d4a:	68a3      	ldr	r3, [r4, #8]
 8003d4c:	f109 0501 	add.w	r5, r9, #1
 8003d50:	42ab      	cmp	r3, r5
 8003d52:	db31      	blt.n	8003db8 <__lshift+0x84>
 8003d54:	4638      	mov	r0, r7
 8003d56:	f7ff fe36 	bl	80039c6 <_Balloc>
 8003d5a:	2200      	movs	r2, #0
 8003d5c:	4680      	mov	r8, r0
 8003d5e:	4611      	mov	r1, r2
 8003d60:	f100 0314 	add.w	r3, r0, #20
 8003d64:	4552      	cmp	r2, sl
 8003d66:	db2a      	blt.n	8003dbe <__lshift+0x8a>
 8003d68:	6920      	ldr	r0, [r4, #16]
 8003d6a:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8003d6e:	f104 0114 	add.w	r1, r4, #20
 8003d72:	f016 021f 	ands.w	r2, r6, #31
 8003d76:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 8003d7a:	eb01 0e80 	add.w	lr, r1, r0, lsl #2
 8003d7e:	d022      	beq.n	8003dc6 <__lshift+0x92>
 8003d80:	2000      	movs	r0, #0
 8003d82:	f1c2 0c20 	rsb	ip, r2, #32
 8003d86:	680e      	ldr	r6, [r1, #0]
 8003d88:	4096      	lsls	r6, r2
 8003d8a:	4330      	orrs	r0, r6
 8003d8c:	f843 0b04 	str.w	r0, [r3], #4
 8003d90:	f851 0b04 	ldr.w	r0, [r1], #4
 8003d94:	458e      	cmp	lr, r1
 8003d96:	fa20 f00c 	lsr.w	r0, r0, ip
 8003d9a:	d8f4      	bhi.n	8003d86 <__lshift+0x52>
 8003d9c:	6018      	str	r0, [r3, #0]
 8003d9e:	b108      	cbz	r0, 8003da4 <__lshift+0x70>
 8003da0:	f109 0502 	add.w	r5, r9, #2
 8003da4:	3d01      	subs	r5, #1
 8003da6:	4638      	mov	r0, r7
 8003da8:	f8c8 5010 	str.w	r5, [r8, #16]
 8003dac:	4621      	mov	r1, r4
 8003dae:	f7ff fe3e 	bl	8003a2e <_Bfree>
 8003db2:	4640      	mov	r0, r8
 8003db4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003db8:	3101      	adds	r1, #1
 8003dba:	005b      	lsls	r3, r3, #1
 8003dbc:	e7c8      	b.n	8003d50 <__lshift+0x1c>
 8003dbe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8003dc2:	3201      	adds	r2, #1
 8003dc4:	e7ce      	b.n	8003d64 <__lshift+0x30>
 8003dc6:	3b04      	subs	r3, #4
 8003dc8:	f851 2b04 	ldr.w	r2, [r1], #4
 8003dcc:	458e      	cmp	lr, r1
 8003dce:	f843 2f04 	str.w	r2, [r3, #4]!
 8003dd2:	d8f9      	bhi.n	8003dc8 <__lshift+0x94>
 8003dd4:	e7e6      	b.n	8003da4 <__lshift+0x70>

08003dd6 <__mcmp>:
 8003dd6:	6903      	ldr	r3, [r0, #16]
 8003dd8:	690a      	ldr	r2, [r1, #16]
 8003dda:	b530      	push	{r4, r5, lr}
 8003ddc:	1a9b      	subs	r3, r3, r2
 8003dde:	d10c      	bne.n	8003dfa <__mcmp+0x24>
 8003de0:	0092      	lsls	r2, r2, #2
 8003de2:	3014      	adds	r0, #20
 8003de4:	3114      	adds	r1, #20
 8003de6:	1884      	adds	r4, r0, r2
 8003de8:	4411      	add	r1, r2
 8003dea:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8003dee:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8003df2:	4295      	cmp	r5, r2
 8003df4:	d003      	beq.n	8003dfe <__mcmp+0x28>
 8003df6:	d305      	bcc.n	8003e04 <__mcmp+0x2e>
 8003df8:	2301      	movs	r3, #1
 8003dfa:	4618      	mov	r0, r3
 8003dfc:	bd30      	pop	{r4, r5, pc}
 8003dfe:	42a0      	cmp	r0, r4
 8003e00:	d3f3      	bcc.n	8003dea <__mcmp+0x14>
 8003e02:	e7fa      	b.n	8003dfa <__mcmp+0x24>
 8003e04:	f04f 33ff 	mov.w	r3, #4294967295
 8003e08:	e7f7      	b.n	8003dfa <__mcmp+0x24>

08003e0a <__mdiff>:
 8003e0a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003e0e:	460d      	mov	r5, r1
 8003e10:	4607      	mov	r7, r0
 8003e12:	4611      	mov	r1, r2
 8003e14:	4628      	mov	r0, r5
 8003e16:	4614      	mov	r4, r2
 8003e18:	f7ff ffdd 	bl	8003dd6 <__mcmp>
 8003e1c:	1e06      	subs	r6, r0, #0
 8003e1e:	d108      	bne.n	8003e32 <__mdiff+0x28>
 8003e20:	4631      	mov	r1, r6
 8003e22:	4638      	mov	r0, r7
 8003e24:	f7ff fdcf 	bl	80039c6 <_Balloc>
 8003e28:	2301      	movs	r3, #1
 8003e2a:	6146      	str	r6, [r0, #20]
 8003e2c:	6103      	str	r3, [r0, #16]
 8003e2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003e32:	bfa4      	itt	ge
 8003e34:	4623      	movge	r3, r4
 8003e36:	462c      	movge	r4, r5
 8003e38:	4638      	mov	r0, r7
 8003e3a:	6861      	ldr	r1, [r4, #4]
 8003e3c:	bfa6      	itte	ge
 8003e3e:	461d      	movge	r5, r3
 8003e40:	2600      	movge	r6, #0
 8003e42:	2601      	movlt	r6, #1
 8003e44:	f7ff fdbf 	bl	80039c6 <_Balloc>
 8003e48:	f04f 0c00 	mov.w	ip, #0
 8003e4c:	60c6      	str	r6, [r0, #12]
 8003e4e:	692b      	ldr	r3, [r5, #16]
 8003e50:	6926      	ldr	r6, [r4, #16]
 8003e52:	f104 0214 	add.w	r2, r4, #20
 8003e56:	f105 0914 	add.w	r9, r5, #20
 8003e5a:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8003e5e:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8003e62:	f100 0114 	add.w	r1, r0, #20
 8003e66:	f852 ab04 	ldr.w	sl, [r2], #4
 8003e6a:	f859 5b04 	ldr.w	r5, [r9], #4
 8003e6e:	fa1f f38a 	uxth.w	r3, sl
 8003e72:	4463      	add	r3, ip
 8003e74:	b2ac      	uxth	r4, r5
 8003e76:	1b1b      	subs	r3, r3, r4
 8003e78:	0c2c      	lsrs	r4, r5, #16
 8003e7a:	ebc4 441a 	rsb	r4, r4, sl, lsr #16
 8003e7e:	eb04 4423 	add.w	r4, r4, r3, asr #16
 8003e82:	b29b      	uxth	r3, r3
 8003e84:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8003e88:	45c8      	cmp	r8, r9
 8003e8a:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8003e8e:	4696      	mov	lr, r2
 8003e90:	f841 4b04 	str.w	r4, [r1], #4
 8003e94:	d8e7      	bhi.n	8003e66 <__mdiff+0x5c>
 8003e96:	45be      	cmp	lr, r7
 8003e98:	d305      	bcc.n	8003ea6 <__mdiff+0x9c>
 8003e9a:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8003e9e:	b18b      	cbz	r3, 8003ec4 <__mdiff+0xba>
 8003ea0:	6106      	str	r6, [r0, #16]
 8003ea2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003ea6:	f85e 4b04 	ldr.w	r4, [lr], #4
 8003eaa:	b2a2      	uxth	r2, r4
 8003eac:	4462      	add	r2, ip
 8003eae:	1413      	asrs	r3, r2, #16
 8003eb0:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8003eb4:	b292      	uxth	r2, r2
 8003eb6:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8003eba:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8003ebe:	f841 2b04 	str.w	r2, [r1], #4
 8003ec2:	e7e8      	b.n	8003e96 <__mdiff+0x8c>
 8003ec4:	3e01      	subs	r6, #1
 8003ec6:	e7e8      	b.n	8003e9a <__mdiff+0x90>

08003ec8 <__d2b>:
 8003ec8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8003ecc:	461c      	mov	r4, r3
 8003ece:	2101      	movs	r1, #1
 8003ed0:	4690      	mov	r8, r2
 8003ed2:	9e08      	ldr	r6, [sp, #32]
 8003ed4:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8003ed6:	f7ff fd76 	bl	80039c6 <_Balloc>
 8003eda:	f3c4 0213 	ubfx	r2, r4, #0, #20
 8003ede:	f3c4 540a 	ubfx	r4, r4, #20, #11
 8003ee2:	4607      	mov	r7, r0
 8003ee4:	bb34      	cbnz	r4, 8003f34 <__d2b+0x6c>
 8003ee6:	9201      	str	r2, [sp, #4]
 8003ee8:	f1b8 0f00 	cmp.w	r8, #0
 8003eec:	d027      	beq.n	8003f3e <__d2b+0x76>
 8003eee:	a802      	add	r0, sp, #8
 8003ef0:	f840 8d08 	str.w	r8, [r0, #-8]!
 8003ef4:	f7ff fe0c 	bl	8003b10 <__lo0bits>
 8003ef8:	9900      	ldr	r1, [sp, #0]
 8003efa:	b1f0      	cbz	r0, 8003f3a <__d2b+0x72>
 8003efc:	9a01      	ldr	r2, [sp, #4]
 8003efe:	f1c0 0320 	rsb	r3, r0, #32
 8003f02:	fa02 f303 	lsl.w	r3, r2, r3
 8003f06:	430b      	orrs	r3, r1
 8003f08:	40c2      	lsrs	r2, r0
 8003f0a:	617b      	str	r3, [r7, #20]
 8003f0c:	9201      	str	r2, [sp, #4]
 8003f0e:	9b01      	ldr	r3, [sp, #4]
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	bf14      	ite	ne
 8003f14:	2102      	movne	r1, #2
 8003f16:	2101      	moveq	r1, #1
 8003f18:	61bb      	str	r3, [r7, #24]
 8003f1a:	6139      	str	r1, [r7, #16]
 8003f1c:	b1c4      	cbz	r4, 8003f50 <__d2b+0x88>
 8003f1e:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8003f22:	4404      	add	r4, r0
 8003f24:	6034      	str	r4, [r6, #0]
 8003f26:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8003f2a:	6028      	str	r0, [r5, #0]
 8003f2c:	4638      	mov	r0, r7
 8003f2e:	b002      	add	sp, #8
 8003f30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003f34:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8003f38:	e7d5      	b.n	8003ee6 <__d2b+0x1e>
 8003f3a:	6179      	str	r1, [r7, #20]
 8003f3c:	e7e7      	b.n	8003f0e <__d2b+0x46>
 8003f3e:	a801      	add	r0, sp, #4
 8003f40:	f7ff fde6 	bl	8003b10 <__lo0bits>
 8003f44:	2101      	movs	r1, #1
 8003f46:	9b01      	ldr	r3, [sp, #4]
 8003f48:	6139      	str	r1, [r7, #16]
 8003f4a:	617b      	str	r3, [r7, #20]
 8003f4c:	3020      	adds	r0, #32
 8003f4e:	e7e5      	b.n	8003f1c <__d2b+0x54>
 8003f50:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8003f54:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8003f58:	6030      	str	r0, [r6, #0]
 8003f5a:	6918      	ldr	r0, [r3, #16]
 8003f5c:	f7ff fdb9 	bl	8003ad2 <__hi0bits>
 8003f60:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8003f64:	e7e1      	b.n	8003f2a <__d2b+0x62>

08003f66 <_calloc_r>:
 8003f66:	b538      	push	{r3, r4, r5, lr}
 8003f68:	fb02 f401 	mul.w	r4, r2, r1
 8003f6c:	4621      	mov	r1, r4
 8003f6e:	f000 f855 	bl	800401c <_malloc_r>
 8003f72:	4605      	mov	r5, r0
 8003f74:	b118      	cbz	r0, 8003f7e <_calloc_r+0x18>
 8003f76:	4622      	mov	r2, r4
 8003f78:	2100      	movs	r1, #0
 8003f7a:	f000 fa39 	bl	80043f0 <memset>
 8003f7e:	4628      	mov	r0, r5
 8003f80:	bd38      	pop	{r3, r4, r5, pc}
	...

08003f84 <_free_r>:
 8003f84:	b538      	push	{r3, r4, r5, lr}
 8003f86:	4605      	mov	r5, r0
 8003f88:	2900      	cmp	r1, #0
 8003f8a:	d043      	beq.n	8004014 <_free_r+0x90>
 8003f8c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003f90:	1f0c      	subs	r4, r1, #4
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	bfb8      	it	lt
 8003f96:	18e4      	addlt	r4, r4, r3
 8003f98:	f000 fa32 	bl	8004400 <__malloc_lock>
 8003f9c:	4a1e      	ldr	r2, [pc, #120]	; (8004018 <_free_r+0x94>)
 8003f9e:	6813      	ldr	r3, [r2, #0]
 8003fa0:	4610      	mov	r0, r2
 8003fa2:	b933      	cbnz	r3, 8003fb2 <_free_r+0x2e>
 8003fa4:	6063      	str	r3, [r4, #4]
 8003fa6:	6014      	str	r4, [r2, #0]
 8003fa8:	4628      	mov	r0, r5
 8003faa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003fae:	f000 ba28 	b.w	8004402 <__malloc_unlock>
 8003fb2:	42a3      	cmp	r3, r4
 8003fb4:	d90b      	bls.n	8003fce <_free_r+0x4a>
 8003fb6:	6821      	ldr	r1, [r4, #0]
 8003fb8:	1862      	adds	r2, r4, r1
 8003fba:	4293      	cmp	r3, r2
 8003fbc:	bf01      	itttt	eq
 8003fbe:	681a      	ldreq	r2, [r3, #0]
 8003fc0:	685b      	ldreq	r3, [r3, #4]
 8003fc2:	1852      	addeq	r2, r2, r1
 8003fc4:	6022      	streq	r2, [r4, #0]
 8003fc6:	6063      	str	r3, [r4, #4]
 8003fc8:	6004      	str	r4, [r0, #0]
 8003fca:	e7ed      	b.n	8003fa8 <_free_r+0x24>
 8003fcc:	4613      	mov	r3, r2
 8003fce:	685a      	ldr	r2, [r3, #4]
 8003fd0:	b10a      	cbz	r2, 8003fd6 <_free_r+0x52>
 8003fd2:	42a2      	cmp	r2, r4
 8003fd4:	d9fa      	bls.n	8003fcc <_free_r+0x48>
 8003fd6:	6819      	ldr	r1, [r3, #0]
 8003fd8:	1858      	adds	r0, r3, r1
 8003fda:	42a0      	cmp	r0, r4
 8003fdc:	d10b      	bne.n	8003ff6 <_free_r+0x72>
 8003fde:	6820      	ldr	r0, [r4, #0]
 8003fe0:	4401      	add	r1, r0
 8003fe2:	1858      	adds	r0, r3, r1
 8003fe4:	4282      	cmp	r2, r0
 8003fe6:	6019      	str	r1, [r3, #0]
 8003fe8:	d1de      	bne.n	8003fa8 <_free_r+0x24>
 8003fea:	6810      	ldr	r0, [r2, #0]
 8003fec:	6852      	ldr	r2, [r2, #4]
 8003fee:	4401      	add	r1, r0
 8003ff0:	6019      	str	r1, [r3, #0]
 8003ff2:	605a      	str	r2, [r3, #4]
 8003ff4:	e7d8      	b.n	8003fa8 <_free_r+0x24>
 8003ff6:	d902      	bls.n	8003ffe <_free_r+0x7a>
 8003ff8:	230c      	movs	r3, #12
 8003ffa:	602b      	str	r3, [r5, #0]
 8003ffc:	e7d4      	b.n	8003fa8 <_free_r+0x24>
 8003ffe:	6820      	ldr	r0, [r4, #0]
 8004000:	1821      	adds	r1, r4, r0
 8004002:	428a      	cmp	r2, r1
 8004004:	bf01      	itttt	eq
 8004006:	6811      	ldreq	r1, [r2, #0]
 8004008:	6852      	ldreq	r2, [r2, #4]
 800400a:	1809      	addeq	r1, r1, r0
 800400c:	6021      	streq	r1, [r4, #0]
 800400e:	6062      	str	r2, [r4, #4]
 8004010:	605c      	str	r4, [r3, #4]
 8004012:	e7c9      	b.n	8003fa8 <_free_r+0x24>
 8004014:	bd38      	pop	{r3, r4, r5, pc}
 8004016:	bf00      	nop
 8004018:	200001f4 	.word	0x200001f4

0800401c <_malloc_r>:
 800401c:	b570      	push	{r4, r5, r6, lr}
 800401e:	1ccd      	adds	r5, r1, #3
 8004020:	f025 0503 	bic.w	r5, r5, #3
 8004024:	3508      	adds	r5, #8
 8004026:	2d0c      	cmp	r5, #12
 8004028:	bf38      	it	cc
 800402a:	250c      	movcc	r5, #12
 800402c:	2d00      	cmp	r5, #0
 800402e:	4606      	mov	r6, r0
 8004030:	db01      	blt.n	8004036 <_malloc_r+0x1a>
 8004032:	42a9      	cmp	r1, r5
 8004034:	d903      	bls.n	800403e <_malloc_r+0x22>
 8004036:	230c      	movs	r3, #12
 8004038:	6033      	str	r3, [r6, #0]
 800403a:	2000      	movs	r0, #0
 800403c:	bd70      	pop	{r4, r5, r6, pc}
 800403e:	f000 f9df 	bl	8004400 <__malloc_lock>
 8004042:	4a23      	ldr	r2, [pc, #140]	; (80040d0 <_malloc_r+0xb4>)
 8004044:	6814      	ldr	r4, [r2, #0]
 8004046:	4621      	mov	r1, r4
 8004048:	b991      	cbnz	r1, 8004070 <_malloc_r+0x54>
 800404a:	4c22      	ldr	r4, [pc, #136]	; (80040d4 <_malloc_r+0xb8>)
 800404c:	6823      	ldr	r3, [r4, #0]
 800404e:	b91b      	cbnz	r3, 8004058 <_malloc_r+0x3c>
 8004050:	4630      	mov	r0, r6
 8004052:	f000 f991 	bl	8004378 <_sbrk_r>
 8004056:	6020      	str	r0, [r4, #0]
 8004058:	4629      	mov	r1, r5
 800405a:	4630      	mov	r0, r6
 800405c:	f000 f98c 	bl	8004378 <_sbrk_r>
 8004060:	1c43      	adds	r3, r0, #1
 8004062:	d126      	bne.n	80040b2 <_malloc_r+0x96>
 8004064:	230c      	movs	r3, #12
 8004066:	4630      	mov	r0, r6
 8004068:	6033      	str	r3, [r6, #0]
 800406a:	f000 f9ca 	bl	8004402 <__malloc_unlock>
 800406e:	e7e4      	b.n	800403a <_malloc_r+0x1e>
 8004070:	680b      	ldr	r3, [r1, #0]
 8004072:	1b5b      	subs	r3, r3, r5
 8004074:	d41a      	bmi.n	80040ac <_malloc_r+0x90>
 8004076:	2b0b      	cmp	r3, #11
 8004078:	d90f      	bls.n	800409a <_malloc_r+0x7e>
 800407a:	600b      	str	r3, [r1, #0]
 800407c:	18cc      	adds	r4, r1, r3
 800407e:	50cd      	str	r5, [r1, r3]
 8004080:	4630      	mov	r0, r6
 8004082:	f000 f9be 	bl	8004402 <__malloc_unlock>
 8004086:	f104 000b 	add.w	r0, r4, #11
 800408a:	1d23      	adds	r3, r4, #4
 800408c:	f020 0007 	bic.w	r0, r0, #7
 8004090:	1ac3      	subs	r3, r0, r3
 8004092:	d01b      	beq.n	80040cc <_malloc_r+0xb0>
 8004094:	425a      	negs	r2, r3
 8004096:	50e2      	str	r2, [r4, r3]
 8004098:	bd70      	pop	{r4, r5, r6, pc}
 800409a:	428c      	cmp	r4, r1
 800409c:	bf0b      	itete	eq
 800409e:	6863      	ldreq	r3, [r4, #4]
 80040a0:	684b      	ldrne	r3, [r1, #4]
 80040a2:	6013      	streq	r3, [r2, #0]
 80040a4:	6063      	strne	r3, [r4, #4]
 80040a6:	bf18      	it	ne
 80040a8:	460c      	movne	r4, r1
 80040aa:	e7e9      	b.n	8004080 <_malloc_r+0x64>
 80040ac:	460c      	mov	r4, r1
 80040ae:	6849      	ldr	r1, [r1, #4]
 80040b0:	e7ca      	b.n	8004048 <_malloc_r+0x2c>
 80040b2:	1cc4      	adds	r4, r0, #3
 80040b4:	f024 0403 	bic.w	r4, r4, #3
 80040b8:	42a0      	cmp	r0, r4
 80040ba:	d005      	beq.n	80040c8 <_malloc_r+0xac>
 80040bc:	1a21      	subs	r1, r4, r0
 80040be:	4630      	mov	r0, r6
 80040c0:	f000 f95a 	bl	8004378 <_sbrk_r>
 80040c4:	3001      	adds	r0, #1
 80040c6:	d0cd      	beq.n	8004064 <_malloc_r+0x48>
 80040c8:	6025      	str	r5, [r4, #0]
 80040ca:	e7d9      	b.n	8004080 <_malloc_r+0x64>
 80040cc:	bd70      	pop	{r4, r5, r6, pc}
 80040ce:	bf00      	nop
 80040d0:	200001f4 	.word	0x200001f4
 80040d4:	200001f8 	.word	0x200001f8

080040d8 <__ssputs_r>:
 80040d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80040dc:	688e      	ldr	r6, [r1, #8]
 80040de:	4682      	mov	sl, r0
 80040e0:	429e      	cmp	r6, r3
 80040e2:	460c      	mov	r4, r1
 80040e4:	4691      	mov	r9, r2
 80040e6:	4698      	mov	r8, r3
 80040e8:	d835      	bhi.n	8004156 <__ssputs_r+0x7e>
 80040ea:	898a      	ldrh	r2, [r1, #12]
 80040ec:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80040f0:	d031      	beq.n	8004156 <__ssputs_r+0x7e>
 80040f2:	2302      	movs	r3, #2
 80040f4:	6825      	ldr	r5, [r4, #0]
 80040f6:	6909      	ldr	r1, [r1, #16]
 80040f8:	1a6f      	subs	r7, r5, r1
 80040fa:	6965      	ldr	r5, [r4, #20]
 80040fc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004100:	fb95 f5f3 	sdiv	r5, r5, r3
 8004104:	f108 0301 	add.w	r3, r8, #1
 8004108:	443b      	add	r3, r7
 800410a:	429d      	cmp	r5, r3
 800410c:	bf38      	it	cc
 800410e:	461d      	movcc	r5, r3
 8004110:	0553      	lsls	r3, r2, #21
 8004112:	d531      	bpl.n	8004178 <__ssputs_r+0xa0>
 8004114:	4629      	mov	r1, r5
 8004116:	f7ff ff81 	bl	800401c <_malloc_r>
 800411a:	4606      	mov	r6, r0
 800411c:	b950      	cbnz	r0, 8004134 <__ssputs_r+0x5c>
 800411e:	230c      	movs	r3, #12
 8004120:	f8ca 3000 	str.w	r3, [sl]
 8004124:	89a3      	ldrh	r3, [r4, #12]
 8004126:	f04f 30ff 	mov.w	r0, #4294967295
 800412a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800412e:	81a3      	strh	r3, [r4, #12]
 8004130:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004134:	463a      	mov	r2, r7
 8004136:	6921      	ldr	r1, [r4, #16]
 8004138:	f7ff fc3a 	bl	80039b0 <memcpy>
 800413c:	89a3      	ldrh	r3, [r4, #12]
 800413e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004142:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004146:	81a3      	strh	r3, [r4, #12]
 8004148:	6126      	str	r6, [r4, #16]
 800414a:	443e      	add	r6, r7
 800414c:	6026      	str	r6, [r4, #0]
 800414e:	4646      	mov	r6, r8
 8004150:	6165      	str	r5, [r4, #20]
 8004152:	1bed      	subs	r5, r5, r7
 8004154:	60a5      	str	r5, [r4, #8]
 8004156:	4546      	cmp	r6, r8
 8004158:	bf28      	it	cs
 800415a:	4646      	movcs	r6, r8
 800415c:	4649      	mov	r1, r9
 800415e:	4632      	mov	r2, r6
 8004160:	6820      	ldr	r0, [r4, #0]
 8004162:	f000 f92b 	bl	80043bc <memmove>
 8004166:	68a3      	ldr	r3, [r4, #8]
 8004168:	2000      	movs	r0, #0
 800416a:	1b9b      	subs	r3, r3, r6
 800416c:	60a3      	str	r3, [r4, #8]
 800416e:	6823      	ldr	r3, [r4, #0]
 8004170:	441e      	add	r6, r3
 8004172:	6026      	str	r6, [r4, #0]
 8004174:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004178:	462a      	mov	r2, r5
 800417a:	f000 f943 	bl	8004404 <_realloc_r>
 800417e:	4606      	mov	r6, r0
 8004180:	2800      	cmp	r0, #0
 8004182:	d1e1      	bne.n	8004148 <__ssputs_r+0x70>
 8004184:	6921      	ldr	r1, [r4, #16]
 8004186:	4650      	mov	r0, sl
 8004188:	f7ff fefc 	bl	8003f84 <_free_r>
 800418c:	e7c7      	b.n	800411e <__ssputs_r+0x46>
	...

08004190 <_svfiprintf_r>:
 8004190:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004194:	b09d      	sub	sp, #116	; 0x74
 8004196:	9303      	str	r3, [sp, #12]
 8004198:	898b      	ldrh	r3, [r1, #12]
 800419a:	4680      	mov	r8, r0
 800419c:	061c      	lsls	r4, r3, #24
 800419e:	460d      	mov	r5, r1
 80041a0:	4616      	mov	r6, r2
 80041a2:	d50f      	bpl.n	80041c4 <_svfiprintf_r+0x34>
 80041a4:	690b      	ldr	r3, [r1, #16]
 80041a6:	b96b      	cbnz	r3, 80041c4 <_svfiprintf_r+0x34>
 80041a8:	2140      	movs	r1, #64	; 0x40
 80041aa:	f7ff ff37 	bl	800401c <_malloc_r>
 80041ae:	6028      	str	r0, [r5, #0]
 80041b0:	6128      	str	r0, [r5, #16]
 80041b2:	b928      	cbnz	r0, 80041c0 <_svfiprintf_r+0x30>
 80041b4:	230c      	movs	r3, #12
 80041b6:	f8c8 3000 	str.w	r3, [r8]
 80041ba:	f04f 30ff 	mov.w	r0, #4294967295
 80041be:	e0c4      	b.n	800434a <_svfiprintf_r+0x1ba>
 80041c0:	2340      	movs	r3, #64	; 0x40
 80041c2:	616b      	str	r3, [r5, #20]
 80041c4:	2300      	movs	r3, #0
 80041c6:	9309      	str	r3, [sp, #36]	; 0x24
 80041c8:	2320      	movs	r3, #32
 80041ca:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80041ce:	2330      	movs	r3, #48	; 0x30
 80041d0:	f04f 0b01 	mov.w	fp, #1
 80041d4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80041d8:	4637      	mov	r7, r6
 80041da:	463c      	mov	r4, r7
 80041dc:	f814 3b01 	ldrb.w	r3, [r4], #1
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d13c      	bne.n	800425e <_svfiprintf_r+0xce>
 80041e4:	ebb7 0a06 	subs.w	sl, r7, r6
 80041e8:	d00b      	beq.n	8004202 <_svfiprintf_r+0x72>
 80041ea:	4653      	mov	r3, sl
 80041ec:	4632      	mov	r2, r6
 80041ee:	4629      	mov	r1, r5
 80041f0:	4640      	mov	r0, r8
 80041f2:	f7ff ff71 	bl	80040d8 <__ssputs_r>
 80041f6:	3001      	adds	r0, #1
 80041f8:	f000 80a2 	beq.w	8004340 <_svfiprintf_r+0x1b0>
 80041fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80041fe:	4453      	add	r3, sl
 8004200:	9309      	str	r3, [sp, #36]	; 0x24
 8004202:	783b      	ldrb	r3, [r7, #0]
 8004204:	2b00      	cmp	r3, #0
 8004206:	f000 809b 	beq.w	8004340 <_svfiprintf_r+0x1b0>
 800420a:	2300      	movs	r3, #0
 800420c:	f04f 32ff 	mov.w	r2, #4294967295
 8004210:	9304      	str	r3, [sp, #16]
 8004212:	9307      	str	r3, [sp, #28]
 8004214:	9205      	str	r2, [sp, #20]
 8004216:	9306      	str	r3, [sp, #24]
 8004218:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800421c:	931a      	str	r3, [sp, #104]	; 0x68
 800421e:	2205      	movs	r2, #5
 8004220:	7821      	ldrb	r1, [r4, #0]
 8004222:	4850      	ldr	r0, [pc, #320]	; (8004364 <_svfiprintf_r+0x1d4>)
 8004224:	f7ff fbb6 	bl	8003994 <memchr>
 8004228:	1c67      	adds	r7, r4, #1
 800422a:	9b04      	ldr	r3, [sp, #16]
 800422c:	b9d8      	cbnz	r0, 8004266 <_svfiprintf_r+0xd6>
 800422e:	06d9      	lsls	r1, r3, #27
 8004230:	bf44      	itt	mi
 8004232:	2220      	movmi	r2, #32
 8004234:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004238:	071a      	lsls	r2, r3, #28
 800423a:	bf44      	itt	mi
 800423c:	222b      	movmi	r2, #43	; 0x2b
 800423e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004242:	7822      	ldrb	r2, [r4, #0]
 8004244:	2a2a      	cmp	r2, #42	; 0x2a
 8004246:	d016      	beq.n	8004276 <_svfiprintf_r+0xe6>
 8004248:	2100      	movs	r1, #0
 800424a:	200a      	movs	r0, #10
 800424c:	9a07      	ldr	r2, [sp, #28]
 800424e:	4627      	mov	r7, r4
 8004250:	783b      	ldrb	r3, [r7, #0]
 8004252:	3401      	adds	r4, #1
 8004254:	3b30      	subs	r3, #48	; 0x30
 8004256:	2b09      	cmp	r3, #9
 8004258:	d950      	bls.n	80042fc <_svfiprintf_r+0x16c>
 800425a:	b1c9      	cbz	r1, 8004290 <_svfiprintf_r+0x100>
 800425c:	e011      	b.n	8004282 <_svfiprintf_r+0xf2>
 800425e:	2b25      	cmp	r3, #37	; 0x25
 8004260:	d0c0      	beq.n	80041e4 <_svfiprintf_r+0x54>
 8004262:	4627      	mov	r7, r4
 8004264:	e7b9      	b.n	80041da <_svfiprintf_r+0x4a>
 8004266:	4a3f      	ldr	r2, [pc, #252]	; (8004364 <_svfiprintf_r+0x1d4>)
 8004268:	463c      	mov	r4, r7
 800426a:	1a80      	subs	r0, r0, r2
 800426c:	fa0b f000 	lsl.w	r0, fp, r0
 8004270:	4318      	orrs	r0, r3
 8004272:	9004      	str	r0, [sp, #16]
 8004274:	e7d3      	b.n	800421e <_svfiprintf_r+0x8e>
 8004276:	9a03      	ldr	r2, [sp, #12]
 8004278:	1d11      	adds	r1, r2, #4
 800427a:	6812      	ldr	r2, [r2, #0]
 800427c:	9103      	str	r1, [sp, #12]
 800427e:	2a00      	cmp	r2, #0
 8004280:	db01      	blt.n	8004286 <_svfiprintf_r+0xf6>
 8004282:	9207      	str	r2, [sp, #28]
 8004284:	e004      	b.n	8004290 <_svfiprintf_r+0x100>
 8004286:	4252      	negs	r2, r2
 8004288:	f043 0302 	orr.w	r3, r3, #2
 800428c:	9207      	str	r2, [sp, #28]
 800428e:	9304      	str	r3, [sp, #16]
 8004290:	783b      	ldrb	r3, [r7, #0]
 8004292:	2b2e      	cmp	r3, #46	; 0x2e
 8004294:	d10d      	bne.n	80042b2 <_svfiprintf_r+0x122>
 8004296:	787b      	ldrb	r3, [r7, #1]
 8004298:	1c79      	adds	r1, r7, #1
 800429a:	2b2a      	cmp	r3, #42	; 0x2a
 800429c:	d132      	bne.n	8004304 <_svfiprintf_r+0x174>
 800429e:	9b03      	ldr	r3, [sp, #12]
 80042a0:	3702      	adds	r7, #2
 80042a2:	1d1a      	adds	r2, r3, #4
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	9203      	str	r2, [sp, #12]
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	bfb8      	it	lt
 80042ac:	f04f 33ff 	movlt.w	r3, #4294967295
 80042b0:	9305      	str	r3, [sp, #20]
 80042b2:	4c2d      	ldr	r4, [pc, #180]	; (8004368 <_svfiprintf_r+0x1d8>)
 80042b4:	2203      	movs	r2, #3
 80042b6:	7839      	ldrb	r1, [r7, #0]
 80042b8:	4620      	mov	r0, r4
 80042ba:	f7ff fb6b 	bl	8003994 <memchr>
 80042be:	b138      	cbz	r0, 80042d0 <_svfiprintf_r+0x140>
 80042c0:	2340      	movs	r3, #64	; 0x40
 80042c2:	1b00      	subs	r0, r0, r4
 80042c4:	fa03 f000 	lsl.w	r0, r3, r0
 80042c8:	9b04      	ldr	r3, [sp, #16]
 80042ca:	3701      	adds	r7, #1
 80042cc:	4303      	orrs	r3, r0
 80042ce:	9304      	str	r3, [sp, #16]
 80042d0:	7839      	ldrb	r1, [r7, #0]
 80042d2:	2206      	movs	r2, #6
 80042d4:	4825      	ldr	r0, [pc, #148]	; (800436c <_svfiprintf_r+0x1dc>)
 80042d6:	1c7e      	adds	r6, r7, #1
 80042d8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80042dc:	f7ff fb5a 	bl	8003994 <memchr>
 80042e0:	2800      	cmp	r0, #0
 80042e2:	d035      	beq.n	8004350 <_svfiprintf_r+0x1c0>
 80042e4:	4b22      	ldr	r3, [pc, #136]	; (8004370 <_svfiprintf_r+0x1e0>)
 80042e6:	b9fb      	cbnz	r3, 8004328 <_svfiprintf_r+0x198>
 80042e8:	9b03      	ldr	r3, [sp, #12]
 80042ea:	3307      	adds	r3, #7
 80042ec:	f023 0307 	bic.w	r3, r3, #7
 80042f0:	3308      	adds	r3, #8
 80042f2:	9303      	str	r3, [sp, #12]
 80042f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80042f6:	444b      	add	r3, r9
 80042f8:	9309      	str	r3, [sp, #36]	; 0x24
 80042fa:	e76d      	b.n	80041d8 <_svfiprintf_r+0x48>
 80042fc:	fb00 3202 	mla	r2, r0, r2, r3
 8004300:	2101      	movs	r1, #1
 8004302:	e7a4      	b.n	800424e <_svfiprintf_r+0xbe>
 8004304:	2300      	movs	r3, #0
 8004306:	240a      	movs	r4, #10
 8004308:	4618      	mov	r0, r3
 800430a:	9305      	str	r3, [sp, #20]
 800430c:	460f      	mov	r7, r1
 800430e:	783a      	ldrb	r2, [r7, #0]
 8004310:	3101      	adds	r1, #1
 8004312:	3a30      	subs	r2, #48	; 0x30
 8004314:	2a09      	cmp	r2, #9
 8004316:	d903      	bls.n	8004320 <_svfiprintf_r+0x190>
 8004318:	2b00      	cmp	r3, #0
 800431a:	d0ca      	beq.n	80042b2 <_svfiprintf_r+0x122>
 800431c:	9005      	str	r0, [sp, #20]
 800431e:	e7c8      	b.n	80042b2 <_svfiprintf_r+0x122>
 8004320:	fb04 2000 	mla	r0, r4, r0, r2
 8004324:	2301      	movs	r3, #1
 8004326:	e7f1      	b.n	800430c <_svfiprintf_r+0x17c>
 8004328:	ab03      	add	r3, sp, #12
 800432a:	9300      	str	r3, [sp, #0]
 800432c:	462a      	mov	r2, r5
 800432e:	4b11      	ldr	r3, [pc, #68]	; (8004374 <_svfiprintf_r+0x1e4>)
 8004330:	a904      	add	r1, sp, #16
 8004332:	4640      	mov	r0, r8
 8004334:	f7fe f8c4 	bl	80024c0 <_printf_float>
 8004338:	f1b0 3fff 	cmp.w	r0, #4294967295
 800433c:	4681      	mov	r9, r0
 800433e:	d1d9      	bne.n	80042f4 <_svfiprintf_r+0x164>
 8004340:	89ab      	ldrh	r3, [r5, #12]
 8004342:	065b      	lsls	r3, r3, #25
 8004344:	f53f af39 	bmi.w	80041ba <_svfiprintf_r+0x2a>
 8004348:	9809      	ldr	r0, [sp, #36]	; 0x24
 800434a:	b01d      	add	sp, #116	; 0x74
 800434c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004350:	ab03      	add	r3, sp, #12
 8004352:	9300      	str	r3, [sp, #0]
 8004354:	462a      	mov	r2, r5
 8004356:	4b07      	ldr	r3, [pc, #28]	; (8004374 <_svfiprintf_r+0x1e4>)
 8004358:	a904      	add	r1, sp, #16
 800435a:	4640      	mov	r0, r8
 800435c:	f7fe fb60 	bl	8002a20 <_printf_i>
 8004360:	e7ea      	b.n	8004338 <_svfiprintf_r+0x1a8>
 8004362:	bf00      	nop
 8004364:	0800463c 	.word	0x0800463c
 8004368:	08004642 	.word	0x08004642
 800436c:	08004646 	.word	0x08004646
 8004370:	080024c1 	.word	0x080024c1
 8004374:	080040d9 	.word	0x080040d9

08004378 <_sbrk_r>:
 8004378:	b538      	push	{r3, r4, r5, lr}
 800437a:	2300      	movs	r3, #0
 800437c:	4c05      	ldr	r4, [pc, #20]	; (8004394 <_sbrk_r+0x1c>)
 800437e:	4605      	mov	r5, r0
 8004380:	4608      	mov	r0, r1
 8004382:	6023      	str	r3, [r4, #0]
 8004384:	f000 f87a 	bl	800447c <_sbrk>
 8004388:	1c43      	adds	r3, r0, #1
 800438a:	d102      	bne.n	8004392 <_sbrk_r+0x1a>
 800438c:	6823      	ldr	r3, [r4, #0]
 800438e:	b103      	cbz	r3, 8004392 <_sbrk_r+0x1a>
 8004390:	602b      	str	r3, [r5, #0]
 8004392:	bd38      	pop	{r3, r4, r5, pc}
 8004394:	200002cc 	.word	0x200002cc

08004398 <__ascii_mbtowc>:
 8004398:	b082      	sub	sp, #8
 800439a:	b901      	cbnz	r1, 800439e <__ascii_mbtowc+0x6>
 800439c:	a901      	add	r1, sp, #4
 800439e:	b142      	cbz	r2, 80043b2 <__ascii_mbtowc+0x1a>
 80043a0:	b14b      	cbz	r3, 80043b6 <__ascii_mbtowc+0x1e>
 80043a2:	7813      	ldrb	r3, [r2, #0]
 80043a4:	600b      	str	r3, [r1, #0]
 80043a6:	7812      	ldrb	r2, [r2, #0]
 80043a8:	1c10      	adds	r0, r2, #0
 80043aa:	bf18      	it	ne
 80043ac:	2001      	movne	r0, #1
 80043ae:	b002      	add	sp, #8
 80043b0:	4770      	bx	lr
 80043b2:	4610      	mov	r0, r2
 80043b4:	e7fb      	b.n	80043ae <__ascii_mbtowc+0x16>
 80043b6:	f06f 0001 	mvn.w	r0, #1
 80043ba:	e7f8      	b.n	80043ae <__ascii_mbtowc+0x16>

080043bc <memmove>:
 80043bc:	4288      	cmp	r0, r1
 80043be:	b510      	push	{r4, lr}
 80043c0:	eb01 0302 	add.w	r3, r1, r2
 80043c4:	d803      	bhi.n	80043ce <memmove+0x12>
 80043c6:	1e42      	subs	r2, r0, #1
 80043c8:	4299      	cmp	r1, r3
 80043ca:	d10c      	bne.n	80043e6 <memmove+0x2a>
 80043cc:	bd10      	pop	{r4, pc}
 80043ce:	4298      	cmp	r0, r3
 80043d0:	d2f9      	bcs.n	80043c6 <memmove+0xa>
 80043d2:	1881      	adds	r1, r0, r2
 80043d4:	1ad2      	subs	r2, r2, r3
 80043d6:	42d3      	cmn	r3, r2
 80043d8:	d100      	bne.n	80043dc <memmove+0x20>
 80043da:	bd10      	pop	{r4, pc}
 80043dc:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80043e0:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80043e4:	e7f7      	b.n	80043d6 <memmove+0x1a>
 80043e6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80043ea:	f802 4f01 	strb.w	r4, [r2, #1]!
 80043ee:	e7eb      	b.n	80043c8 <memmove+0xc>

080043f0 <memset>:
 80043f0:	4603      	mov	r3, r0
 80043f2:	4402      	add	r2, r0
 80043f4:	4293      	cmp	r3, r2
 80043f6:	d100      	bne.n	80043fa <memset+0xa>
 80043f8:	4770      	bx	lr
 80043fa:	f803 1b01 	strb.w	r1, [r3], #1
 80043fe:	e7f9      	b.n	80043f4 <memset+0x4>

08004400 <__malloc_lock>:
 8004400:	4770      	bx	lr

08004402 <__malloc_unlock>:
 8004402:	4770      	bx	lr

08004404 <_realloc_r>:
 8004404:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004406:	4607      	mov	r7, r0
 8004408:	4614      	mov	r4, r2
 800440a:	460e      	mov	r6, r1
 800440c:	b921      	cbnz	r1, 8004418 <_realloc_r+0x14>
 800440e:	4611      	mov	r1, r2
 8004410:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004414:	f7ff be02 	b.w	800401c <_malloc_r>
 8004418:	b922      	cbnz	r2, 8004424 <_realloc_r+0x20>
 800441a:	f7ff fdb3 	bl	8003f84 <_free_r>
 800441e:	4625      	mov	r5, r4
 8004420:	4628      	mov	r0, r5
 8004422:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004424:	f000 f821 	bl	800446a <_malloc_usable_size_r>
 8004428:	4284      	cmp	r4, r0
 800442a:	d90f      	bls.n	800444c <_realloc_r+0x48>
 800442c:	4621      	mov	r1, r4
 800442e:	4638      	mov	r0, r7
 8004430:	f7ff fdf4 	bl	800401c <_malloc_r>
 8004434:	4605      	mov	r5, r0
 8004436:	2800      	cmp	r0, #0
 8004438:	d0f2      	beq.n	8004420 <_realloc_r+0x1c>
 800443a:	4631      	mov	r1, r6
 800443c:	4622      	mov	r2, r4
 800443e:	f7ff fab7 	bl	80039b0 <memcpy>
 8004442:	4631      	mov	r1, r6
 8004444:	4638      	mov	r0, r7
 8004446:	f7ff fd9d 	bl	8003f84 <_free_r>
 800444a:	e7e9      	b.n	8004420 <_realloc_r+0x1c>
 800444c:	4635      	mov	r5, r6
 800444e:	e7e7      	b.n	8004420 <_realloc_r+0x1c>

08004450 <__ascii_wctomb>:
 8004450:	b149      	cbz	r1, 8004466 <__ascii_wctomb+0x16>
 8004452:	2aff      	cmp	r2, #255	; 0xff
 8004454:	bf8b      	itete	hi
 8004456:	238a      	movhi	r3, #138	; 0x8a
 8004458:	700a      	strbls	r2, [r1, #0]
 800445a:	6003      	strhi	r3, [r0, #0]
 800445c:	2001      	movls	r0, #1
 800445e:	bf88      	it	hi
 8004460:	f04f 30ff 	movhi.w	r0, #4294967295
 8004464:	4770      	bx	lr
 8004466:	4608      	mov	r0, r1
 8004468:	4770      	bx	lr

0800446a <_malloc_usable_size_r>:
 800446a:	f851 0c04 	ldr.w	r0, [r1, #-4]
 800446e:	2800      	cmp	r0, #0
 8004470:	f1a0 0004 	sub.w	r0, r0, #4
 8004474:	bfbc      	itt	lt
 8004476:	580b      	ldrlt	r3, [r1, r0]
 8004478:	18c0      	addlt	r0, r0, r3
 800447a:	4770      	bx	lr

0800447c <_sbrk>:
 800447c:	4b04      	ldr	r3, [pc, #16]	; (8004490 <_sbrk+0x14>)
 800447e:	4602      	mov	r2, r0
 8004480:	6819      	ldr	r1, [r3, #0]
 8004482:	b909      	cbnz	r1, 8004488 <_sbrk+0xc>
 8004484:	4903      	ldr	r1, [pc, #12]	; (8004494 <_sbrk+0x18>)
 8004486:	6019      	str	r1, [r3, #0]
 8004488:	6818      	ldr	r0, [r3, #0]
 800448a:	4402      	add	r2, r0
 800448c:	601a      	str	r2, [r3, #0]
 800448e:	4770      	bx	lr
 8004490:	200001fc 	.word	0x200001fc
 8004494:	200002d0 	.word	0x200002d0

08004498 <_init>:
 8004498:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800449a:	bf00      	nop
 800449c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800449e:	bc08      	pop	{r3}
 80044a0:	469e      	mov	lr, r3
 80044a2:	4770      	bx	lr

080044a4 <_fini>:
 80044a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044a6:	bf00      	nop
 80044a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80044aa:	bc08      	pop	{r3}
 80044ac:	469e      	mov	lr, r3
 80044ae:	4770      	bx	lr
